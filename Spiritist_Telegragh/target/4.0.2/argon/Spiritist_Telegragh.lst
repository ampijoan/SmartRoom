
/Users/adrianpijoan/Documents/IoT/SmartRoom/Spiritist_Telegragh/target/4.0.2/argon/Spiritist_Telegragh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003234  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7250  000b7250  00007250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7274  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005fc  2003df10  000b7278  0001df10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e4  2003e50c  2003e50c  0002e50c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7874  000b7874  00027874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b789c  000b789c  0002789c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012bd56  00000000  00000000  000278a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001533a  00000000  00000000  001535f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003e742  00000000  00000000  00168930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003120  00000000  00000000  001a7072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ad88  00000000  00000000  001aa192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003df27  00000000  00000000  001b4f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004857e  00000000  00000000  001f2e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a081  00000000  00000000  0023b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b78  00000000  00000000  00375440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fb41 	bl	b66b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fb49 	bl	b66d0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df10 	.word	0x2003df10
   b4048:	000b7278 	.word	0x000b7278
   b404c:	2003e50c 	.word	0x2003e50c
   b4050:	2003e50c 	.word	0x2003e50c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f8f1 	bl	b6244 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7220 	.word	0x000b7220
   b407c:	000b7248 	.word	0x000b7248

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba32 	b.w	b44e8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa4d 	bl	b4524 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b891 	b.w	b61b4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b8f1 	b.w	b5278 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b8ef 	b.w	b5278 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b8f5 	b.w	b5288 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f852 	bl	b5150 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4e71 	.word	0x000b4e71
   b40b4:	000b6840 	.word	0x000b6840

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c8:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40ca:	b510      	push	{r4, lr}
   b40cc:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40ce:	d90d      	bls.n	b40ec <nrf_gpio_pin_read+0x24>
   b40d0:	4a09      	ldr	r2, [pc, #36]	; (b40f8 <nrf_gpio_pin_read+0x30>)
   b40d2:	490a      	ldr	r1, [pc, #40]	; (b40fc <nrf_gpio_pin_read+0x34>)
   b40d4:	200a      	movs	r0, #10
   b40d6:	f001 f83b 	bl	b5150 <panic_>
        return NRF_P1;
   b40da:	4b09      	ldr	r3, [pc, #36]	; (b4100 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40dc:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40e0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40e4:	40e0      	lsrs	r0, r4
}
   b40e6:	f000 0001 	and.w	r0, r0, #1
   b40ea:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40ec:	281f      	cmp	r0, #31
   b40ee:	d8f4      	bhi.n	b40da <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40f4:	e7f4      	b.n	b40e0 <nrf_gpio_pin_read+0x18>
   b40f6:	bf00      	nop
   b40f8:	000b4e71 	.word	0x000b4e71
   b40fc:	000b6855 	.word	0x000b6855
   b4100:	50000300 	.word	0x50000300

000b4104 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4108:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4238 <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b410c:	6887      	ldr	r7, [r0, #8]
   b410e:	f898 3000 	ldrb.w	r3, [r8]
   b4112:	4d48      	ldr	r5, [pc, #288]	; (b4234 <_ZN7Encoder16interruptHandlerEv+0x130>)
   b4114:	f3bf 8f5b 	dmb	ish
   b4118:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b411c:	4604      	mov	r4, r0
   b411e:	d109      	bne.n	b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4120:	4640      	mov	r0, r8
   b4122:	f7ff ffc9 	bl	b40b8 <__cxa_guard_acquire>
   b4126:	b128      	cbz	r0, b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4128:	f000 feb2 	bl	b4e90 <HAL_Pin_Map>
   b412c:	6028      	str	r0, [r5, #0]
   b412e:	4640      	mov	r0, r8
   b4130:	f7ff ffc7 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4134:	b2bf      	uxth	r7, r7
   b4136:	682b      	ldr	r3, [r5, #0]
   b4138:	013f      	lsls	r7, r7, #4
   b413a:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b413c:	f898 3000 	ldrb.w	r3, [r8]
   b4140:	f3bf 8f5b 	dmb	ish
   b4144:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4146:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b414a:	d409      	bmi.n	b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b414c:	483a      	ldr	r0, [pc, #232]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b414e:	f7ff ffb3 	bl	b40b8 <__cxa_guard_acquire>
   b4152:	b128      	cbz	r0, b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4154:	f000 fe9c 	bl	b4e90 <HAL_Pin_Map>
   b4158:	6028      	str	r0, [r5, #0]
   b415a:	4837      	ldr	r0, [pc, #220]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b415c:	f7ff ffb1 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4160:	682b      	ldr	r3, [r5, #0]
   b4162:	443b      	add	r3, r7
   b4164:	785e      	ldrb	r6, [r3, #1]
   b4166:	f006 061f 	and.w	r6, r6, #31
   b416a:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b416e:	4630      	mov	r0, r6
   b4170:	f7ff ffaa 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4174:	4630      	mov	r0, r6
   b4176:	f7ff ffa7 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b417a:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b417c:	f898 3000 	ldrb.w	r3, [r8]
   b4180:	f3bf 8f5b 	dmb	ish
   b4184:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b4186:	b2c6      	uxtb	r6, r0
   b4188:	d409      	bmi.n	b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b418a:	482b      	ldr	r0, [pc, #172]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b418c:	f7ff ff94 	bl	b40b8 <__cxa_guard_acquire>
   b4190:	b128      	cbz	r0, b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4192:	f000 fe7d 	bl	b4e90 <HAL_Pin_Map>
   b4196:	6028      	str	r0, [r5, #0]
   b4198:	4827      	ldr	r0, [pc, #156]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b419a:	f7ff ff92 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b419e:	b2bf      	uxth	r7, r7
   b41a0:	682b      	ldr	r3, [r5, #0]
   b41a2:	013f      	lsls	r7, r7, #4
   b41a4:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41a8:	f898 3000 	ldrb.w	r3, [r8]
   b41ac:	f3bf 8f5b 	dmb	ish
   b41b0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b2:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41b6:	d409      	bmi.n	b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41b8:	481f      	ldr	r0, [pc, #124]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41ba:	f7ff ff7d 	bl	b40b8 <__cxa_guard_acquire>
   b41be:	b128      	cbz	r0, b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41c0:	f000 fe66 	bl	b4e90 <HAL_Pin_Map>
   b41c4:	6028      	str	r0, [r5, #0]
   b41c6:	481c      	ldr	r0, [pc, #112]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41c8:	f7ff ff7b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41cc:	682b      	ldr	r3, [r5, #0]
   b41ce:	441f      	add	r7, r3
   b41d0:	787d      	ldrb	r5, [r7, #1]
   b41d2:	f005 051f 	and.w	r5, r5, #31
   b41d6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41da:	4628      	mov	r0, r5
   b41dc:	f7ff ff74 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41e0:	4628      	mov	r0, r5
   b41e2:	f7ff ff71 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41e6:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41e8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41ea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41ee:	b10e      	cbz	r6, b41f4 <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41f0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41f4:	b108      	cbz	r0, b41fa <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41f6:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41fa:	089a      	lsrs	r2, r3, #2
   b41fc:	3b01      	subs	r3, #1
   b41fe:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b4200:	2b0d      	cmp	r3, #13
   b4202:	d80b      	bhi.n	b421c <_ZN7Encoder16interruptHandlerEv+0x118>
   b4204:	e8df f003 	tbb	[pc, r3]
   b4208:	0c0f0c07 	.word	0x0c0f0c07
   b420c:	0707120a 	.word	0x0707120a
   b4210:	0f0c0a12 	.word	0x0f0c0a12
   b4214:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b4216:	6963      	ldr	r3, [r4, #20]
   b4218:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b421a:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4220:	6963      	ldr	r3, [r4, #20]
   b4222:	3b01      	subs	r3, #1
   b4224:	e7f9      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b4226:	6963      	ldr	r3, [r4, #20]
   b4228:	3302      	adds	r3, #2
   b422a:	e7f6      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b422c:	6963      	ldr	r3, [r4, #20]
   b422e:	3b02      	subs	r3, #2
   b4230:	e7f3      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
   b4232:	bf00      	nop
   b4234:	2003e510 	.word	0x2003e510
   b4238:	2003e50c 	.word	0x2003e50c

000b423c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b423c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b423e:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4240:	685a      	ldr	r2, [r3, #4]
   b4242:	6899      	ldr	r1, [r3, #8]
   b4244:	681b      	ldr	r3, [r3, #0]
   b4246:	1054      	asrs	r4, r2, #1
   b4248:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b424c:	07d2      	lsls	r2, r2, #31
   b424e:	bf48      	it	mi
   b4250:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4252:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4256:	bf48      	it	mi
   b4258:	58d3      	ldrmi	r3, [r2, r3]
   b425a:	4718      	bx	r3

000b425c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b425c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b425e:	b538      	push	{r3, r4, r5, lr}
   b4260:	4604      	mov	r4, r0
	switch (__op)
   b4262:	d102      	bne.n	b426a <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4264:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4266:	6023      	str	r3, [r4, #0]
	}
   b4268:	e003      	b.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b426a:	2a02      	cmp	r2, #2
   b426c:	d003      	beq.n	b4276 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b426e:	2a03      	cmp	r2, #3
   b4270:	d00d      	beq.n	b428e <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4272:	2000      	movs	r0, #0
   b4274:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4276:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4278:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b427a:	f7ff ff0a 	bl	b4092 <_Znwj>
   b427e:	4603      	mov	r3, r0
   b4280:	2800      	cmp	r0, #0
   b4282:	d0f0      	beq.n	b4266 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b428c:	e7eb      	b.n	b4266 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b428e:	6800      	ldr	r0, [r0, #0]
   b4290:	2800      	cmp	r0, #0
   b4292:	d0ee      	beq.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4294:	210c      	movs	r1, #12
   b4296:	f7ff ff00 	bl	b409a <_ZdlPvj>
   b429a:	e7ea      	b.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b429c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b429e:	b08d      	sub	sp, #52	; 0x34
   b42a0:	ad02      	add	r5, sp, #8
   b42a2:	e885 0006 	stmia.w	r5, {r1, r2}
   b42a6:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42ac:	ac05      	add	r4, sp, #20
   b42ae:	e884 0005 	stmia.w	r4, {r0, r2}
   b42b2:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42b4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42b6:	2300      	movs	r3, #0
   b42b8:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42ba:	f7ff feea 	bl	b4092 <_Znwj>
   b42be:	4602      	mov	r2, r0
   b42c0:	b120      	cbz	r0, b42cc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42c6:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42ca:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42cc:	4b0b      	ldr	r3, [pc, #44]	; (b42fc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42ce:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42d0:	4b0b      	ldr	r3, [pc, #44]	; (b4300 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42d2:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b42d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42d8:	9208      	str	r2, [sp, #32]
   b42da:	9300      	str	r3, [sp, #0]
   b42dc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b42e0:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b42e4:	a908      	add	r1, sp, #32
   b42e6:	4630      	mov	r0, r6
   b42e8:	f001 f8da 	bl	b54a0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b42ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b42ee:	b11b      	cbz	r3, b42f8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42f0:	a908      	add	r1, sp, #32
   b42f2:	2203      	movs	r2, #3
   b42f4:	4608      	mov	r0, r1
   b42f6:	4798      	blx	r3
}
   b42f8:	b00d      	add	sp, #52	; 0x34
   b42fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b42fc:	000b423d 	.word	0x000b423d
   b4300:	000b425d 	.word	0x000b425d

000b4304 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4304:	b40e      	push	{r1, r2, r3}
   b4306:	b503      	push	{r0, r1, lr}
   b4308:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b430a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b430c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4310:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4312:	f001 fa98 	bl	b5846 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4316:	b002      	add	sp, #8
   b4318:	f85d eb04 	ldr.w	lr, [sp], #4
   b431c:	b003      	add	sp, #12
   b431e:	4770      	bx	lr

000b4320 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4320:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4322:	6984      	ldr	r4, [r0, #24]
   b4324:	4b0a      	ldr	r3, [pc, #40]	; (b4350 <_ZN9TCPClientD1Ev+0x30>)
   b4326:	6003      	str	r3, [r0, #0]
   b4328:	4605      	mov	r5, r0
   b432a:	b17c      	cbz	r4, b434c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b432c:	6863      	ldr	r3, [r4, #4]
   b432e:	3b01      	subs	r3, #1
   b4330:	6063      	str	r3, [r4, #4]
   b4332:	b95b      	cbnz	r3, b434c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4334:	6823      	ldr	r3, [r4, #0]
   b4336:	4620      	mov	r0, r4
   b4338:	689b      	ldr	r3, [r3, #8]
   b433a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b433c:	68a3      	ldr	r3, [r4, #8]
   b433e:	3b01      	subs	r3, #1
   b4340:	60a3      	str	r3, [r4, #8]
   b4342:	b91b      	cbnz	r3, b434c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4344:	6823      	ldr	r3, [r4, #0]
   b4346:	4620      	mov	r0, r4
   b4348:	68db      	ldr	r3, [r3, #12]
   b434a:	4798      	blx	r3
   b434c:	4628      	mov	r0, r5
   b434e:	bd38      	pop	{r3, r4, r5, pc}
   b4350:	000b6fbc 	.word	0x000b6fbc

000b4354 <_ZN9TCPClientD0Ev>:
   b4354:	b510      	push	{r4, lr}
   b4356:	4604      	mov	r4, r0
   b4358:	f7ff ffe2 	bl	b4320 <_ZN9TCPClientD1Ev>
   b435c:	4620      	mov	r0, r4
   b435e:	211c      	movs	r1, #28
   b4360:	f7ff fe9b 	bl	b409a <_ZdlPvj>
   b4364:	4620      	mov	r0, r4
   b4366:	bd10      	pop	{r4, pc}

000b4368 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b4368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b436c:	460f      	mov	r7, r1
   b436e:	4604      	mov	r4, r0
   b4370:	4616      	mov	r6, r2
   b4372:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b4374:	2102      	movs	r1, #2
   b4376:	4638      	mov	r0, r7
   b4378:	f001 ffd4 	bl	b6324 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b437c:	2102      	movs	r1, #2
   b437e:	4630      	mov	r0, r6
   b4380:	f001 ffd0 	bl	b6324 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4384:	f8df b158 	ldr.w	fp, [pc, #344]	; b44e0 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b4388:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b438a:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b438c:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b4390:	6023      	str	r3, [r4, #0]
		position = 0;
   b4392:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4398:	f000 fd6a 	bl	b4e70 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b439c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b43a0:	f89b 3000 	ldrb.w	r3, [fp]
   b43a4:	4d4d      	ldr	r5, [pc, #308]	; (b44dc <_ZN7EncoderC1Ett+0x174>)
   b43a6:	f3bf 8f5b 	dmb	ish
   b43aa:	f013 0f01 	tst.w	r3, #1
   b43ae:	d109      	bne.n	b43c4 <_ZN7EncoderC1Ett+0x5c>
   b43b0:	4658      	mov	r0, fp
   b43b2:	f7ff fe81 	bl	b40b8 <__cxa_guard_acquire>
   b43b6:	b128      	cbz	r0, b43c4 <_ZN7EncoderC1Ett+0x5c>
   b43b8:	f000 fd6a 	bl	b4e90 <HAL_Pin_Map>
   b43bc:	6028      	str	r0, [r5, #0]
   b43be:	4658      	mov	r0, fp
   b43c0:	f7ff fe7f 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43c4:	fa1f fa8a 	uxth.w	sl, sl
   b43c8:	682b      	ldr	r3, [r5, #0]
   b43ca:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b43ce:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43d2:	f89b 3000 	ldrb.w	r3, [fp]
   b43d6:	f3bf 8f5b 	dmb	ish
   b43da:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43dc:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43e0:	d409      	bmi.n	b43f6 <_ZN7EncoderC1Ett+0x8e>
   b43e2:	483f      	ldr	r0, [pc, #252]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b43e4:	f7ff fe68 	bl	b40b8 <__cxa_guard_acquire>
   b43e8:	b128      	cbz	r0, b43f6 <_ZN7EncoderC1Ett+0x8e>
   b43ea:	f000 fd51 	bl	b4e90 <HAL_Pin_Map>
   b43ee:	6028      	str	r0, [r5, #0]
   b43f0:	483b      	ldr	r0, [pc, #236]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b43f2:	f7ff fe66 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43f6:	682b      	ldr	r3, [r5, #0]
   b43f8:	4453      	add	r3, sl
   b43fa:	f893 8001 	ldrb.w	r8, [r3, #1]
   b43fe:	f008 081f 	and.w	r8, r8, #31
   b4402:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b4406:	4640      	mov	r0, r8
   b4408:	f7ff fe5e 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b440c:	4640      	mov	r0, r8
   b440e:	f7ff fe5b 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b4412:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4416:	f89b 3000 	ldrb.w	r3, [fp]
   b441a:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b441e:	f1b0 0800 	subs.w	r8, r0, #0
   b4422:	bf18      	it	ne
   b4424:	f04f 0801 	movne.w	r8, #1
   b4428:	07da      	lsls	r2, r3, #31
   b442a:	d409      	bmi.n	b4440 <_ZN7EncoderC1Ett+0xd8>
   b442c:	482c      	ldr	r0, [pc, #176]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b442e:	f7ff fe43 	bl	b40b8 <__cxa_guard_acquire>
   b4432:	b128      	cbz	r0, b4440 <_ZN7EncoderC1Ett+0xd8>
   b4434:	f000 fd2c 	bl	b4e90 <HAL_Pin_Map>
   b4438:	6028      	str	r0, [r5, #0]
   b443a:	4829      	ldr	r0, [pc, #164]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b443c:	f7ff fe41 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4440:	fa1f fa8a 	uxth.w	sl, sl
   b4444:	682b      	ldr	r3, [r5, #0]
   b4446:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b444a:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b444e:	f89b 3000 	ldrb.w	r3, [fp]
   b4452:	f3bf 8f5b 	dmb	ish
   b4456:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4458:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b445c:	d409      	bmi.n	b4472 <_ZN7EncoderC1Ett+0x10a>
   b445e:	4820      	ldr	r0, [pc, #128]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b4460:	f7ff fe2a 	bl	b40b8 <__cxa_guard_acquire>
   b4464:	b128      	cbz	r0, b4472 <_ZN7EncoderC1Ett+0x10a>
   b4466:	f000 fd13 	bl	b4e90 <HAL_Pin_Map>
   b446a:	6028      	str	r0, [r5, #0]
   b446c:	481c      	ldr	r0, [pc, #112]	; (b44e0 <_ZN7EncoderC1Ett+0x178>)
   b446e:	f7ff fe28 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4472:	682b      	ldr	r3, [r5, #0]
   b4474:	449a      	add	sl, r3
   b4476:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b447a:	f005 051f 	and.w	r5, r5, #31
   b447e:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b4482:	4628      	mov	r0, r5
   b4484:	f7ff fe20 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4488:	4628      	mov	r0, r5
   b448a:	f7ff fe1d 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b448e:	b108      	cbz	r0, b4494 <_ZN7EncoderC1Ett+0x12c>
   b4490:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b4494:	f8df 904c 	ldr.w	r9, [pc, #76]	; b44e4 <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b4498:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b449c:	2500      	movs	r5, #0
   b449e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b44a2:	4623      	mov	r3, r4
   b44a4:	462a      	mov	r2, r5
   b44a6:	4649      	mov	r1, r9
   b44a8:	4638      	mov	r0, r7
   b44aa:	e9cd 5800 	strd	r5, r8, [sp]
   b44ae:	9502      	str	r5, [sp, #8]
   b44b0:	f8cd 9010 	str.w	r9, [sp, #16]
   b44b4:	9505      	str	r5, [sp, #20]
   b44b6:	f7ff fef1 	bl	b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b44ba:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b44be:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b44c2:	9500      	str	r5, [sp, #0]
   b44c4:	aa08      	add	r2, sp, #32
   b44c6:	4630      	mov	r0, r6
   b44c8:	e912 0006 	ldmdb	r2, {r1, r2}
   b44cc:	4623      	mov	r3, r4
   b44ce:	f7ff fee5 	bl	b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b44d2:	4620      	mov	r0, r4
   b44d4:	b009      	add	sp, #36	; 0x24
   b44d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b44da:	bf00      	nop
   b44dc:	2003e510 	.word	0x2003e510
   b44e0:	2003e50c 	.word	0x2003e50c
   b44e4:	000b4105 	.word	0x000b4105

000b44e8 <setup>:


SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_MODE(MANUAL);

void setup() {
   b44e8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b44ea:	f001 fddd 	bl	b60a8 <_Z16_fetch_usbserialv>
   b44ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b44f2:	f001 fdcd 	bl	b6090 <_ZN9USBSerial5beginEl>
  // WiFi.on();
  // WiFi.setCredentials("IoTNetwork");
  // WiFi.connect();

  pinMode(ENCSWITCH, INPUT_PULLUP);
   b44f6:	2102      	movs	r1, #2
   b44f8:	2006      	movs	r0, #6
   b44fa:	f001 ff13 	bl	b6324 <pinMode>
  pinMode(ENCLEDG, OUTPUT);
   b44fe:	2101      	movs	r1, #1
   b4500:	2005      	movs	r0, #5
   b4502:	f001 ff0f 	bl	b6324 <pinMode>
  pinMode(ENCLEDR, OUTPUT);
   b4506:	2101      	movs	r1, #1
   b4508:	2004      	movs	r0, #4
   b450a:	f001 ff0b 	bl	b6324 <pinMode>

  digitalWrite(ENCLEDG, HIGH);
   b450e:	2101      	movs	r1, #1
   b4510:	2005      	movs	r0, #5
   b4512:	f001 ff18 	bl	b6346 <digitalWrite>
  digitalWrite(ENCLEDR, LOW);

}
   b4516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(ENCLEDR, LOW);
   b451a:	2100      	movs	r1, #0
   b451c:	2004      	movs	r0, #4
   b451e:	f001 bf12 	b.w	b6346 <digitalWrite>
	...

000b4524 <loop>:

void loop() {
   b4524:	b573      	push	{r0, r1, r4, r5, r6, lr}
		int32_t ret = position;
   b4526:	4d24      	ldr	r5, [pc, #144]	; (b45b8 <loop+0x94>)

  encPosition = spiritEncoder.read();
   b4528:	4c24      	ldr	r4, [pc, #144]	; (b45bc <loop+0x98>)
		noInterrupts();
   b452a:	f000 ffeb 	bl	b5504 <_Z12noInterruptsv>
		int32_t ret = position;
   b452e:	696e      	ldr	r6, [r5, #20]
		interrupts();
   b4530:	f000 ffea 	bl	b5508 <_Z10interruptsv>

  if(encPosition < 0){ 
   b4534:	2e00      	cmp	r6, #0
  encPosition = spiritEncoder.read();
   b4536:	6026      	str	r6, [r4, #0]
  if(encPosition < 0){ 
   b4538:	da38      	bge.n	b45ac <loop+0x88>
		noInterrupts();
   b453a:	f000 ffe3 	bl	b5504 <_Z12noInterruptsv>
		position = p;
   b453e:	2660      	movs	r6, #96	; 0x60
   b4540:	616e      	str	r6, [r5, #20]
		interrupts();
   b4542:	f000 ffe1 	bl	b5508 <_Z10interruptsv>
    encPosition = 96;
  }

  if(encPosition > 96){
    spiritEncoder.write(0);
    encPosition = 0;
   b4546:	6026      	str	r6, [r4, #0]
  }

  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4548:	2327      	movs	r3, #39	; 0x27
   b454a:	9300      	str	r3, [sp, #0]
   b454c:	2300      	movs	r3, #0
   b454e:	6820      	ldr	r0, [r4, #0]

  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b4550:	4e1b      	ldr	r6, [pc, #108]	; (b45c0 <loop+0x9c>)
  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4552:	4d1c      	ldr	r5, [pc, #112]	; (b45c4 <loop+0xa0>)
   b4554:	4c1c      	ldr	r4, [pc, #112]	; (b45c8 <loop+0xa4>)
   b4556:	4619      	mov	r1, r3
   b4558:	2260      	movs	r2, #96	; 0x60
   b455a:	f000 fecd 	bl	b52f8 <_Z3mapiiiii>
  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b455e:	6833      	ldr	r3, [r6, #0]
  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4560:	6028      	str	r0, [r5, #0]
  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b4562:	4298      	cmp	r0, r3
   b4564:	d008      	beq.n	b4578 <loop+0x54>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4566:	f000 fc8b 	bl	b4e80 <HAL_Timer_Get_Milli_Seconds>
  public:
    //IoT Constructor with no parameters
    //IotTimer() {}
    
    void startTimer(unsigned int msec) {
      _timerStart = millis();
   b456a:	4b18      	ldr	r3, [pc, #96]	; (b45cc <loop+0xa8>)
      _timerTarget = msec;       
   b456c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
      _timerStart = millis();
   b4570:	6018      	str	r0, [r3, #0]
      _timerTarget = msec;       
   b4572:	605a      	str	r2, [r3, #4]
    ouijaTimer.startTimer(500); //wait 0.5 seconds
    ouijaToggle = true;
   b4574:	2301      	movs	r3, #1
   b4576:	7023      	strb	r3, [r4, #0]
  }

  previousOuijaChar = ouijaChar;
   b4578:	682b      	ldr	r3, [r5, #0]
   b457a:	6033      	str	r3, [r6, #0]

  if((previousOuijaChar == ouijaChar) && ouijaToggle && ouijaTimer.isTimerReady()){  //if it sees a new position and it has held that position for more than 3/4 a second, do something
   b457c:	7823      	ldrb	r3, [r4, #0]
   b457e:	b19b      	cbz	r3, b45a8 <loop+0x84>
   b4580:	f000 fc7e 	bl	b4e80 <HAL_Timer_Get_Milli_Seconds>
    }

    bool isTimerReady() {
      return ((millis() - _timerStart) >= _timerTarget);
   b4584:	4b11      	ldr	r3, [pc, #68]	; (b45cc <loop+0xa8>)
   b4586:	681a      	ldr	r2, [r3, #0]
   b4588:	685b      	ldr	r3, [r3, #4]
   b458a:	1a80      	subs	r0, r0, r2
   b458c:	4298      	cmp	r0, r3
   b458e:	d30b      	bcc.n	b45a8 <loop+0x84>
    Serial.printf("%s\n", ouijaBoard[ouijaChar]);
   b4590:	f001 fd8a 	bl	b60a8 <_Z16_fetch_usbserialv>
   b4594:	682a      	ldr	r2, [r5, #0]
   b4596:	4b0e      	ldr	r3, [pc, #56]	; (b45d0 <loop+0xac>)
   b4598:	490e      	ldr	r1, [pc, #56]	; (b45d4 <loop+0xb0>)
   b459a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   b459e:	441a      	add	r2, r3
   b45a0:	f7ff feb0 	bl	b4304 <_ZN5Print6printfEPKcz>
    ouijaToggle = false;
   b45a4:	2300      	movs	r3, #0
   b45a6:	7023      	strb	r3, [r4, #0]
  }
 

   b45a8:	b002      	add	sp, #8
   b45aa:	bd70      	pop	{r4, r5, r6, pc}
  if(encPosition > 96){
   b45ac:	2e60      	cmp	r6, #96	; 0x60
   b45ae:	ddcb      	ble.n	b4548 <loop+0x24>
		noInterrupts();
   b45b0:	f000 ffa8 	bl	b5504 <_Z12noInterruptsv>
		position = p;
   b45b4:	2600      	movs	r6, #0
   b45b6:	e7c3      	b.n	b4540 <loop+0x1c>
   b45b8:	2003e60c 	.word	0x2003e60c
   b45bc:	2003e59c 	.word	0x2003e59c
   b45c0:	2003e5d4 	.word	0x2003e5d4
   b45c4:	2003e5b0 	.word	0x2003e5b0
   b45c8:	2003e5bc 	.word	0x2003e5bc
   b45cc:	2003e5b4 	.word	0x2003e5b4
   b45d0:	2003df28 	.word	0x2003df28
   b45d4:	000b6951 	.word	0x000b6951

000b45d8 <_GLOBAL__sub_I_hueOn>:
   b45d8:	b508      	push	{r3, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b45da:	491f      	ldr	r1, [pc, #124]	; (b4658 <_GLOBAL__sub_I_hueOn+0x80>)
   b45dc:	481f      	ldr	r0, [pc, #124]	; (b465c <_GLOBAL__sub_I_hueOn+0x84>)
   b45de:	f001 f9b7 	bl	b5950 <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b45e2:	4a1f      	ldr	r2, [pc, #124]	; (b4660 <_GLOBAL__sub_I_hueOn+0x88>)
   b45e4:	4b1f      	ldr	r3, [pc, #124]	; (b4664 <_GLOBAL__sub_I_hueOn+0x8c>)
   b45e6:	6812      	ldr	r2, [r2, #0]
   b45e8:	601a      	str	r2, [r3, #0]
   b45ea:	4a1f      	ldr	r2, [pc, #124]	; (b4668 <_GLOBAL__sub_I_hueOn+0x90>)

TCPClient HueClient;
   b45ec:	481f      	ldr	r0, [pc, #124]	; (b466c <_GLOBAL__sub_I_hueOn+0x94>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b45ee:	6812      	ldr	r2, [r2, #0]
   b45f0:	605a      	str	r2, [r3, #4]
   b45f2:	4a1f      	ldr	r2, [pc, #124]	; (b4670 <_GLOBAL__sub_I_hueOn+0x98>)
   b45f4:	6812      	ldr	r2, [r2, #0]
   b45f6:	609a      	str	r2, [r3, #8]
   b45f8:	4a1e      	ldr	r2, [pc, #120]	; (b4674 <_GLOBAL__sub_I_hueOn+0x9c>)
   b45fa:	6812      	ldr	r2, [r2, #0]
   b45fc:	60da      	str	r2, [r3, #12]
   b45fe:	4a1e      	ldr	r2, [pc, #120]	; (b4678 <_GLOBAL__sub_I_hueOn+0xa0>)
   b4600:	6812      	ldr	r2, [r2, #0]
   b4602:	611a      	str	r2, [r3, #16]
   b4604:	4a1d      	ldr	r2, [pc, #116]	; (b467c <_GLOBAL__sub_I_hueOn+0xa4>)
   b4606:	6812      	ldr	r2, [r2, #0]
   b4608:	615a      	str	r2, [r3, #20]
   b460a:	4a1d      	ldr	r2, [pc, #116]	; (b4680 <_GLOBAL__sub_I_hueOn+0xa8>)
   b460c:	6812      	ldr	r2, [r2, #0]
   b460e:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4610:	f001 fc7c 	bl	b5f0c <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4614:	481b      	ldr	r0, [pc, #108]	; (b4684 <_GLOBAL__sub_I_hueOn+0xac>)
   b4616:	f001 fc79 	bl	b5f0c <_ZN9TCPClientC1Ev>
Encoder spiritEncoder(ENCPINB, ENCPINA);
   b461a:	2210      	movs	r2, #16
   b461c:	210f      	movs	r1, #15
   b461e:	481a      	ldr	r0, [pc, #104]	; (b4688 <_GLOBAL__sub_I_hueOn+0xb0>)
   b4620:	f7ff fea2 	bl	b4368 <_ZN7EncoderC1Ett>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4624:	2302      	movs	r3, #2
   b4626:	2208      	movs	r2, #8
   b4628:	212e      	movs	r1, #46	; 0x2e
   b462a:	4818      	ldr	r0, [pc, #96]	; (b468c <_GLOBAL__sub_I_hueOn+0xb4>)
   b462c:	f000 f871 	bl	b4712 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_BMP280 spiritBmp;
   b4630:	4817      	ldr	r0, [pc, #92]	; (b4690 <_GLOBAL__sub_I_hueOn+0xb8>)
   b4632:	f000 f833 	bl	b469c <_ZN15Adafruit_BMP280C1Ev>
Adafruit_SSD1306 display(OLED_RESET);
   b4636:	4817      	ldr	r0, [pc, #92]	; (b4694 <_GLOBAL__sub_I_hueOn+0xbc>)
   b4638:	2104      	movs	r1, #4
   b463a:	f000 fbf3 	bl	b4e24 <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b463e:	4b16      	ldr	r3, [pc, #88]	; (b4698 <_GLOBAL__sub_I_hueOn+0xc0>)
   b4640:	2200      	movs	r2, #0
   b4642:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4646:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b464a:	609a      	str	r2, [r3, #8]
   b464c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4650:	2002      	movs	r0, #2
   b4652:	f000 bd8d 	b.w	b5170 <set_system_mode>
   b4656:	bf00      	nop
   b4658:	000b6894 	.word	0x000b6894
   b465c:	2003e5a0 	.word	0x2003e5a0
   b4660:	2003e54c 	.word	0x2003e54c
   b4664:	2003e530 	.word	0x2003e530
   b4668:	2003df1c 	.word	0x2003df1c
   b466c:	2003e514 	.word	0x2003e514
   b4670:	2003df24 	.word	0x2003df24
   b4674:	2003df14 	.word	0x2003df14
   b4678:	2003df10 	.word	0x2003df10
   b467c:	2003df18 	.word	0x2003df18
   b4680:	2003df20 	.word	0x2003df20
   b4684:	2003e55c 	.word	0x2003e55c
   b4688:	2003e60c 	.word	0x2003e60c
   b468c:	2003e5c0 	.word	0x2003e5c0
   b4690:	2003e5d8 	.word	0x2003e5d8
   b4694:	2003e578 	.word	0x2003e578
   b4698:	2003e550 	.word	0x2003e550

000b469c <_ZN15Adafruit_BMP280C1Ev>:
 PRIVATE FUNCTIONS
 ***************************************************************************/


Adafruit_BMP280::Adafruit_BMP280()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b469c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b46a0:	60c3      	str	r3, [r0, #12]
{ }
   b46a2:	4770      	bx	lr

000b46a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b46a4:	b538      	push	{r3, r4, r5, lr}
   b46a6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b46a8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b46aa:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b46ac:	b108      	cbz	r0, b46b2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b46ae:	f000 fdeb 	bl	b5288 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b46b2:	79a3      	ldrb	r3, [r4, #6]
   b46b4:	2b06      	cmp	r3, #6
   b46b6:	bf0c      	ite	eq
   b46b8:	2004      	moveq	r0, #4
   b46ba:	2003      	movne	r0, #3
   b46bc:	fb10 f005 	smulbb	r0, r0, r5
   b46c0:	b280      	uxth	r0, r0
   b46c2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b46c4:	f000 fdd8 	bl	b5278 <malloc>
   b46c8:	60e0      	str	r0, [r4, #12]
   b46ca:	b128      	cbz	r0, b46d8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b46cc:	88a2      	ldrh	r2, [r4, #4]
   b46ce:	2100      	movs	r1, #0
   b46d0:	f001 fffe 	bl	b66d0 <memset>
    numLEDs = n;
   b46d4:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b46d6:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b46d8:	80a0      	strh	r0, [r4, #4]
   b46da:	8060      	strh	r0, [r4, #2]
}
   b46dc:	e7fb      	b.n	b46d6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b46de <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b46de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b46e0:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b46e2:	4605      	mov	r5, r0
   b46e4:	460c      	mov	r4, r1
    if (begun) {
   b46e6:	b11b      	cbz	r3, b46f0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b46e8:	79c0      	ldrb	r0, [r0, #7]
   b46ea:	2100      	movs	r1, #0
   b46ec:	f001 fe1a 	bl	b6324 <pinMode>
    }
    pin = p;
    if (begun) {
   b46f0:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b46f2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b46f4:	b15b      	cbz	r3, b470e <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b46f6:	b2a0      	uxth	r0, r4
   b46f8:	2101      	movs	r1, #1
   b46fa:	9001      	str	r0, [sp, #4]
   b46fc:	f001 fe12 	bl	b6324 <pinMode>
        digitalWrite(p, LOW);
   b4700:	9801      	ldr	r0, [sp, #4]
   b4702:	2100      	movs	r1, #0
    }
}
   b4704:	b003      	add	sp, #12
   b4706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b470a:	f001 be1c 	b.w	b6346 <digitalWrite>
}
   b470e:	b003      	add	sp, #12
   b4710:	bd30      	pop	{r4, r5, pc}

000b4712 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4712:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4714:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4716:	4604      	mov	r4, r0
   b4718:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b471a:	7183      	strb	r3, [r0, #6]
   b471c:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4720:	7005      	strb	r5, [r0, #0]
   b4722:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4724:	f7ff ffbe 	bl	b46a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4728:	4620      	mov	r0, r4
   b472a:	4631      	mov	r1, r6
   b472c:	f7ff ffd7 	bl	b46de <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4730:	4620      	mov	r0, r4
   b4732:	bd70      	pop	{r4, r5, r6, pc}

000b4734 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4734:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4736:	f000 fbab 	bl	b4e90 <HAL_Pin_Map>
   b473a:	4b01      	ldr	r3, [pc, #4]	; (b4740 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b473c:	6018      	str	r0, [r3, #0]
}
   b473e:	bd08      	pop	{r3, pc}
   b4740:	2003e630 	.word	0x2003e630

000b4744 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4748:	b085      	sub	sp, #20
   b474a:	461f      	mov	r7, r3
   b474c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4750:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4754:	eba8 0902 	sub.w	r9, r8, r2
   b4758:	eba7 0a01 	sub.w	sl, r7, r1
   b475c:	f1b9 0f00 	cmp.w	r9, #0
   b4760:	bfb8      	it	lt
   b4762:	f1c9 0900 	rsblt	r9, r9, #0
   b4766:	f1ba 0f00 	cmp.w	sl, #0
   b476a:	bfb8      	it	lt
   b476c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4770:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4772:	4683      	mov	fp, r0
   b4774:	460c      	mov	r4, r1
   b4776:	4615      	mov	r5, r2
  if (steep) {
   b4778:	dd04      	ble.n	b4784 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b477a:	463a      	mov	r2, r7
    swap(x0, y0);
   b477c:	462c      	mov	r4, r5
    swap(x1, y1);
   b477e:	4647      	mov	r7, r8
    swap(x0, y0);
   b4780:	460d      	mov	r5, r1
    swap(x1, y1);
   b4782:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4784:	42bc      	cmp	r4, r7
   b4786:	dd05      	ble.n	b4794 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4788:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b478a:	4645      	mov	r5, r8
   b478c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b478e:	4622      	mov	r2, r4
   b4790:	463c      	mov	r4, r7
   b4792:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4794:	1b3e      	subs	r6, r7, r4
   b4796:	b2b2      	uxth	r2, r6
   b4798:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b479a:	eba8 0205 	sub.w	r2, r8, r5
   b479e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b47a2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b47a6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b47aa:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b47ae:	4545      	cmp	r5, r8
   b47b0:	bfb4      	ite	lt
   b47b2:	2201      	movlt	r2, #1
   b47b4:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b47b8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b47ba:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b47bc:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b47be:	42bc      	cmp	r4, r7
   b47c0:	dc1c      	bgt.n	b47fc <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b47c2:	f8db 2000 	ldr.w	r2, [fp]
   b47c6:	9303      	str	r3, [sp, #12]
    if (steep) {
   b47c8:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b47ca:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b47ce:	bfc7      	ittee	gt
   b47d0:	4629      	movgt	r1, r5
   b47d2:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b47d4:	462a      	movle	r2, r5
   b47d6:	4621      	movle	r1, r4
   b47d8:	4658      	mov	r0, fp
   b47da:	47c0      	blx	r8
    }
    err -= dy;
   b47dc:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b47de:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b47e0:	1ab6      	subs	r6, r6, r2
   b47e2:	b2b1      	uxth	r1, r6
   b47e4:	b236      	sxth	r6, r6
    if (err < 0) {
   b47e6:	2e00      	cmp	r6, #0
   b47e8:	da05      	bge.n	b47f6 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b47ea:	9a02      	ldr	r2, [sp, #8]
   b47ec:	4415      	add	r5, r2
      err += dx;
   b47ee:	9a00      	ldr	r2, [sp, #0]
   b47f0:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b47f2:	b22d      	sxth	r5, r5
      err += dx;
   b47f4:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b47f6:	3401      	adds	r4, #1
   b47f8:	b224      	sxth	r4, r4
   b47fa:	e7e0      	b.n	b47be <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b47fc:	b005      	add	sp, #20
   b47fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4802 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4802:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4806:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b480a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b480c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4810:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4814:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4816:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4818:	4616      	mov	r6, r2
   b481a:	468a      	mov	sl, r1
   b481c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b481e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4820:	6823      	ldr	r3, [r4, #0]
   b4822:	f8cd 8000 	str.w	r8, [sp]
   b4826:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b482a:	4432      	add	r2, r6
   b482c:	69df      	ldr	r7, [r3, #28]
   b482e:	4651      	mov	r1, sl
   b4830:	462b      	mov	r3, r5
   b4832:	4620      	mov	r0, r4
   b4834:	b212      	sxth	r2, r2
   b4836:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4838:	6823      	ldr	r3, [r4, #0]
   b483a:	f8cd 8000 	str.w	r8, [sp]
   b483e:	699f      	ldr	r7, [r3, #24]
   b4840:	4632      	mov	r2, r6
   b4842:	464b      	mov	r3, r9
   b4844:	4651      	mov	r1, sl
   b4846:	4620      	mov	r0, r4
   b4848:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b484a:	1e6b      	subs	r3, r5, #1
   b484c:	eb03 010a 	add.w	r1, r3, sl
   b4850:	6823      	ldr	r3, [r4, #0]
   b4852:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4856:	699d      	ldr	r5, [r3, #24]
   b4858:	4632      	mov	r2, r6
   b485a:	464b      	mov	r3, r9
   b485c:	b209      	sxth	r1, r1
   b485e:	4620      	mov	r0, r4
   b4860:	46ac      	mov	ip, r5
}
   b4862:	b002      	add	sp, #8
   b4864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4868:	4760      	bx	ip

000b486a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b486a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b486c:	3b01      	subs	r3, #1
   b486e:	4413      	add	r3, r2
   b4870:	6804      	ldr	r4, [r0, #0]
   b4872:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4876:	9501      	str	r5, [sp, #4]
   b4878:	b21b      	sxth	r3, r3
   b487a:	9300      	str	r3, [sp, #0]
   b487c:	6964      	ldr	r4, [r4, #20]
   b487e:	460b      	mov	r3, r1
   b4880:	47a0      	blx	r4
}
   b4882:	b003      	add	sp, #12
   b4884:	bd30      	pop	{r4, r5, pc}

000b4886 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4886:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4888:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b488c:	6804      	ldr	r4, [r0, #0]
   b488e:	e9cd 2500 	strd	r2, r5, [sp]
   b4892:	3b01      	subs	r3, #1
   b4894:	440b      	add	r3, r1
   b4896:	6964      	ldr	r4, [r4, #20]
   b4898:	b21b      	sxth	r3, r3
   b489a:	47a0      	blx	r4
}
   b489c:	b003      	add	sp, #12
   b489e:	bd30      	pop	{r4, r5, pc}

000b48a0 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b48a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b48a4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b48a8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b48ac:	4605      	mov	r5, r0
   b48ae:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b48b0:	460c      	mov	r4, r1
   b48b2:	18ce      	adds	r6, r1, r3
   b48b4:	42b4      	cmp	r4, r6
   b48b6:	da0b      	bge.n	b48d0 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b48b8:	682b      	ldr	r3, [r5, #0]
   b48ba:	f8cd 8000 	str.w	r8, [sp]
   b48be:	699f      	ldr	r7, [r3, #24]
   b48c0:	4621      	mov	r1, r4
   b48c2:	464b      	mov	r3, r9
   b48c4:	4652      	mov	r2, sl
   b48c6:	4628      	mov	r0, r5
   b48c8:	3401      	adds	r4, #1
   b48ca:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b48cc:	b224      	sxth	r4, r4
   b48ce:	e7f1      	b.n	b48b4 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b48d0:	b002      	add	sp, #8
   b48d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b48d6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b48d6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b48d8:	6802      	ldr	r2, [r0, #0]
   b48da:	9101      	str	r1, [sp, #4]
   b48dc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b48e0:	9100      	str	r1, [sp, #0]
   b48e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b48e4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b48e8:	2200      	movs	r2, #0
   b48ea:	4611      	mov	r1, r2
   b48ec:	47a0      	blx	r4
}
   b48ee:	b002      	add	sp, #8
   b48f0:	bd10      	pop	{r4, pc}

000b48f2 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b48f2:	4770      	bx	lr

000b48f4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b48f4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b48f6:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b48f8:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b48fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b48fe:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4900:	4d05      	ldr	r5, [pc, #20]	; (b4918 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4902:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4904:	2201      	movs	r2, #1
   b4906:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4908:	6005      	str	r5, [r0, #0]
   b490a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b490c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b490e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4910:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4912:	7682      	strb	r2, [r0, #26]
}
   b4914:	bd30      	pop	{r4, r5, pc}
   b4916:	bf00      	nop
   b4918:	000b6e58 	.word	0x000b6e58

000b491c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4920:	ed2d 8b02 	vpush	{d8}
   b4924:	b08d      	sub	sp, #52	; 0x34
   b4926:	4607      	mov	r7, r0
   b4928:	9104      	str	r1, [sp, #16]
   b492a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b492e:	9105      	str	r1, [sp, #20]
   b4930:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4934:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4936:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b493a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b493c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4940:	4281      	cmp	r1, r0
   b4942:	dd52      	ble.n	b49ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4944:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4948:	4291      	cmp	r1, r2
   b494a:	dd4e      	ble.n	b49ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b494c:	2106      	movs	r1, #6
   b494e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4952:	2c00      	cmp	r4, #0
   b4954:	dd49      	ble.n	b49ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4956:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b495a:	2c00      	cmp	r4, #0
   b495c:	dd45      	ble.n	b49ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b495e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4962:	930b      	str	r3, [sp, #44]	; 0x2c
   b4964:	b293      	uxth	r3, r2
   b4966:	9307      	str	r3, [sp, #28]
   b4968:	3308      	adds	r3, #8
   b496a:	b29b      	uxth	r3, r3
   b496c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b496e:	2400      	movs	r4, #0
   b4970:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4972:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4974:	bf1c      	itt	ne
   b4976:	4b2c      	ldrne	r3, [pc, #176]	; (b4a28 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4978:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b497a:	9e07      	ldr	r6, [sp, #28]
   b497c:	bf16      	itet	ne
   b497e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4980:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4982:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4984:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4986:	9a04      	ldr	r2, [sp, #16]
   b4988:	b2ab      	uxth	r3, r5
   b498a:	930a      	str	r3, [sp, #40]	; 0x28
   b498c:	fb04 f305 	mul.w	r3, r4, r5
   b4990:	fa13 f382 	uxtah	r3, r3, r2
   b4994:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4996:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b499a:	ee08 3a10 	vmov	s16, r3
   b499e:	46b0      	mov	r8, r6
   b49a0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b49a4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b49a8:	9b03      	ldr	r3, [sp, #12]
   b49aa:	07db      	lsls	r3, r3, #31
   b49ac:	d52f      	bpl.n	b4a0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b49ae:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b49b0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b49b2:	d11f      	bne.n	b49f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b49b4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b49b8:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b49ba:	b232      	sxth	r2, r6
   b49bc:	4651      	mov	r1, sl
   b49be:	4638      	mov	r0, r7
   b49c0:	47d8      	blx	fp
      line >>= 1;
   b49c2:	9b03      	ldr	r3, [sp, #12]
   b49c4:	085b      	lsrs	r3, r3, #1
   b49c6:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b49c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b49ca:	3601      	adds	r6, #1
   b49cc:	4498      	add	r8, r3
   b49ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b49d0:	b2b6      	uxth	r6, r6
   b49d2:	42b3      	cmp	r3, r6
   b49d4:	fa1f f888 	uxth.w	r8, r8
   b49d8:	d1e6      	bne.n	b49a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b49da:	9b08      	ldr	r3, [sp, #32]
   b49dc:	3b01      	subs	r3, #1
   b49de:	3401      	adds	r4, #1
   b49e0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b49e4:	b264      	sxtb	r4, r4
   b49e6:	9308      	str	r3, [sp, #32]
   b49e8:	d1c3      	bne.n	b4972 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b49ea:	b00d      	add	sp, #52	; 0x34
   b49ec:	ecbd 8b02 	vpop	{d8}
   b49f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b49f4:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b49f6:	e9cd 9200 	strd	r9, r2, [sp]
   b49fa:	ee18 1a10 	vmov	r1, s16
   b49fe:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4a02:	fa0f f288 	sxth.w	r2, r8
   b4a06:	464b      	mov	r3, r9
   b4a08:	4638      	mov	r0, r7
   b4a0a:	47d8      	blx	fp
   b4a0c:	e7d9      	b.n	b49c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4a0e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4a12:	4293      	cmp	r3, r2
   b4a14:	d0d5      	beq.n	b49c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4a16:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4a18:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4a1a:	d103      	bne.n	b4a24 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4a1c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4a20:	9b06      	ldr	r3, [sp, #24]
   b4a22:	e7ca      	b.n	b49ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4a24:	9a06      	ldr	r2, [sp, #24]
   b4a26:	e7e6      	b.n	b49f6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4a28:	000b6955 	.word	0x000b6955

000b4a2c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4a2c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4a2e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4a30:	b085      	sub	sp, #20
   b4a32:	4604      	mov	r4, r0
  if (c == '\n') {
   b4a34:	d107      	bne.n	b4a46 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4a36:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4a38:	8a63      	ldrh	r3, [r4, #18]
   b4a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4a3e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4a40:	2300      	movs	r3, #0
   b4a42:	8223      	strh	r3, [r4, #16]
   b4a44:	e021      	b.n	b4a8a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4a46:	290d      	cmp	r1, #13
   b4a48:	d01f      	beq.n	b4a8a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4a4a:	7e03      	ldrb	r3, [r0, #24]
   b4a4c:	9302      	str	r3, [sp, #8]
   b4a4e:	8ac3      	ldrh	r3, [r0, #22]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	8a83      	ldrh	r3, [r0, #20]
   b4a54:	9300      	str	r3, [sp, #0]
   b4a56:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4a5a:	460b      	mov	r3, r1
   b4a5c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4a60:	f7ff ff5c 	bl	b491c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4a64:	7e20      	ldrb	r0, [r4, #24]
   b4a66:	8a23      	ldrh	r3, [r4, #16]
   b4a68:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4a6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4a70:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4a72:	b21b      	sxth	r3, r3
   b4a74:	4602      	mov	r2, r0
   b4a76:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4a78:	b139      	cbz	r1, b4a8a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4a7a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4a7e:	f06f 0505 	mvn.w	r5, #5
   b4a82:	fb05 1100 	mla	r1, r5, r0, r1
   b4a86:	428b      	cmp	r3, r1
   b4a88:	dcd6      	bgt.n	b4a38 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4a8a:	2001      	movs	r0, #1
   b4a8c:	b005      	add	sp, #20
   b4a8e:	bd30      	pop	{r4, r5, pc}

000b4a90 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4a90:	7e40      	ldrb	r0, [r0, #25]
   b4a92:	4770      	bx	lr

000b4a94 <_ZN12Adafruit_GFX5widthEv>:
}
   b4a94:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4a98:	4770      	bx	lr

000b4a9a <_ZN12Adafruit_GFX6heightEv>:
}
   b4a9a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4a9e:	4770      	bx	lr

000b4aa0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4aa2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4aa4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4aa8:	2d02      	cmp	r5, #2
   b4aaa:	d069      	beq.n	b4b80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4aac:	2d03      	cmp	r5, #3
   b4aae:	f000 8099 	beq.w	b4be4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4ab2:	2d01      	cmp	r5, #1
   b4ab4:	d16c      	bne.n	b4b90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4ab6:	8905      	ldrh	r5, [r0, #8]
   b4ab8:	43d2      	mvns	r2, r2
   b4aba:	442a      	add	r2, r5
   b4abc:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4abe:	2a00      	cmp	r2, #0
   b4ac0:	db5d      	blt.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4ac2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4ac6:	4295      	cmp	r5, r2
   b4ac8:	dd59      	ble.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4aca:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4acc:	bfbe      	ittt	lt
   b4ace:	185b      	addlt	r3, r3, r1
   b4ad0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4ad2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4ad4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4ad8:	18cd      	adds	r5, r1, r3
   b4ada:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4adc:	bfc4      	itt	gt
   b4ade:	1a43      	subgt	r3, r0, r1
   b4ae0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4ae2:	2b00      	cmp	r3, #0
   b4ae4:	dd4b      	ble.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4ae6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4aea:	f8df c120 	ldr.w	ip, [pc, #288]	; b4c0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4aee:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4af2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4af6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4af8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4afc:	d01a      	beq.n	b4b34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4afe:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4b02:	4e40      	ldr	r6, [pc, #256]	; (b4c04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4b04:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4b06:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4b08:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4b0a:	bf3f      	itttt	cc
   b4b0c:	eba5 0e03 	subcc.w	lr, r5, r3
   b4b10:	26ff      	movcc	r6, #255	; 0xff
   b4b12:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4b16:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4b18:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4b1c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4b1e:	bf0c      	ite	eq
   b4b20:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4b22:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4b24:	42ab      	cmp	r3, r5
   b4b26:	f80c 6002 	strb.w	r6, [ip, r2]
   b4b2a:	d328      	bcc.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4b2c:	3908      	subs	r1, #8
   b4b2e:	440b      	add	r3, r1
   b4b30:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4b32:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4b34:	2b07      	cmp	r3, #7
   b4b36:	d919      	bls.n	b4b6c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4b38:	2c01      	cmp	r4, #1
   b4b3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4b3e:	bf18      	it	ne
   b4b40:	2500      	movne	r5, #0
   b4b42:	b2ed      	uxtb	r5, r5
   b4b44:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4b48:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4b4a:	3a08      	subs	r2, #8
   b4b4c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4b4e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4b50:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4b54:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4b58:	d8f7      	bhi.n	b4b4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4b5a:	f1a3 0208 	sub.w	r2, r3, #8
   b4b5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4b62:	3201      	adds	r2, #1
   b4b64:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4b68:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4b6c:	b13b      	cbz	r3, b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4b6e:	4a26      	ldr	r2, [pc, #152]	; (b4c08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4b70:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4b72:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4b74:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4b76:	bf0c      	ite	eq
   b4b78:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4b7a:	4393      	bicne	r3, r2
   b4b7c:	7003      	strb	r3, [r0, #0]
}
   b4b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4b80:	8945      	ldrh	r5, [r0, #10]
   b4b82:	43d2      	mvns	r2, r2
   b4b84:	442a      	add	r2, r5
      x -= (w-1);
   b4b86:	18cd      	adds	r5, r1, r3
   b4b88:	8901      	ldrh	r1, [r0, #8]
   b4b8a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4b8c:	b212      	sxth	r2, r2
      x -= (w-1);
   b4b8e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4b90:	2a00      	cmp	r2, #0
   b4b92:	dbf4      	blt.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4b94:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4b98:	4295      	cmp	r5, r2
   b4b9a:	ddf0      	ble.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4b9c:	2900      	cmp	r1, #0
    w += x;
   b4b9e:	bfbe      	ittt	lt
   b4ba0:	185b      	addlt	r3, r3, r1
   b4ba2:	b21b      	sxthlt	r3, r3
    x = 0;
   b4ba4:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4ba6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4baa:	18ce      	adds	r6, r1, r3
   b4bac:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4bae:	bfc4      	itt	gt
   b4bb0:	1a6b      	subgt	r3, r5, r1
   b4bb2:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4bb4:	2b00      	cmp	r3, #0
   b4bb6:	dde2      	ble.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4bb8:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4bba:	2580      	movs	r5, #128	; 0x80
   b4bbc:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4bc0:	4812      	ldr	r0, [pc, #72]	; (b4c0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4bc2:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4bc4:	f002 0007 	and.w	r0, r2, #7
   b4bc8:	2201      	movs	r2, #1
   b4bca:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4bcc:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4bce:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4bd0:	440b      	add	r3, r1
   b4bd2:	d10c      	bne.n	b4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4bd4:	428b      	cmp	r3, r1
   b4bd6:	d0d2      	beq.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4bd8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4bdc:	4310      	orrs	r0, r2
   b4bde:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4be2:	e7f7      	b.n	b4bd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4be4:	18cd      	adds	r5, r1, r3
   b4be6:	8941      	ldrh	r1, [r0, #10]
   b4be8:	1b49      	subs	r1, r1, r5
   b4bea:	b209      	sxth	r1, r1
      break;
   b4bec:	e767      	b.n	b4abe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4bee:	43d2      	mvns	r2, r2
   b4bf0:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4bf2:	428b      	cmp	r3, r1
   b4bf4:	d0c3      	beq.n	b4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4bf6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4bfa:	4010      	ands	r0, r2
   b4bfc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4c00:	e7f7      	b.n	b4bf2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4c02:	bf00      	nop
   b4c04:	2003e098 	.word	0x2003e098
   b4c08:	2003e090 	.word	0x2003e090
   b4c0c:	2003e0a0 	.word	0x2003e0a0

000b4c10 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4c12:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4c14:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4c18:	2d02      	cmp	r5, #2
   b4c1a:	d034      	beq.n	b4c86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4c1c:	2d03      	cmp	r5, #3
   b4c1e:	f000 809b 	beq.w	b4d58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4c22:	2d01      	cmp	r5, #1
   b4c24:	d137      	bne.n	b4c96 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4c26:	18d5      	adds	r5, r2, r3
   b4c28:	8902      	ldrh	r2, [r0, #8]
   b4c2a:	1b52      	subs	r2, r2, r5
   b4c2c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4c2e:	2900      	cmp	r1, #0
   b4c30:	f2c0 8091 	blt.w	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4c34:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4c38:	428d      	cmp	r5, r1
   b4c3a:	f340 808c 	ble.w	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4c3e:	2a00      	cmp	r2, #0
    w += x;
   b4c40:	bfbe      	ittt	lt
   b4c42:	189b      	addlt	r3, r3, r2
   b4c44:	b21b      	sxthlt	r3, r3
    x = 0;
   b4c46:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4c48:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4c4c:	18d6      	adds	r6, r2, r3
   b4c4e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4c50:	bfc4      	itt	gt
   b4c52:	1aab      	subgt	r3, r5, r2
   b4c54:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4c56:	2b00      	cmp	r3, #0
   b4c58:	dd7d      	ble.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4c5a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4c5c:	2580      	movs	r5, #128	; 0x80
   b4c5e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4c62:	4845      	ldr	r0, [pc, #276]	; (b4d78 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4c64:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4c66:	f001 0007 	and.w	r0, r1, #7
   b4c6a:	2101      	movs	r1, #1
   b4c6c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4c6e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4c70:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4c72:	4413      	add	r3, r2
   b4c74:	d175      	bne.n	b4d62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4c76:	429a      	cmp	r2, r3
   b4c78:	d06d      	beq.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4c7a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4c7e:	4308      	orrs	r0, r1
   b4c80:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4c84:	e7f7      	b.n	b4c76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4c86:	8905      	ldrh	r5, [r0, #8]
   b4c88:	43c9      	mvns	r1, r1
   b4c8a:	4429      	add	r1, r5
      y -= (h-1);
   b4c8c:	18d5      	adds	r5, r2, r3
   b4c8e:	8942      	ldrh	r2, [r0, #10]
   b4c90:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4c92:	b209      	sxth	r1, r1
      y -= (h-1);
   b4c94:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4c96:	2900      	cmp	r1, #0
   b4c98:	db5d      	blt.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4c9a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4c9e:	428d      	cmp	r5, r1
   b4ca0:	dd59      	ble.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4ca2:	2a00      	cmp	r2, #0
    __h += __y;
   b4ca4:	bfbe      	ittt	lt
   b4ca6:	189b      	addlt	r3, r3, r2
   b4ca8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4caa:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4cac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4cb0:	18d5      	adds	r5, r2, r3
   b4cb2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4cb4:	bfc4      	itt	gt
   b4cb6:	1a83      	subgt	r3, r0, r2
   b4cb8:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4cba:	2b00      	cmp	r3, #0
   b4cbc:	dd4b      	ble.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4cbe:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4cc2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4d78 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4cc6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4cca:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4cce:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4cd0:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4cd4:	d01a      	beq.n	b4d0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4cd6:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4cda:	4e28      	ldr	r6, [pc, #160]	; (b4d7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4cdc:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4cde:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4ce0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4ce2:	bf3f      	itttt	cc
   b4ce4:	eba5 0e03 	subcc.w	lr, r5, r3
   b4ce8:	26ff      	movcc	r6, #255	; 0xff
   b4cea:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4cee:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4cf0:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4cf4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4cf6:	bf0c      	ite	eq
   b4cf8:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4cfa:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4cfc:	42ab      	cmp	r3, r5
   b4cfe:	f80c 6001 	strb.w	r6, [ip, r1]
   b4d02:	d328      	bcc.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4d04:	3a08      	subs	r2, #8
   b4d06:	4413      	add	r3, r2
   b4d08:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4d0a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4d0c:	2b07      	cmp	r3, #7
   b4d0e:	d919      	bls.n	b4d44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4d10:	2c01      	cmp	r4, #1
   b4d12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4d16:	bf18      	it	ne
   b4d18:	2500      	movne	r5, #0
   b4d1a:	b2ed      	uxtb	r5, r5
   b4d1c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4d20:	461a      	mov	r2, r3
      h -= 8;
   b4d22:	3a08      	subs	r2, #8
   b4d24:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4d26:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4d28:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4d2c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4d30:	d8f7      	bhi.n	b4d22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4d32:	f1a3 0208 	sub.w	r2, r3, #8
   b4d36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4d3a:	3201      	adds	r2, #1
   b4d3c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4d40:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4d44:	b13b      	cbz	r3, b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4d46:	4a0e      	ldr	r2, [pc, #56]	; (b4d80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4d48:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4d4a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4d4c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4d4e:	bf0c      	ite	eq
   b4d50:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4d52:	4393      	bicne	r3, r2
   b4d54:	7003      	strb	r3, [r0, #0]
}
   b4d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4d58:	8945      	ldrh	r5, [r0, #10]
   b4d5a:	43c9      	mvns	r1, r1
   b4d5c:	4429      	add	r1, r5
   b4d5e:	b209      	sxth	r1, r1
      break;
   b4d60:	e765      	b.n	b4c2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4d62:	43c9      	mvns	r1, r1
   b4d64:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4d66:	429a      	cmp	r2, r3
   b4d68:	d0f5      	beq.n	b4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d6a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4d6e:	4008      	ands	r0, r1
   b4d70:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4d74:	e7f7      	b.n	b4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4d76:	bf00      	nop
   b4d78:	2003e0a0 	.word	0x2003e0a0
   b4d7c:	2003e098 	.word	0x2003e098
   b4d80:	2003e090 	.word	0x2003e090

000b4d84 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4d84:	4770      	bx	lr
	...

000b4d88 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4d8a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4d8c:	4606      	mov	r6, r0
   b4d8e:	4614      	mov	r4, r2
   b4d90:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4d92:	db2d      	blt.n	b4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4d94:	f7ff fe7e 	bl	b4a94 <_ZN12Adafruit_GFX5widthEv>
   b4d98:	42a8      	cmp	r0, r5
   b4d9a:	dd29      	ble.n	b4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4d9c:	2c00      	cmp	r4, #0
   b4d9e:	db27      	blt.n	b4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4da0:	4630      	mov	r0, r6
   b4da2:	f7ff fe7a 	bl	b4a9a <_ZN12Adafruit_GFX6heightEv>
   b4da6:	42a0      	cmp	r0, r4
   b4da8:	dd22      	ble.n	b4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4daa:	4630      	mov	r0, r6
   b4dac:	f7ff fe70 	bl	b4a90 <_ZN12Adafruit_GFX11getRotationEv>
   b4db0:	2802      	cmp	r0, #2
   b4db2:	d01e      	beq.n	b4df2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4db4:	2803      	cmp	r0, #3
   b4db6:	d025      	beq.n	b4e04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4db8:	2801      	cmp	r0, #1
   b4dba:	d104      	bne.n	b4dc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4dbc:	8933      	ldrh	r3, [r6, #8]
   b4dbe:	43e2      	mvns	r2, r4
   b4dc0:	441a      	add	r2, r3
    break;
   b4dc2:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4dc4:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4dc6:	2c00      	cmp	r4, #0
   b4dc8:	4622      	mov	r2, r4
   b4dca:	bfb8      	it	lt
   b4dcc:	1de2      	addlt	r2, r4, #7
   b4dce:	10d2      	asrs	r2, r2, #3
   b4dd0:	2180      	movs	r1, #128	; 0x80
   b4dd2:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4dd6:	490e      	ldr	r1, [pc, #56]	; (b4e10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4dd8:	2201      	movs	r2, #1
   b4dda:	f004 0407 	and.w	r4, r4, #7
   b4dde:	574b      	ldrsb	r3, [r1, r5]
   b4de0:	fa02 f404 	lsl.w	r4, r2, r4
   b4de4:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4de6:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4de8:	bf0c      	ite	eq
   b4dea:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4dec:	43a3      	bicne	r3, r4
   b4dee:	554b      	strb	r3, [r1, r5]
}
   b4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4df2:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4df4:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4df6:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4df8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4dfa:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4dfc:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4dfe:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4e00:	b224      	sxth	r4, r4
    break;
   b4e02:	e7e0      	b.n	b4dc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4e04:	8973      	ldrh	r3, [r6, #10]
   b4e06:	3b01      	subs	r3, #1
   b4e08:	1b5b      	subs	r3, r3, r5
    break;
   b4e0a:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4e0c:	b21c      	sxth	r4, r3
    break;
   b4e0e:	e7da      	b.n	b4dc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4e10:	2003e0a0 	.word	0x2003e0a0

000b4e14 <_ZN16Adafruit_SSD1306D0Ev>:
   b4e14:	b510      	push	{r4, lr}
   b4e16:	2124      	movs	r1, #36	; 0x24
   b4e18:	4604      	mov	r4, r0
   b4e1a:	f7ff f93e 	bl	b409a <_ZdlPvj>
   b4e1e:	4620      	mov	r0, r4
   b4e20:	bd10      	pop	{r4, pc}
	...

000b4e24 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4e24:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4e26:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4e28:	4604      	mov	r4, r0
   b4e2a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4e2c:	2180      	movs	r1, #128	; 0x80
   b4e2e:	f7ff fd61 	bl	b48f4 <_ZN12Adafruit_GFXC1Ess>
   b4e32:	4b06      	ldr	r3, [pc, #24]	; (b4e4c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4e34:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4e36:	23ff      	movs	r3, #255	; 0xff
   b4e38:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4e3c:	7763      	strb	r3, [r4, #29]
   b4e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4e42:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4e44:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4e48:	4620      	mov	r0, r4
   b4e4a:	bd38      	pop	{r3, r4, r5, pc}
   b4e4c:	000b6e90 	.word	0x000b6e90

000b4e50 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <os_mutex_recursive_create+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	00030248 	.word	0x00030248

000b4e60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <HAL_RNG_GetRandomNumber+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	685b      	ldr	r3, [r3, #4]
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	00030218 	.word	0x00030218

000b4e70 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <HAL_Delay_Microseconds+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	68db      	ldr	r3, [r3, #12]
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	00030218 	.word	0x00030218

000b4e80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	695b      	ldr	r3, [r3, #20]
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	00030218 	.word	0x00030218

000b4e90 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <HAL_Pin_Map+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	681b      	ldr	r3, [r3, #0]
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	0003022c 	.word	0x0003022c

000b4ea0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <HAL_Pin_Mode+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	689b      	ldr	r3, [r3, #8]
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	0003022c 	.word	0x0003022c

000b4eb0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <HAL_Get_Pin_Mode+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	68db      	ldr	r3, [r3, #12]
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	0003022c 	.word	0x0003022c

000b4ec0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <HAL_GPIO_Write+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	691b      	ldr	r3, [r3, #16]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	0003022c 	.word	0x0003022c

000b4ed0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <HAL_Interrupts_Attach+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	699b      	ldr	r3, [r3, #24]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	0003022c 	.word	0x0003022c

000b4ee0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <HAL_Interrupts_Detach+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	69db      	ldr	r3, [r3, #28]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	0003022c 	.word	0x0003022c

000b4ef0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <HAL_Interrupts_Enable_All+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	6a1b      	ldr	r3, [r3, #32]
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	0003022c 	.word	0x0003022c

000b4f00 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <HAL_Interrupts_Disable_All+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	0003022c 	.word	0x0003022c

000b4f10 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <hal_i2c_write+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	6a1b      	ldr	r3, [r3, #32]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030228 	.word	0x00030228

000b4f20 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <hal_i2c_available+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030228 	.word	0x00030228

000b4f30 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <hal_i2c_read+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030228 	.word	0x00030228

000b4f40 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <hal_i2c_peek+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030228 	.word	0x00030228

000b4f50 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <hal_i2c_flush+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030228 	.word	0x00030228

000b4f60 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <hal_i2c_is_enabled+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	00030228 	.word	0x00030228

000b4f70 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <hal_i2c_init+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	00030228 	.word	0x00030228

000b4f80 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <if_index_to_name+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	695b      	ldr	r3, [r3, #20]
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	0003026c 	.word	0x0003026c

000b4f90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <inet_inet_ntop+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	695b      	ldr	r3, [r3, #20]
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	00030264 	.word	0x00030264

000b4fa0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <inet_htonl+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	6a1b      	ldr	r3, [r3, #32]
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	00030264 	.word	0x00030264

000b4fb0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <inet_htons+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030264 	.word	0x00030264

000b4fc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <netdb_freeaddrinfo+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	689b      	ldr	r3, [r3, #8]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030268 	.word	0x00030268

000b4fd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <netdb_getaddrinfo+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	68db      	ldr	r3, [r3, #12]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	00030268 	.word	0x00030268

000b4fe0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <sock_setsockopt+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	699b      	ldr	r3, [r3, #24]
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	00030238 	.word	0x00030238

000b4ff0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <sock_close+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	69db      	ldr	r3, [r3, #28]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	00030238 	.word	0x00030238

000b5000 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <sock_connect+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	6a1b      	ldr	r3, [r3, #32]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	00030238 	.word	0x00030238

000b5010 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <sock_recv+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	00030238 	.word	0x00030238

000b5020 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <sock_send+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030238 	.word	0x00030238

000b5030 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <sock_socket+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030238 	.word	0x00030238

000b5040 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <hal_spi_init+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	69db      	ldr	r3, [r3, #28]
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	00030230 	.word	0x00030230

000b5050 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <hal_spi_is_enabled+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	6a1b      	ldr	r3, [r3, #32]
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	00030230 	.word	0x00030230

000b5060 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <hal_usart_write+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	68db      	ldr	r3, [r3, #12]
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	0003023c 	.word	0x0003023c

000b5070 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <hal_usart_available+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	691b      	ldr	r3, [r3, #16]
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	0003023c 	.word	0x0003023c

000b5080 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <hal_usart_read+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	695b      	ldr	r3, [r3, #20]
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	0003023c 	.word	0x0003023c

000b5090 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <hal_usart_peek+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	699b      	ldr	r3, [r3, #24]
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	0003023c 	.word	0x0003023c

000b50a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <hal_usart_flush+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	69db      	ldr	r3, [r3, #28]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	0003023c 	.word	0x0003023c

000b50b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <hal_usart_is_enabled+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	6a1b      	ldr	r3, [r3, #32]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	0003023c 	.word	0x0003023c

000b50c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <hal_usart_available_data_for_write+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	0003023c 	.word	0x0003023c

000b50d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <hal_usart_init_ex+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	0003023c 	.word	0x0003023c

000b50e0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <HAL_USB_USART_Init+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	681b      	ldr	r3, [r3, #0]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	0003024c 	.word	0x0003024c

000b50f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <HAL_USB_USART_Begin+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	685b      	ldr	r3, [r3, #4]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003024c 	.word	0x0003024c

000b5100 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <HAL_USB_USART_Available_Data+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	691b      	ldr	r3, [r3, #16]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003024c 	.word	0x0003024c

000b5110 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	695b      	ldr	r3, [r3, #20]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003024c 	.word	0x0003024c

000b5120 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <HAL_USB_USART_Receive_Data+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	699b      	ldr	r3, [r3, #24]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003024c 	.word	0x0003024c

000b5130 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <HAL_USB_USART_Send_Data+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	69db      	ldr	r3, [r3, #28]
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	0003024c 	.word	0x0003024c

000b5140 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <HAL_USB_USART_Flush_Data+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6a1b      	ldr	r3, [r3, #32]
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	0003024c 	.word	0x0003024c

000b5150 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <panic_+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030260 	.word	0x00030260

000b5160 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <log_message+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030260 	.word	0x00030260

000b5170 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <set_system_mode+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	685b      	ldr	r3, [r3, #4]
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	00030220 	.word	0x00030220

000b5180 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b03      	ldr	r3, [pc, #12]	; (b5190 <system_ctrl_set_app_request_handler+0x10>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b518a:	9301      	str	r3, [sp, #4]
   b518c:	bd08      	pop	{r3, pc}
   b518e:	0000      	.short	0x0000
   b5190:	00030220 	.word	0x00030220

000b5194 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b03      	ldr	r3, [pc, #12]	; (b51a4 <system_ctrl_set_result+0x10>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b519e:	9301      	str	r3, [sp, #4]
   b51a0:	bd08      	pop	{r3, pc}
   b51a2:	0000      	.short	0x0000
   b51a4:	00030220 	.word	0x00030220

000b51a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030244 	.word	0x00030244

000b51b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <network_connect+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	685b      	ldr	r3, [r3, #4]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030240 	.word	0x00030240

000b51c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <network_connecting+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	689b      	ldr	r3, [r3, #8]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030240 	.word	0x00030240

000b51d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <network_disconnect+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	68db      	ldr	r3, [r3, #12]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030240 	.word	0x00030240

000b51e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <network_ready+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	691b      	ldr	r3, [r3, #16]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	00030240 	.word	0x00030240

000b51f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <network_on+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	695b      	ldr	r3, [r3, #20]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030240 	.word	0x00030240

000b5208 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <network_off+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	699b      	ldr	r3, [r3, #24]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030240 	.word	0x00030240

000b5218 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <network_listen+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	69db      	ldr	r3, [r3, #28]
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030240 	.word	0x00030240

000b5228 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <network_listening+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6a1b      	ldr	r3, [r3, #32]
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	00030240 	.word	0x00030240

000b5238 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <network_set_listen_timeout+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030240 	.word	0x00030240

000b5248 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <network_get_listen_timeout+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030240 	.word	0x00030240

000b5258 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <network_is_on+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030240 	.word	0x00030240

000b5268 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <network_is_off+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030240 	.word	0x00030240

000b5278 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <malloc+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	681b      	ldr	r3, [r3, #0]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	0003021c 	.word	0x0003021c

000b5288 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <free+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	685b      	ldr	r3, [r3, #4]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003021c 	.word	0x0003021c

000b5298 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <realloc+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	689b      	ldr	r3, [r3, #8]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003021c 	.word	0x0003021c

000b52a8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <vsnprintf+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	0003021c 	.word	0x0003021c

000b52b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <abort+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	0003021c 	.word	0x0003021c

000b52c8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <__errno+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	0003021c 	.word	0x0003021c

000b52d8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <__assert_func+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	0003021c 	.word	0x0003021c

000b52e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <newlib_impure_ptr_callback+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	0003021c 	.word	0x0003021c

000b52f8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b52f8:	428a      	cmp	r2, r1
{
   b52fa:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b52fc:	d007      	beq.n	b530e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b52fe:	1a44      	subs	r4, r0, r1
   b5300:	9802      	ldr	r0, [sp, #8]
   b5302:	1ac0      	subs	r0, r0, r3
   b5304:	4344      	muls	r4, r0
   b5306:	1a50      	subs	r0, r2, r1
   b5308:	fb94 f0f0 	sdiv	r0, r4, r0
   b530c:	4418      	add	r0, r3
}
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5310:	b510      	push	{r4, lr}
      if (_M_manager)
   b5312:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5314:	4604      	mov	r4, r0
      if (_M_manager)
   b5316:	b113      	cbz	r3, b531e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5318:	2203      	movs	r2, #3
   b531a:	4601      	mov	r1, r0
   b531c:	4798      	blx	r3
    }
   b531e:	4620      	mov	r0, r4
   b5320:	bd10      	pop	{r4, pc}
	...

000b5324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5324:	4802      	ldr	r0, [pc, #8]	; (b5330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5326:	2300      	movs	r3, #0
   b5328:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b532a:	f7ff bd91 	b.w	b4e50 <os_mutex_recursive_create>
   b532e:	bf00      	nop
   b5330:	2003e634 	.word	0x2003e634

000b5334 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5334:	2200      	movs	r2, #0
   b5336:	6840      	ldr	r0, [r0, #4]
   b5338:	4611      	mov	r1, r2
   b533a:	f7ff bf75 	b.w	b5228 <network_listening>

000b533e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b533e:	2200      	movs	r2, #0
   b5340:	6840      	ldr	r0, [r0, #4]
   b5342:	4611      	mov	r1, r2
   b5344:	f7ff bf80 	b.w	b5248 <network_get_listen_timeout>

000b5348 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5348:	6840      	ldr	r0, [r0, #4]
   b534a:	2200      	movs	r2, #0
   b534c:	f7ff bf74 	b.w	b5238 <network_set_listen_timeout>

000b5350 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5350:	6840      	ldr	r0, [r0, #4]
   b5352:	2200      	movs	r2, #0
   b5354:	f081 0101 	eor.w	r1, r1, #1
   b5358:	f7ff bf5e 	b.w	b5218 <network_listen>

000b535c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b535c:	2300      	movs	r3, #0
   b535e:	6840      	ldr	r0, [r0, #4]
   b5360:	461a      	mov	r2, r3
   b5362:	4619      	mov	r1, r3
   b5364:	f7ff bf50 	b.w	b5208 <network_off>

000b5368 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5368:	2300      	movs	r3, #0
   b536a:	6840      	ldr	r0, [r0, #4]
   b536c:	461a      	mov	r2, r3
   b536e:	4619      	mov	r1, r3
   b5370:	f7ff bf42 	b.w	b51f8 <network_on>

000b5374 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5374:	2200      	movs	r2, #0
   b5376:	6840      	ldr	r0, [r0, #4]
   b5378:	4611      	mov	r1, r2
   b537a:	f7ff bf35 	b.w	b51e8 <network_ready>

000b537e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b537e:	2200      	movs	r2, #0
   b5380:	6840      	ldr	r0, [r0, #4]
   b5382:	4611      	mov	r1, r2
   b5384:	f7ff bf20 	b.w	b51c8 <network_connecting>

000b5388 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5388:	6840      	ldr	r0, [r0, #4]
   b538a:	2200      	movs	r2, #0
   b538c:	2102      	movs	r1, #2
   b538e:	f7ff bf23 	b.w	b51d8 <network_disconnect>

000b5392 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5392:	2300      	movs	r3, #0
   b5394:	6840      	ldr	r0, [r0, #4]
   b5396:	461a      	mov	r2, r3
   b5398:	f7ff bf0e 	b.w	b51b8 <network_connect>

000b539c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b539c:	4b02      	ldr	r3, [pc, #8]	; (b53a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b539e:	2203      	movs	r2, #3
   b53a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b53a2:	4a02      	ldr	r2, [pc, #8]	; (b53ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b53a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b53a6:	4770      	bx	lr
   b53a8:	2003e638 	.word	0x2003e638
   b53ac:	000b6ed0 	.word	0x000b6ed0

000b53b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b53b0:	4770      	bx	lr

000b53b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b53b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53b4:	4606      	mov	r6, r0
   b53b6:	4615      	mov	r5, r2
   b53b8:	460c      	mov	r4, r1
   b53ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b53bc:	42bc      	cmp	r4, r7
   b53be:	d006      	beq.n	b53ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b53c0:	6833      	ldr	r3, [r6, #0]
   b53c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b53c6:	689b      	ldr	r3, [r3, #8]
   b53c8:	4630      	mov	r0, r6
   b53ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b53cc:	e7f6      	b.n	b53bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b53ce:	4628      	mov	r0, r5
   b53d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b53d2:	7c00      	ldrb	r0, [r0, #16]
   b53d4:	2200      	movs	r2, #0
   b53d6:	f7ff bd9b 	b.w	b4f10 <hal_i2c_write>

000b53da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b53da:	7c00      	ldrb	r0, [r0, #16]
   b53dc:	2100      	movs	r1, #0
   b53de:	f7ff bd9f 	b.w	b4f20 <hal_i2c_available>

000b53e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b53e2:	7c00      	ldrb	r0, [r0, #16]
   b53e4:	2100      	movs	r1, #0
   b53e6:	f7ff bda3 	b.w	b4f30 <hal_i2c_read>

000b53ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b53ea:	7c00      	ldrb	r0, [r0, #16]
   b53ec:	2100      	movs	r1, #0
   b53ee:	f7ff bda7 	b.w	b4f40 <hal_i2c_peek>

000b53f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b53f2:	7c00      	ldrb	r0, [r0, #16]
   b53f4:	2100      	movs	r1, #0
   b53f6:	f7ff bdab 	b.w	b4f50 <hal_i2c_flush>

000b53fa <_ZN7TwoWireD0Ev>:
   b53fa:	b510      	push	{r4, lr}
   b53fc:	2114      	movs	r1, #20
   b53fe:	4604      	mov	r4, r0
   b5400:	f7fe fe4b 	bl	b409a <_ZdlPvj>
   b5404:	4620      	mov	r0, r4
   b5406:	bd10      	pop	{r4, pc}

000b5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5408:	b538      	push	{r3, r4, r5, lr}
   b540a:	4604      	mov	r4, r0
   b540c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b540e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5412:	2200      	movs	r2, #0
   b5414:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5418:	4b09      	ldr	r3, [pc, #36]	; (b5440 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b541a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b541c:	4608      	mov	r0, r1
   b541e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5420:	4629      	mov	r1, r5
   b5422:	f7ff fda5 	bl	b4f70 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5426:	30bf      	adds	r0, #191	; 0xbf
   b5428:	d108      	bne.n	b543c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b542a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b542c:	07db      	lsls	r3, r3, #31
   b542e:	d505      	bpl.n	b543c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5430:	6868      	ldr	r0, [r5, #4]
   b5432:	f7ff ff29 	bl	b5288 <free>
    free(conf.tx_buffer);
   b5436:	68e8      	ldr	r0, [r5, #12]
   b5438:	f7ff ff26 	bl	b5288 <free>
}
   b543c:	4620      	mov	r0, r4
   b543e:	bd38      	pop	{r3, r4, r5, pc}
   b5440:	000b6f0c 	.word	0x000b6f0c

000b5444 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5444:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b5446:	b510      	push	{r4, lr}
   b5448:	b90a      	cbnz	r2, b544e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b544a:	f001 f817 	bl	b647c <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5452:	68c3      	ldr	r3, [r0, #12]
   b5454:	4718      	bx	r3
	...

000b5458 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b5458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b545a:	4f10      	ldr	r7, [pc, #64]	; (b549c <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b545c:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b5460:	4606      	mov	r6, r0
   b5462:	460d      	mov	r5, r1
    delete handlers[pin];
   b5464:	b134      	cbz	r4, b5474 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b5466:	4620      	mov	r0, r4
   b5468:	f7ff ff52 	bl	b5310 <_ZNSt14_Function_baseD1Ev>
   b546c:	2110      	movs	r1, #16
   b546e:	4620      	mov	r0, r4
   b5470:	f7fe fe13 	bl	b409a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b5474:	2010      	movs	r0, #16
   b5476:	f7fe fe0c 	bl	b4092 <_Znwj>
   b547a:	4604      	mov	r4, r0
   b547c:	b150      	cbz	r0, b5494 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b547e:	2300      	movs	r3, #0
   b5480:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5482:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b5484:	b133      	cbz	r3, b5494 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5486:	2202      	movs	r2, #2
   b5488:	4629      	mov	r1, r5
   b548a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b548c:	68eb      	ldr	r3, [r5, #12]
   b548e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5490:	68ab      	ldr	r3, [r5, #8]
   b5492:	60a3      	str	r3, [r4, #8]
   b5494:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b5498:	4620      	mov	r0, r4
   b549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b549c:	2003e640 	.word	0x2003e640

000b54a0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54a2:	b087      	sub	sp, #28
   b54a4:	4605      	mov	r5, r0
   b54a6:	9103      	str	r1, [sp, #12]
   b54a8:	4617      	mov	r7, r2
   b54aa:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b54ac:	f7ff fd18 	bl	b4ee0 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b54b0:	9903      	ldr	r1, [sp, #12]
   b54b2:	4628      	mov	r0, r5
   b54b4:	f7ff ffd0 	bl	b5458 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b54b8:	4604      	mov	r4, r0
   b54ba:	b1e8      	cbz	r0, b54f8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b54bc:	2100      	movs	r1, #0
  if (priority >= 0) {
   b54be:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b54c0:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b54c4:	f8ad 1015 	strh.w	r1, [sp, #21]
   b54c8:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b54cc:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b54d0:	bfa2      	ittt	ge
   b54d2:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b54d4:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b54d8:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b54dc:	9100      	str	r1, [sp, #0]
   b54de:	4602      	mov	r2, r0
   b54e0:	4907      	ldr	r1, [pc, #28]	; (b5500 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b54e2:	bfa8      	it	ge
   b54e4:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b54e8:	463b      	mov	r3, r7
   b54ea:	4628      	mov	r0, r5
   b54ec:	f7ff fcf0 	bl	b4ed0 <HAL_Interrupts_Attach>
   b54f0:	b110      	cbz	r0, b54f8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b54f2:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b54f4:	b007      	add	sp, #28
   b54f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b54f8:	1e20      	subs	r0, r4, #0
   b54fa:	bf18      	it	ne
   b54fc:	2001      	movne	r0, #1
   b54fe:	e7f9      	b.n	b54f4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b5500:	000b5445 	.word	0x000b5445

000b5504 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b5504:	f7ff bcfc 	b.w	b4f00 <HAL_Interrupts_Disable_All>

000b5508 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b5508:	f7ff bcf2 	b.w	b4ef0 <HAL_Interrupts_Enable_All>

000b550c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b550c:	4770      	bx	lr

000b550e <_ZN9IPAddressD0Ev>:
   b550e:	b510      	push	{r4, lr}
   b5510:	2118      	movs	r1, #24
   b5512:	4604      	mov	r4, r0
   b5514:	f7fe fdc1 	bl	b409a <_ZdlPvj>
   b5518:	4620      	mov	r0, r4
   b551a:	bd10      	pop	{r4, pc}

000b551c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b551c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b551e:	7d03      	ldrb	r3, [r0, #20]
   b5520:	2b06      	cmp	r3, #6
{
   b5522:	b08d      	sub	sp, #52	; 0x34
   b5524:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5526:	f100 0704 	add.w	r7, r0, #4
   b552a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b552e:	d012      	beq.n	b5556 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5530:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5534:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5538:	220a      	movs	r2, #10
   b553a:	4630      	mov	r0, r6
   b553c:	f000 f965 	bl	b580a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5540:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5542:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5544:	d019      	beq.n	b557a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5546:	2c00      	cmp	r4, #0
   b5548:	d0f4      	beq.n	b5534 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b554a:	212e      	movs	r1, #46	; 0x2e
   b554c:	4630      	mov	r0, r6
   b554e:	f000 f94d 	bl	b57ec <_ZN5Print5printEc>
   b5552:	4404      	add	r4, r0
   b5554:	e7ee      	b.n	b5534 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5556:	232f      	movs	r3, #47	; 0x2f
   b5558:	466a      	mov	r2, sp
   b555a:	4639      	mov	r1, r7
   b555c:	200a      	movs	r0, #10
		buf[0] = 0;
   b555e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5562:	f7ff fd15 	bl	b4f90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5566:	4668      	mov	r0, sp
   b5568:	f001 f8f2 	bl	b6750 <strlen>
   b556c:	6833      	ldr	r3, [r6, #0]
   b556e:	4602      	mov	r2, r0
   b5570:	68db      	ldr	r3, [r3, #12]
   b5572:	4669      	mov	r1, sp
   b5574:	4630      	mov	r0, r6
   b5576:	4798      	blx	r3
   b5578:	4604      	mov	r4, r0
    }
    return n;
}
   b557a:	4620      	mov	r0, r4
   b557c:	b00d      	add	sp, #52	; 0x34
   b557e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5580 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5580:	b510      	push	{r4, lr}
   b5582:	4b05      	ldr	r3, [pc, #20]	; (b5598 <_ZN9IPAddressC1Ev+0x18>)
   b5584:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5586:	2211      	movs	r2, #17
   b5588:	f840 3b04 	str.w	r3, [r0], #4
   b558c:	2100      	movs	r1, #0
   b558e:	f001 f89f 	bl	b66d0 <memset>
}
   b5592:	4620      	mov	r0, r4
   b5594:	bd10      	pop	{r4, pc}
   b5596:	bf00      	nop
   b5598:	000b6f34 	.word	0x000b6f34

000b559c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b559c:	4603      	mov	r3, r0
   b559e:	4a07      	ldr	r2, [pc, #28]	; (b55bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b55a0:	b510      	push	{r4, lr}
   b55a2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b55a6:	f101 0210 	add.w	r2, r1, #16
   b55aa:	f851 4b04 	ldr.w	r4, [r1], #4
   b55ae:	f843 4b04 	str.w	r4, [r3], #4
   b55b2:	4291      	cmp	r1, r2
   b55b4:	d1f9      	bne.n	b55aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b55b6:	780a      	ldrb	r2, [r1, #0]
   b55b8:	701a      	strb	r2, [r3, #0]
}
   b55ba:	bd10      	pop	{r4, pc}
   b55bc:	000b6f34 	.word	0x000b6f34

000b55c0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b55c0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b55c2:	2b04      	cmp	r3, #4
   b55c4:	d104      	bne.n	b55d0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b55c6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b55c8:	3800      	subs	r0, #0
   b55ca:	bf18      	it	ne
   b55cc:	2001      	movne	r0, #1
   b55ce:	4770      	bx	lr
    } else if (version() == 6) {
   b55d0:	2b06      	cmp	r3, #6
   b55d2:	d107      	bne.n	b55e4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b55d4:	6843      	ldr	r3, [r0, #4]
   b55d6:	b93b      	cbnz	r3, b55e8 <_ZNK9IPAddresscvbEv+0x28>
   b55d8:	6883      	ldr	r3, [r0, #8]
   b55da:	b92b      	cbnz	r3, b55e8 <_ZNK9IPAddresscvbEv+0x28>
   b55dc:	68c3      	ldr	r3, [r0, #12]
   b55de:	b91b      	cbnz	r3, b55e8 <_ZNK9IPAddresscvbEv+0x28>
   b55e0:	6900      	ldr	r0, [r0, #16]
   b55e2:	e7f1      	b.n	b55c8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b55e4:	2000      	movs	r0, #0
   b55e6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b55e8:	2001      	movs	r0, #1
}
   b55ea:	4770      	bx	lr

000b55ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b55ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b55ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b55f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b55f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b55fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b55fe:	2304      	movs	r3, #4
   b5600:	6041      	str	r1, [r0, #4]
   b5602:	7503      	strb	r3, [r0, #20]
}
   b5604:	bd10      	pop	{r4, pc}
	...

000b5608 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5608:	b507      	push	{r0, r1, r2, lr}
   b560a:	4b06      	ldr	r3, [pc, #24]	; (b5624 <_ZN9IPAddressC1EPKh+0x1c>)
   b560c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b560e:	78cb      	ldrb	r3, [r1, #3]
   b5610:	9300      	str	r3, [sp, #0]
   b5612:	788b      	ldrb	r3, [r1, #2]
   b5614:	784a      	ldrb	r2, [r1, #1]
   b5616:	7809      	ldrb	r1, [r1, #0]
   b5618:	f7ff ffe8 	bl	b55ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b561c:	b003      	add	sp, #12
   b561e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5622:	bf00      	nop
   b5624:	000b6f34 	.word	0x000b6f34

000b5628 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5628:	4b01      	ldr	r3, [pc, #4]	; (b5630 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b562a:	4a02      	ldr	r2, [pc, #8]	; (b5634 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b562c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b562e:	4770      	bx	lr
   b5630:	2003e6d0 	.word	0x2003e6d0
   b5634:	000b6f40 	.word	0x000b6f40

000b5638 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5638:	2300      	movs	r3, #0
   b563a:	6840      	ldr	r0, [r0, #4]
   b563c:	461a      	mov	r2, r3
   b563e:	f7ff bdbb 	b.w	b51b8 <network_connect>

000b5642 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5642:	6840      	ldr	r0, [r0, #4]
   b5644:	2200      	movs	r2, #0
   b5646:	2102      	movs	r1, #2
   b5648:	f7ff bdc6 	b.w	b51d8 <network_disconnect>

000b564c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b564c:	2200      	movs	r2, #0
   b564e:	6840      	ldr	r0, [r0, #4]
   b5650:	4611      	mov	r1, r2
   b5652:	f7ff bdb9 	b.w	b51c8 <network_connecting>

000b5656 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5656:	2200      	movs	r2, #0
   b5658:	6840      	ldr	r0, [r0, #4]
   b565a:	4611      	mov	r1, r2
   b565c:	f7ff bdc4 	b.w	b51e8 <network_ready>

000b5660 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5660:	2300      	movs	r3, #0
   b5662:	6840      	ldr	r0, [r0, #4]
   b5664:	461a      	mov	r2, r3
   b5666:	4619      	mov	r1, r3
   b5668:	f7ff bdc6 	b.w	b51f8 <network_on>

000b566c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b566c:	2300      	movs	r3, #0
   b566e:	6840      	ldr	r0, [r0, #4]
   b5670:	461a      	mov	r2, r3
   b5672:	4619      	mov	r1, r3
   b5674:	f7ff bdc8 	b.w	b5208 <network_off>

000b5678 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5678:	6840      	ldr	r0, [r0, #4]
   b567a:	2100      	movs	r1, #0
   b567c:	f7ff bdec 	b.w	b5258 <network_is_on>

000b5680 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5680:	6840      	ldr	r0, [r0, #4]
   b5682:	2100      	movs	r1, #0
   b5684:	f7ff bdf0 	b.w	b5268 <network_is_off>

000b5688 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5688:	6840      	ldr	r0, [r0, #4]
   b568a:	2200      	movs	r2, #0
   b568c:	f081 0101 	eor.w	r1, r1, #1
   b5690:	f7ff bdc2 	b.w	b5218 <network_listen>

000b5694 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5694:	6840      	ldr	r0, [r0, #4]
   b5696:	2200      	movs	r2, #0
   b5698:	f7ff bdce 	b.w	b5238 <network_set_listen_timeout>

000b569c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b569c:	2200      	movs	r2, #0
   b569e:	6840      	ldr	r0, [r0, #4]
   b56a0:	4611      	mov	r1, r2
   b56a2:	f7ff bdd1 	b.w	b5248 <network_get_listen_timeout>

000b56a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b56a6:	2200      	movs	r2, #0
   b56a8:	6840      	ldr	r0, [r0, #4]
   b56aa:	4611      	mov	r1, r2
   b56ac:	f7ff bdbc 	b.w	b5228 <network_listening>

000b56b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b56b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b56b4:	b095      	sub	sp, #84	; 0x54
   b56b6:	4614      	mov	r4, r2
   b56b8:	460d      	mov	r5, r1
   b56ba:	4607      	mov	r7, r0
    IPAddress addr;
   b56bc:	f7ff ff60 	bl	b5580 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b56c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b56c2:	221c      	movs	r2, #28
   b56c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b56c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b56c8:	f001 f802 	bl	b66d0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b56cc:	2340      	movs	r3, #64	; 0x40
   b56ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b56d0:	4620      	mov	r0, r4
   b56d2:	466b      	mov	r3, sp
   b56d4:	aa0c      	add	r2, sp, #48	; 0x30
   b56d6:	2100      	movs	r1, #0
   b56d8:	f7ff fc7a 	bl	b4fd0 <netdb_getaddrinfo>
    if (!r) {
   b56dc:	4604      	mov	r4, r0
   b56de:	2800      	cmp	r0, #0
   b56e0:	d14b      	bne.n	b577a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56e2:	4602      	mov	r2, r0
   b56e4:	2101      	movs	r1, #1
   b56e6:	6868      	ldr	r0, [r5, #4]
   b56e8:	f7ff fd7e 	bl	b51e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56f0:	4622      	mov	r2, r4
   b56f2:	6868      	ldr	r0, [r5, #4]
   b56f4:	f7ff fd78 	bl	b51e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56fa:	4681      	mov	r9, r0
        bool ok = false;
   b56fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56fe:	2e00      	cmp	r6, #0
   b5700:	d03b      	beq.n	b577a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5702:	2900      	cmp	r1, #0
   b5704:	d139      	bne.n	b577a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5706:	6873      	ldr	r3, [r6, #4]
   b5708:	2b02      	cmp	r3, #2
   b570a:	d003      	beq.n	b5714 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b570c:	2b0a      	cmp	r3, #10
   b570e:	d011      	beq.n	b5734 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5710:	69f6      	ldr	r6, [r6, #28]
   b5712:	e7f4      	b.n	b56fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5714:	f1b8 0f00 	cmp.w	r8, #0
   b5718:	d0fa      	beq.n	b5710 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b571a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b571c:	a806      	add	r0, sp, #24
   b571e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5720:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5722:	f7ff ff71 	bl	b5608 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5728:	1d3c      	adds	r4, r7, #4
   b572a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b572c:	682b      	ldr	r3, [r5, #0]
   b572e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5730:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5732:	e7ed      	b.n	b5710 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5734:	f1b9 0f00 	cmp.w	r9, #0
   b5738:	d0ea      	beq.n	b5710 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b573a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b573c:	2210      	movs	r2, #16
   b573e:	a801      	add	r0, sp, #4
   b5740:	f000 ffc6 	bl	b66d0 <memset>
                    a.v = 6;
   b5744:	2306      	movs	r3, #6
   b5746:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b574a:	ad01      	add	r5, sp, #4
   b574c:	f104 0308 	add.w	r3, r4, #8
   b5750:	3418      	adds	r4, #24
   b5752:	6818      	ldr	r0, [r3, #0]
   b5754:	6859      	ldr	r1, [r3, #4]
   b5756:	462a      	mov	r2, r5
   b5758:	c203      	stmia	r2!, {r0, r1}
   b575a:	3308      	adds	r3, #8
   b575c:	42a3      	cmp	r3, r4
   b575e:	4615      	mov	r5, r2
   b5760:	d1f7      	bne.n	b5752 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5762:	a901      	add	r1, sp, #4
   b5764:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5766:	ad07      	add	r5, sp, #28
   b5768:	f7ff ff18 	bl	b559c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b576c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b576e:	1d3c      	adds	r4, r7, #4
   b5770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5772:	682b      	ldr	r3, [r5, #0]
   b5774:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5776:	4649      	mov	r1, r9
   b5778:	e7ca      	b.n	b5710 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b577a:	9800      	ldr	r0, [sp, #0]
   b577c:	f7ff fc20 	bl	b4fc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5780:	4638      	mov	r0, r7
   b5782:	b015      	add	sp, #84	; 0x54
   b5784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5788 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5788:	4b02      	ldr	r3, [pc, #8]	; (b5794 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b578a:	4a03      	ldr	r2, [pc, #12]	; (b5798 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b578c:	601a      	str	r2, [r3, #0]
   b578e:	2200      	movs	r2, #0
   b5790:	605a      	str	r2, [r3, #4]

} // spark
   b5792:	4770      	bx	lr
   b5794:	2003e6d4 	.word	0x2003e6d4
   b5798:	000b6f4c 	.word	0x000b6f4c

000b579c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b579e:	4606      	mov	r6, r0
   b57a0:	460d      	mov	r5, r1
  size_t n = 0;
   b57a2:	188f      	adds	r7, r1, r2
   b57a4:	2400      	movs	r4, #0
  while (size--) {
   b57a6:	42bd      	cmp	r5, r7
   b57a8:	d00c      	beq.n	b57c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b57aa:	6833      	ldr	r3, [r6, #0]
   b57ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   b57b0:	689b      	ldr	r3, [r3, #8]
   b57b2:	4630      	mov	r0, r6
   b57b4:	4798      	blx	r3
     if (chunk>=0)
   b57b6:	1e03      	subs	r3, r0, #0
   b57b8:	db01      	blt.n	b57be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b57ba:	441c      	add	r4, r3
  while (size--) {
   b57bc:	e7f3      	b.n	b57a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b57be:	2c00      	cmp	r4, #0
   b57c0:	bf08      	it	eq
   b57c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b57c4:	4620      	mov	r0, r4
   b57c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57c8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b57c8:	b513      	push	{r0, r1, r4, lr}
   b57ca:	4604      	mov	r4, r0
    }
   b57cc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b57ce:	b159      	cbz	r1, b57e8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b57d0:	9101      	str	r1, [sp, #4]
   b57d2:	f000 ffbd 	bl	b6750 <strlen>
   b57d6:	6823      	ldr	r3, [r4, #0]
   b57d8:	9901      	ldr	r1, [sp, #4]
   b57da:	68db      	ldr	r3, [r3, #12]
   b57dc:	4602      	mov	r2, r0
   b57de:	4620      	mov	r0, r4
    }
   b57e0:	b002      	add	sp, #8
   b57e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b57e6:	4718      	bx	r3
    }
   b57e8:	b002      	add	sp, #8
   b57ea:	bd10      	pop	{r4, pc}

000b57ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b57ec:	6803      	ldr	r3, [r0, #0]
   b57ee:	689b      	ldr	r3, [r3, #8]
   b57f0:	4718      	bx	r3

000b57f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b57f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b57f4:	210d      	movs	r1, #13
{
   b57f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b57f8:	f7ff fff8 	bl	b57ec <_ZN5Print5printEc>
  n += print('\n');
   b57fc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b57fe:	4604      	mov	r4, r0
  n += print('\n');
   b5800:	4628      	mov	r0, r5
   b5802:	f7ff fff3 	bl	b57ec <_ZN5Print5printEc>
  return n;
}
   b5806:	4420      	add	r0, r4
   b5808:	bd38      	pop	{r3, r4, r5, pc}

000b580a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b580a:	b530      	push	{r4, r5, lr}
   b580c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b580e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5810:	2a01      	cmp	r2, #1
  *str = '\0';
   b5812:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5816:	bf98      	it	ls
   b5818:	220a      	movls	r2, #10
   b581a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b581c:	460d      	mov	r5, r1
   b581e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5822:	fb01 5312 	mls	r3, r1, r2, r5
   b5826:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b582a:	2b09      	cmp	r3, #9
   b582c:	bf94      	ite	ls
   b582e:	3330      	addls	r3, #48	; 0x30
   b5830:	3337      	addhi	r3, #55	; 0x37
   b5832:	b2db      	uxtb	r3, r3
  } while(n);
   b5834:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5836:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b583a:	d9ef      	bls.n	b581c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b583c:	4621      	mov	r1, r4
   b583e:	f7ff ffc3 	bl	b57c8 <_ZN5Print5writeEPKc>
}
   b5842:	b00b      	add	sp, #44	; 0x2c
   b5844:	bd30      	pop	{r4, r5, pc}

000b5846 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b584a:	b086      	sub	sp, #24
   b584c:	af00      	add	r7, sp, #0
   b584e:	4605      	mov	r5, r0
   b5850:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5852:	1d38      	adds	r0, r7, #4
   b5854:	2114      	movs	r1, #20
{
   b5856:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5858:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b585a:	f7ff fd25 	bl	b52a8 <vsnprintf>

    if (n<bufsize)
   b585e:	2813      	cmp	r0, #19
   b5860:	d80e      	bhi.n	b5880 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5862:	1d39      	adds	r1, r7, #4
   b5864:	4628      	mov	r0, r5
   b5866:	f7ff ffaf 	bl	b57c8 <_ZN5Print5writeEPKc>
   b586a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b586c:	b11e      	cbz	r6, b5876 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b586e:	4628      	mov	r0, r5
   b5870:	f7ff ffbf 	bl	b57f2 <_ZN5Print7printlnEv>
   b5874:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5876:	4620      	mov	r0, r4
   b5878:	3718      	adds	r7, #24
   b587a:	46bd      	mov	sp, r7
   b587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5880:	f100 0308 	add.w	r3, r0, #8
   b5884:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5888:	46e8      	mov	r8, sp
        char bigger[n+1];
   b588a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b588e:	4622      	mov	r2, r4
   b5890:	1c41      	adds	r1, r0, #1
   b5892:	683b      	ldr	r3, [r7, #0]
   b5894:	4668      	mov	r0, sp
   b5896:	f7ff fd07 	bl	b52a8 <vsnprintf>
  return write(str);
   b589a:	4669      	mov	r1, sp
   b589c:	4628      	mov	r0, r5
   b589e:	f7ff ff93 	bl	b57c8 <_ZN5Print5writeEPKc>
   b58a2:	4604      	mov	r4, r0
   b58a4:	46c5      	mov	sp, r8
   b58a6:	e7e1      	b.n	b586c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b58a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b58a8:	4b01      	ldr	r3, [pc, #4]	; (b58b0 <_GLOBAL__sub_I_RGB+0x8>)
   b58aa:	2200      	movs	r2, #0
   b58ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b58ae:	4770      	bx	lr
   b58b0:	2003e6dc 	.word	0x2003e6dc

000b58b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b58b4:	b510      	push	{r4, lr}
   b58b6:	4604      	mov	r4, r0
   b58b8:	4608      	mov	r0, r1
{
    _spi = spi;
   b58ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b58bc:	f7ff fbc0 	bl	b5040 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b58c0:	2300      	movs	r3, #0
   b58c2:	6063      	str	r3, [r4, #4]
}
   b58c4:	4620      	mov	r0, r4
   b58c6:	bd10      	pop	{r4, pc}

000b58c8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b58c8:	b510      	push	{r4, lr}
   b58ca:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b58cc:	6800      	ldr	r0, [r0, #0]
   b58ce:	b108      	cbz	r0, b58d4 <_ZN6String10invalidateEv+0xc>
   b58d0:	f7ff fcda 	bl	b5288 <free>
	buffer = NULL;
   b58d4:	2300      	movs	r3, #0
	capacity = len = 0;
   b58d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b58da:	6023      	str	r3, [r4, #0]
}
   b58dc:	bd10      	pop	{r4, pc}

000b58de <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b58de:	b538      	push	{r3, r4, r5, lr}
   b58e0:	4604      	mov	r4, r0
   b58e2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b58e4:	6800      	ldr	r0, [r0, #0]
   b58e6:	3101      	adds	r1, #1
   b58e8:	f7ff fcd6 	bl	b5298 <realloc>
	if (newbuffer) {
   b58ec:	b110      	cbz	r0, b58f4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b58ee:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b58f2:	2001      	movs	r0, #1
	}
	return 0;
}
   b58f4:	bd38      	pop	{r3, r4, r5, pc}

000b58f6 <_ZN6String7reserveEj>:
{
   b58f6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b58f8:	6803      	ldr	r3, [r0, #0]
{
   b58fa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b58fc:	b123      	cbz	r3, b5908 <_ZN6String7reserveEj+0x12>
   b58fe:	6843      	ldr	r3, [r0, #4]
   b5900:	428b      	cmp	r3, r1
   b5902:	d301      	bcc.n	b5908 <_ZN6String7reserveEj+0x12>
   b5904:	2001      	movs	r0, #1
}
   b5906:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5908:	4620      	mov	r0, r4
   b590a:	f7ff ffe8 	bl	b58de <_ZN6String12changeBufferEj>
   b590e:	2800      	cmp	r0, #0
   b5910:	d0f9      	beq.n	b5906 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5912:	68a3      	ldr	r3, [r4, #8]
   b5914:	2b00      	cmp	r3, #0
   b5916:	d1f5      	bne.n	b5904 <_ZN6String7reserveEj+0xe>
   b5918:	6822      	ldr	r2, [r4, #0]
   b591a:	7013      	strb	r3, [r2, #0]
   b591c:	e7f2      	b.n	b5904 <_ZN6String7reserveEj+0xe>

000b591e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b591e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5920:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5922:	4611      	mov	r1, r2
   b5924:	9201      	str	r2, [sp, #4]
{
   b5926:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5928:	f7ff ffe5 	bl	b58f6 <_ZN6String7reserveEj>
   b592c:	9a01      	ldr	r2, [sp, #4]
   b592e:	b928      	cbnz	r0, b593c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5930:	4620      	mov	r0, r4
   b5932:	f7ff ffc9 	bl	b58c8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5936:	4620      	mov	r0, r4
   b5938:	b003      	add	sp, #12
   b593a:	bd30      	pop	{r4, r5, pc}
	len = length;
   b593c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b593e:	4629      	mov	r1, r5
   b5940:	6820      	ldr	r0, [r4, #0]
   b5942:	f000 feb7 	bl	b66b4 <memcpy>
	buffer[len] = 0;
   b5946:	6822      	ldr	r2, [r4, #0]
   b5948:	68a3      	ldr	r3, [r4, #8]
   b594a:	2100      	movs	r1, #0
   b594c:	54d1      	strb	r1, [r2, r3]
	return *this;
   b594e:	e7f2      	b.n	b5936 <_ZN6String4copyEPKcj+0x18>

000b5950 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5950:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5952:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5954:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5958:	4604      	mov	r4, r0
	len = 0;
   b595a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b595c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b595e:	b141      	cbz	r1, b5972 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5960:	4608      	mov	r0, r1
   b5962:	9101      	str	r1, [sp, #4]
   b5964:	f000 fef4 	bl	b6750 <strlen>
   b5968:	9901      	ldr	r1, [sp, #4]
   b596a:	4602      	mov	r2, r0
   b596c:	4620      	mov	r0, r4
   b596e:	f7ff ffd6 	bl	b591e <_ZN6String4copyEPKcj>
}
   b5972:	4620      	mov	r0, r4
   b5974:	b002      	add	sp, #8
   b5976:	bd10      	pop	{r4, pc}

000b5978 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5978:	4b05      	ldr	r3, [pc, #20]	; (b5990 <_GLOBAL__sub_I_System+0x18>)
   b597a:	2202      	movs	r2, #2
   b597c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b597e:	4b05      	ldr	r3, [pc, #20]	; (b5994 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5980:	4a05      	ldr	r2, [pc, #20]	; (b5998 <_GLOBAL__sub_I_System+0x20>)
   b5982:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5984:	2000      	movs	r0, #0
   b5986:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b598a:	f7ff bbf1 	b.w	b5170 <set_system_mode>
   b598e:	bf00      	nop
   b5990:	2003e6f8 	.word	0x2003e6f8
   b5994:	2003e6ec 	.word	0x2003e6ec
   b5998:	ffff0000 	.word	0xffff0000

000b599c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b599c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b599e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b59a0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b59a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b59a6:	2201      	movs	r2, #1
   b59a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b59ac:	f10d 0107 	add.w	r1, sp, #7
   b59b0:	47a0      	blx	r4
}
   b59b2:	b002      	add	sp, #8
   b59b4:	bd10      	pop	{r4, pc}

000b59b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b59b6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b59b8:	6803      	ldr	r3, [r0, #0]
   b59ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b59bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b59c0:	46a4      	mov	ip, r4
}
   b59c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b59c6:	4760      	bx	ip

000b59c8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59c8:	b513      	push	{r0, r1, r4, lr}
   b59ca:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b59cc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59ce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b59d2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b59d4:	f10d 0107 	add.w	r1, sp, #7
   b59d8:	2201      	movs	r2, #1
   b59da:	47a0      	blx	r4
}
   b59dc:	b002      	add	sp, #8
   b59de:	bd10      	pop	{r4, pc}

000b59e0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b59e0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b59e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59ec:	429a      	cmp	r2, r3
int TCPClient::read() {
   b59ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59f0:	d008      	beq.n	b5a04 <_ZN9TCPClient4readEv+0x24>
   b59f2:	6963      	ldr	r3, [r4, #20]
   b59f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b59f8:	1c51      	adds	r1, r2, #1
   b59fa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b59fe:	4413      	add	r3, r2
   b5a00:	7918      	ldrb	r0, [r3, #4]
}
   b5a02:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a04:	6803      	ldr	r3, [r0, #0]
   b5a06:	691b      	ldr	r3, [r3, #16]
   b5a08:	4798      	blx	r3
   b5a0a:	2800      	cmp	r0, #0
   b5a0c:	d1f1      	bne.n	b59f2 <_ZN9TCPClient4readEv+0x12>
   b5a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5a12:	e7f6      	b.n	b5a02 <_ZN9TCPClient4readEv+0x22>

000b5a14 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5a14:	4770      	bx	lr

000b5a16 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5a16:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5a18:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5a1a:	43c0      	mvns	r0, r0
   b5a1c:	0fc0      	lsrs	r0, r0, #31
   b5a1e:	4770      	bx	lr

000b5a20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a20:	4770      	bx	lr
	...

000b5a24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5a24:	4b06      	ldr	r3, [pc, #24]	; (b5a40 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5a26:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5a28:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5a2a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5a2e:	d005      	beq.n	b5a3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5a30:	4608      	mov	r0, r1
   b5a32:	f000 fd27 	bl	b6484 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5a36:	2800      	cmp	r0, #0
   b5a38:	bf08      	it	eq
   b5a3a:	2400      	moveq	r4, #0
      }
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	bd10      	pop	{r4, pc}
   b5a40:	000b6ec0 	.word	0x000b6ec0

000b5a44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a44:	b510      	push	{r4, lr}
   b5a46:	21ac      	movs	r1, #172	; 0xac
   b5a48:	4604      	mov	r4, r0
   b5a4a:	f7fe fb26 	bl	b409a <_ZdlPvj>
   b5a4e:	4620      	mov	r0, r4
   b5a50:	bd10      	pop	{r4, pc}

000b5a52 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5a52:	21ac      	movs	r1, #172	; 0xac
   b5a54:	f7fe bb21 	b.w	b409a <_ZdlPvj>

000b5a58 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5a5c:	f04f 0800 	mov.w	r8, #0
   b5a60:	b086      	sub	sp, #24
   b5a62:	461c      	mov	r4, r3
   b5a64:	f8c0 8004 	str.w	r8, [r0, #4]
   b5a68:	4605      	mov	r5, r0
   b5a6a:	460e      	mov	r6, r1
   b5a6c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5a6e:	4641      	mov	r1, r8
   b5a70:	2210      	movs	r2, #16
   b5a72:	a802      	add	r0, sp, #8
   b5a74:	f000 fe2c 	bl	b66d0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5a78:	1c63      	adds	r3, r4, #1
   b5a7a:	d009      	beq.n	b5a90 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a80:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a84:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5a88:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a8c:	435c      	muls	r4, r3
   b5a8e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5a90:	6968      	ldr	r0, [r5, #20]
   b5a92:	2310      	movs	r3, #16
   b5a94:	9300      	str	r3, [sp, #0]
   b5a96:	6800      	ldr	r0, [r0, #0]
   b5a98:	ab02      	add	r3, sp, #8
   b5a9a:	f241 0205 	movw	r2, #4101	; 0x1005
   b5a9e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5aa2:	f7ff fa9d 	bl	b4fe0 <sock_setsockopt>
    if (ret < 0) {
   b5aa6:	2800      	cmp	r0, #0
   b5aa8:	da07      	bge.n	b5aba <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5aaa:	f7ff fc0d 	bl	b52c8 <__errno>
   b5aae:	6803      	ldr	r3, [r0, #0]
   b5ab0:	606b      	str	r3, [r5, #4]
        return 0;
   b5ab2:	2000      	movs	r0, #0
}
   b5ab4:	b006      	add	sp, #24
   b5ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5aba:	6968      	ldr	r0, [r5, #20]
   b5abc:	2300      	movs	r3, #0
   b5abe:	6800      	ldr	r0, [r0, #0]
   b5ac0:	463a      	mov	r2, r7
   b5ac2:	4631      	mov	r1, r6
   b5ac4:	f7ff faac 	bl	b5020 <sock_send>
    if (ret < 0) {
   b5ac8:	1e03      	subs	r3, r0, #0
   b5aca:	dbee      	blt.n	b5aaa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5acc:	4618      	mov	r0, r3
   b5ace:	e7f1      	b.n	b5ab4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5ad0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5ad0:	b530      	push	{r4, r5, lr}
   b5ad2:	b087      	sub	sp, #28
   b5ad4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5ad6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5ad8:	4668      	mov	r0, sp
   b5ada:	f7ff fd95 	bl	b5608 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ae0:	3404      	adds	r4, #4
   b5ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ae4:	682b      	ldr	r3, [r5, #0]
   b5ae6:	7023      	strb	r3, [r4, #0]
    }
   b5ae8:	b007      	add	sp, #28
   b5aea:	bd30      	pop	{r4, r5, pc}

000b5aec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5aec:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5aee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5af0:	4b05      	ldr	r3, [pc, #20]	; (b5b08 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5af2:	4604      	mov	r4, r0
   b5af4:	358c      	adds	r5, #140	; 0x8c
   b5af6:	f844 3b04 	str.w	r3, [r4], #4
   b5afa:	4606      	mov	r6, r0
   b5afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b00:	682b      	ldr	r3, [r5, #0]
   b5b02:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5b04:	4630      	mov	r0, r6
   b5b06:	bd70      	pop	{r4, r5, r6, pc}
   b5b08:	000b6f34 	.word	0x000b6f34

000b5b0c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b10:	4698      	mov	r8, r3
    stop();
   b5b12:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b14:	b093      	sub	sp, #76	; 0x4c
   b5b16:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5b18:	2400      	movs	r4, #0
    stop();
   b5b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5b1c:	4606      	mov	r6, r0
   b5b1e:	4617      	mov	r7, r2
    stop();
   b5b20:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b22:	4628      	mov	r0, r5
   b5b24:	466b      	mov	r3, sp
   b5b26:	4622      	mov	r2, r4
   b5b28:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5b2a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b2c:	f7ff fa50 	bl	b4fd0 <netdb_getaddrinfo>
   b5b30:	4605      	mov	r5, r0
   b5b32:	2800      	cmp	r0, #0
   b5b34:	d163      	bne.n	b5bfe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5b36:	9b00      	ldr	r3, [sp, #0]
   b5b38:	2b00      	cmp	r3, #0
   b5b3a:	d04b      	beq.n	b5bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5b3c:	695b      	ldr	r3, [r3, #20]
   b5b3e:	2b00      	cmp	r3, #0
   b5b40:	d048      	beq.n	b5bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5b42:	a806      	add	r0, sp, #24
   b5b44:	f7ff fd1c 	bl	b5580 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5b48:	9b00      	ldr	r3, [sp, #0]
   b5b4a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5b4c:	7863      	ldrb	r3, [r4, #1]
   b5b4e:	2b02      	cmp	r3, #2
   b5b50:	d104      	bne.n	b5b5c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5b52:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5b54:	a806      	add	r0, sp, #24
   b5b56:	f7ff ffbb 	bl	b5ad0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5b5a:	e026      	b.n	b5baa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5b5c:	2b0a      	cmp	r3, #10
   b5b5e:	d124      	bne.n	b5baa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5b60:	2211      	movs	r2, #17
   b5b62:	4629      	mov	r1, r5
   b5b64:	a801      	add	r0, sp, #4
   b5b66:	f000 fdb3 	bl	b66d0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5b6a:	68a3      	ldr	r3, [r4, #8]
   b5b6c:	2b00      	cmp	r3, #0
   b5b6e:	d038      	beq.n	b5be2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b70:	f104 0308 	add.w	r3, r4, #8
   b5b74:	f10d 0c04 	add.w	ip, sp, #4
   b5b78:	3418      	adds	r4, #24
   b5b7a:	6818      	ldr	r0, [r3, #0]
   b5b7c:	6859      	ldr	r1, [r3, #4]
   b5b7e:	4662      	mov	r2, ip
   b5b80:	c203      	stmia	r2!, {r0, r1}
   b5b82:	3308      	adds	r3, #8
   b5b84:	42a3      	cmp	r3, r4
   b5b86:	4694      	mov	ip, r2
   b5b88:	d1f7      	bne.n	b5b7a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5b8a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5b8c:	a901      	add	r1, sp, #4
   b5b8e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5b90:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5b94:	f7ff fd02 	bl	b559c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b98:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5ba0:	ac07      	add	r4, sp, #28
   b5ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba4:	f8dc 3000 	ldr.w	r3, [ip]
   b5ba8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5baa:	a806      	add	r0, sp, #24
   b5bac:	f7ff fd08 	bl	b55c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5bb0:	b180      	cbz	r0, b5bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5bb2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5bb4:	ad07      	add	r5, sp, #28
   b5bb6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5bba:	4b12      	ldr	r3, [pc, #72]	; (b5c04 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5bbc:	930c      	str	r3, [sp, #48]	; 0x30
   b5bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bc0:	ac0d      	add	r4, sp, #52	; 0x34
   b5bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bc4:	682b      	ldr	r3, [r5, #0]
   b5bc6:	7023      	strb	r3, [r4, #0]
   b5bc8:	463a      	mov	r2, r7
   b5bca:	4643      	mov	r3, r8
   b5bcc:	a90c      	add	r1, sp, #48	; 0x30
   b5bce:	4630      	mov	r0, r6
   b5bd0:	47c8      	blx	r9
   b5bd2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5bd4:	9800      	ldr	r0, [sp, #0]
   b5bd6:	f7ff f9f3 	bl	b4fc0 <netdb_freeaddrinfo>
}
   b5bda:	4628      	mov	r0, r5
   b5bdc:	b013      	add	sp, #76	; 0x4c
   b5bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5be2:	68e3      	ldr	r3, [r4, #12]
   b5be4:	2b00      	cmp	r3, #0
   b5be6:	d1c3      	bne.n	b5b70 <_ZN9TCPClient7connectEPKctm+0x64>
   b5be8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5bec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5bf0:	f7ff f9d6 	bl	b4fa0 <inet_htonl>
   b5bf4:	4581      	cmp	r9, r0
   b5bf6:	d1bb      	bne.n	b5b70 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5bf8:	f104 0114 	add.w	r1, r4, #20
   b5bfc:	e7aa      	b.n	b5b54 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5bfe:	4625      	mov	r5, r4
   b5c00:	e7e8      	b.n	b5bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5c02:	bf00      	nop
   b5c04:	000b6f34 	.word	0x000b6f34

000b5c08 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5c08:	b538      	push	{r3, r4, r5, lr}
   b5c0a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5c0c:	681a      	ldr	r2, [r3, #0]
   b5c0e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5c10:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5c12:	da10      	bge.n	b5c36 <_ZN9TCPClient9connectedEv+0x2e>
   b5c14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c1c:	429a      	cmp	r2, r3
   b5c1e:	d10a      	bne.n	b5c36 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5c20:	6803      	ldr	r3, [r0, #0]
   b5c22:	691b      	ldr	r3, [r3, #16]
   b5c24:	4798      	blx	r3
        if (!rv) {
   b5c26:	4604      	mov	r4, r0
   b5c28:	b928      	cbnz	r0, b5c36 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5c2a:	682b      	ldr	r3, [r5, #0]
   b5c2c:	4628      	mov	r0, r5
   b5c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c30:	4798      	blx	r3
        rv = available();
   b5c32:	4620      	mov	r0, r4
}
   b5c34:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5c36:	2001      	movs	r0, #1
   b5c38:	e7fc      	b.n	b5c34 <_ZN9TCPClient9connectedEv+0x2c>

000b5c3a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5c3a:	b510      	push	{r4, lr}
   b5c3c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c46:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5c48:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c4a:	d005      	beq.n	b5c58 <_ZN9TCPClient4peekEv+0x1e>
   b5c4c:	6963      	ldr	r3, [r4, #20]
   b5c4e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5c52:	4413      	add	r3, r2
   b5c54:	7918      	ldrb	r0, [r3, #4]
}
   b5c56:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c58:	6803      	ldr	r3, [r0, #0]
   b5c5a:	691b      	ldr	r3, [r3, #16]
   b5c5c:	4798      	blx	r3
   b5c5e:	2800      	cmp	r0, #0
   b5c60:	d1f4      	bne.n	b5c4c <_ZN9TCPClient4peekEv+0x12>
   b5c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5c66:	e7f6      	b.n	b5c56 <_ZN9TCPClient4peekEv+0x1c>

000b5c68 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c6a:	6943      	ldr	r3, [r0, #20]
   b5c6c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5c6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c76:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c78:	4605      	mov	r5, r0
   b5c7a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5c7c:	d016      	beq.n	b5cac <_ZN9TCPClient4readEPhj+0x44>
   b5c7e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5c80:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5c84:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5c88:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5c8a:	42bc      	cmp	r4, r7
   b5c8c:	bf28      	it	cs
   b5c8e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5c90:	3304      	adds	r3, #4
   b5c92:	4622      	mov	r2, r4
   b5c94:	4419      	add	r1, r3
   b5c96:	4630      	mov	r0, r6
   b5c98:	f000 fd0c 	bl	b66b4 <memcpy>
   b5c9c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5c9e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5ca2:	4423      	add	r3, r4
   b5ca4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5ca8:	4620      	mov	r0, r4
   b5caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5cac:	6803      	ldr	r3, [r0, #0]
   b5cae:	691b      	ldr	r3, [r3, #16]
   b5cb0:	4798      	blx	r3
   b5cb2:	2800      	cmp	r0, #0
   b5cb4:	d1e3      	bne.n	b5c7e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5cb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5cba:	e7f5      	b.n	b5ca8 <_ZN9TCPClient4readEPhj+0x40>

000b5cbc <_ZN9TCPClient12flush_bufferEv>:
   b5cbc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5cbe:	2300      	movs	r3, #0
   b5cc0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5cc4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5cc6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5cca:	4770      	bx	lr

000b5ccc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5cd0:	461f      	mov	r7, r3
    stop();
   b5cd2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5cd4:	460c      	mov	r4, r1
    stop();
   b5cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5cd8:	b08a      	sub	sp, #40	; 0x28
   b5cda:	4605      	mov	r5, r0
   b5cdc:	4616      	mov	r6, r2
    stop();
   b5cde:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5ce0:	7d23      	ldrb	r3, [r4, #20]
   b5ce2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5ce6:	2b04      	cmp	r3, #4
   b5ce8:	bf0c      	ite	eq
   b5cea:	2002      	moveq	r0, #2
   b5cec:	200a      	movne	r0, #10
   b5cee:	2206      	movs	r2, #6
   b5cf0:	2101      	movs	r1, #1
   b5cf2:	f7ff f99d 	bl	b5030 <sock_socket>
   b5cf6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5cfa:	696b      	ldr	r3, [r5, #20]
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	2b00      	cmp	r3, #0
   b5d00:	da08      	bge.n	b5d14 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5d02:	682b      	ldr	r3, [r5, #0]
   b5d04:	4628      	mov	r0, r5
   b5d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d08:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5d0a:	4798      	blx	r3
}
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	b00a      	add	sp, #40	; 0x28
   b5d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5d14:	4628      	mov	r0, r5
   b5d16:	f7ff ffd1 	bl	b5cbc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5d1a:	b1b7      	cbz	r7, b5d4a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5d1c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d1e:	a903      	add	r1, sp, #12
   b5d20:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5d22:	9303      	str	r3, [sp, #12]
   b5d24:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d28:	f7ff f92a 	bl	b4f80 <if_index_to_name>
   b5d2c:	2800      	cmp	r0, #0
   b5d2e:	d1e8      	bne.n	b5d02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5d30:	6968      	ldr	r0, [r5, #20]
   b5d32:	2306      	movs	r3, #6
   b5d34:	9300      	str	r3, [sp, #0]
   b5d36:	6800      	ldr	r0, [r0, #0]
   b5d38:	ab03      	add	r3, sp, #12
   b5d3a:	f241 020b 	movw	r2, #4107	; 0x100b
   b5d3e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5d42:	f7ff f94d 	bl	b4fe0 <sock_setsockopt>
   b5d46:	2800      	cmp	r0, #0
   b5d48:	d1db      	bne.n	b5d02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5d4a:	221c      	movs	r2, #28
   b5d4c:	2100      	movs	r1, #0
   b5d4e:	a803      	add	r0, sp, #12
   b5d50:	f000 fcbe 	bl	b66d0 <memset>
    if (ip.version() == 4) {
   b5d54:	7d23      	ldrb	r3, [r4, #20]
   b5d56:	2b04      	cmp	r3, #4
   b5d58:	d11d      	bne.n	b5d96 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5d5a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5d5e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5d60:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5d64:	f7ff f924 	bl	b4fb0 <inet_htons>
   b5d68:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5d6c:	6860      	ldr	r0, [r4, #4]
   b5d6e:	f7ff f917 	bl	b4fa0 <inet_htonl>
   b5d72:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5d74:	696b      	ldr	r3, [r5, #20]
   b5d76:	221c      	movs	r2, #28
   b5d78:	6818      	ldr	r0, [r3, #0]
   b5d7a:	a903      	add	r1, sp, #12
   b5d7c:	f7ff f940 	bl	b5000 <sock_connect>
   b5d80:	2800      	cmp	r0, #0
   b5d82:	d1be      	bne.n	b5d02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5d84:	3404      	adds	r4, #4
   b5d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d88:	696d      	ldr	r5, [r5, #20]
   b5d8a:	358c      	adds	r5, #140	; 0x8c
   b5d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d8e:	6823      	ldr	r3, [r4, #0]
   b5d90:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5d92:	2401      	movs	r4, #1
   b5d94:	e7ba      	b.n	b5d0c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5d96:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5d9a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5d9c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5da0:	f7ff f906 	bl	b4fb0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5da4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5da6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5daa:	1d23      	adds	r3, r4, #4
   b5dac:	f104 0714 	add.w	r7, r4, #20
   b5db0:	6818      	ldr	r0, [r3, #0]
   b5db2:	6859      	ldr	r1, [r3, #4]
   b5db4:	4632      	mov	r2, r6
   b5db6:	c203      	stmia	r2!, {r0, r1}
   b5db8:	3308      	adds	r3, #8
   b5dba:	42bb      	cmp	r3, r7
   b5dbc:	4616      	mov	r6, r2
   b5dbe:	d1f7      	bne.n	b5db0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5dc0:	e7d8      	b.n	b5d74 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5dc4 <_ZN9TCPClient9availableEv>:
{
   b5dc4:	b530      	push	{r4, r5, lr}
   b5dc6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5dc8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5dcc:	b08b      	sub	sp, #44	; 0x2c
   b5dce:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5dd0:	b12b      	cbz	r3, b5dde <_ZN9TCPClient9availableEv+0x1a>
   b5dd2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5dd6:	429a      	cmp	r2, r3
   b5dd8:	d101      	bne.n	b5dde <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5dda:	f7ff ff6f 	bl	b5cbc <_ZN9TCPClient12flush_bufferEv>
   b5dde:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5de0:	6808      	ldr	r0, [r1, #0]
   b5de2:	2800      	cmp	r0, #0
   b5de4:	db18      	blt.n	b5e18 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5de6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5dea:	2d7f      	cmp	r5, #127	; 0x7f
   b5dec:	d814      	bhi.n	b5e18 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5dee:	3104      	adds	r1, #4
   b5df0:	2308      	movs	r3, #8
   b5df2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5df6:	4429      	add	r1, r5
   b5df8:	f7ff f90a 	bl	b5010 <sock_recv>
            if (ret > 0) {
   b5dfc:	2800      	cmp	r0, #0
   b5dfe:	dd13      	ble.n	b5e28 <_ZN9TCPClient9availableEv+0x64>
   b5e00:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5e02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e06:	b90a      	cbnz	r2, b5e0c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5e08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5e0c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5e0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e12:	4410      	add	r0, r2
   b5e14:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5e18:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5e1a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5e1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5e22:	1ac0      	subs	r0, r0, r3
   b5e24:	b00b      	add	sp, #44	; 0x2c
   b5e26:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5e28:	f7ff fa4e 	bl	b52c8 <__errno>
   b5e2c:	6803      	ldr	r3, [r0, #0]
   b5e2e:	2b0b      	cmp	r3, #11
   b5e30:	d0f2      	beq.n	b5e18 <_ZN9TCPClient9availableEv+0x54>
   b5e32:	f7ff fa49 	bl	b52c8 <__errno>
   b5e36:	6803      	ldr	r3, [r0, #0]
   b5e38:	2b0b      	cmp	r3, #11
   b5e3a:	d0ed      	beq.n	b5e18 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5e3c:	2320      	movs	r3, #32
   b5e3e:	2500      	movs	r5, #0
   b5e40:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5e44:	f7ff fa40 	bl	b52c8 <__errno>
   b5e48:	6803      	ldr	r3, [r0, #0]
   b5e4a:	9301      	str	r3, [sp, #4]
   b5e4c:	4b08      	ldr	r3, [pc, #32]	; (b5e70 <_ZN9TCPClient9availableEv+0xac>)
   b5e4e:	4909      	ldr	r1, [pc, #36]	; (b5e74 <_ZN9TCPClient9availableEv+0xb0>)
   b5e50:	9300      	str	r3, [sp, #0]
   b5e52:	aa02      	add	r2, sp, #8
   b5e54:	462b      	mov	r3, r5
   b5e56:	2032      	movs	r0, #50	; 0x32
   b5e58:	f7ff f982 	bl	b5160 <log_message>
                    sock_close(d_->sock);
   b5e5c:	6963      	ldr	r3, [r4, #20]
   b5e5e:	6818      	ldr	r0, [r3, #0]
   b5e60:	f7ff f8c6 	bl	b4ff0 <sock_close>
   b5e64:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5e6a:	601a      	str	r2, [r3, #0]
   b5e6c:	e7d4      	b.n	b5e18 <_ZN9TCPClient9availableEv+0x54>
   b5e6e:	bf00      	nop
   b5e70:	000b6f87 	.word	0x000b6f87
   b5e74:	000b6f80 	.word	0x000b6f80

000b5e78 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5e78:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5e7a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5e7c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5e7e:	6818      	ldr	r0, [r3, #0]
   b5e80:	2800      	cmp	r0, #0
   b5e82:	db01      	blt.n	b5e88 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5e84:	f7ff f8b4 	bl	b4ff0 <sock_close>
   b5e88:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5e8e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5e90:	6960      	ldr	r0, [r4, #20]
   b5e92:	2211      	movs	r2, #17
   b5e94:	2100      	movs	r1, #0
   b5e96:	308c      	adds	r0, #140	; 0x8c
   b5e98:	f000 fc1a 	bl	b66d0 <memset>
    flush_buffer();
   b5e9c:	4620      	mov	r0, r4
}
   b5e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5ea2:	f7ff bf0b 	b.w	b5cbc <_ZN9TCPClient12flush_bufferEv>

000b5ea6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5ea6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5ea8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5eaa:	4604      	mov	r4, r0
          total(0) {
   b5eac:	6001      	str	r1, [r0, #0]
   b5eae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5eb2:	3088      	adds	r0, #136	; 0x88
   b5eb4:	f7ff fb64 	bl	b5580 <_ZN9IPAddressC1Ev>
}
   b5eb8:	4620      	mov	r0, r4
   b5eba:	bd10      	pop	{r4, pc}

000b5ebc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ebe:	2300      	movs	r3, #0
   b5ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ec4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5ec8:	4a0e      	ldr	r2, [pc, #56]	; (b5f04 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5eca:	6103      	str	r3, [r0, #16]
   b5ecc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5ece:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5ed0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ed2:	20ac      	movs	r0, #172	; 0xac
   b5ed4:	9101      	str	r1, [sp, #4]
   b5ed6:	f7fe f8dc 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5eda:	1e05      	subs	r5, r0, #0
   b5edc:	f105 060c 	add.w	r6, r5, #12
   b5ee0:	d008      	beq.n	b5ef4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5ee2:	2301      	movs	r3, #1
   b5ee4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5ee8:	4b07      	ldr	r3, [pc, #28]	; (b5f08 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5eea:	9901      	ldr	r1, [sp, #4]
   b5eec:	602b      	str	r3, [r5, #0]
   b5eee:	4630      	mov	r0, r6
   b5ef0:	f7ff ffd9 	bl	b5ea6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5ef4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5ef6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5efa:	f7ff fedf 	bl	b5cbc <_ZN9TCPClient12flush_bufferEv>
}
   b5efe:	b002      	add	sp, #8
   b5f00:	bd70      	pop	{r4, r5, r6, pc}
   b5f02:	bf00      	nop
   b5f04:	000b6fbc 	.word	0x000b6fbc
   b5f08:	000b6fa0 	.word	0x000b6fa0

000b5f0c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5f0c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5f0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5f12:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5f14:	f7ff ffd2 	bl	b5ebc <_ZN9TCPClientC1Ei>
}
   b5f18:	4620      	mov	r0, r4
   b5f1a:	bd10      	pop	{r4, pc}

000b5f1c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5f1c:	b510      	push	{r4, lr}
   b5f1e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5f20:	6800      	ldr	r0, [r0, #0]
   b5f22:	2800      	cmp	r0, #0
   b5f24:	db01      	blt.n	b5f2a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5f26:	f7ff f863 	bl	b4ff0 <sock_close>
    }
}
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	bd10      	pop	{r4, pc}

000b5f2e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5f2e:	300c      	adds	r0, #12
   b5f30:	f7ff bff4 	b.w	b5f1c <_ZN9TCPClient4DataD1Ev>

000b5f34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5f34:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5f36:	681a      	ldr	r2, [r3, #0]
   b5f38:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5f3a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5f3c:	4770      	bx	lr
   b5f3e:	bf00      	nop
   b5f40:	2003e4a0 	.word	0x2003e4a0
   b5f44:	2003e6fc 	.word	0x2003e6fc

000b5f48 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5f48:	4770      	bx	lr

000b5f4a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f4a:	7441      	strb	r1, [r0, #17]
}
   b5f4c:	4770      	bx	lr

000b5f4e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5f4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5f50:	7c00      	ldrb	r0, [r0, #16]
   b5f52:	f7ff f8b5 	bl	b50c0 <hal_usart_available_data_for_write>
}
   b5f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f5a:	bd08      	pop	{r3, pc}

000b5f5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5f5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5f5e:	7c00      	ldrb	r0, [r0, #16]
   b5f60:	f7ff f886 	bl	b5070 <hal_usart_available>
}
   b5f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f68:	bd08      	pop	{r3, pc}

000b5f6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5f6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5f6c:	7c00      	ldrb	r0, [r0, #16]
   b5f6e:	f7ff f88f 	bl	b5090 <hal_usart_peek>
}
   b5f72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f76:	bd08      	pop	{r3, pc}

000b5f78 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5f78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5f7a:	7c00      	ldrb	r0, [r0, #16]
   b5f7c:	f7ff f880 	bl	b5080 <hal_usart_read>
}
   b5f80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f84:	bd08      	pop	{r3, pc}

000b5f86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5f86:	7c00      	ldrb	r0, [r0, #16]
   b5f88:	f7ff b88a 	b.w	b50a0 <hal_usart_flush>

000b5f8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f8e:	7c45      	ldrb	r5, [r0, #17]
{
   b5f90:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f92:	b12d      	cbz	r5, b5fa0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5f94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5f96:	b003      	add	sp, #12
   b5f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5f9c:	f7ff b860 	b.w	b5060 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5fa0:	7c00      	ldrb	r0, [r0, #16]
   b5fa2:	9101      	str	r1, [sp, #4]
   b5fa4:	f7ff f88c 	bl	b50c0 <hal_usart_available_data_for_write>
   b5fa8:	2800      	cmp	r0, #0
   b5faa:	9901      	ldr	r1, [sp, #4]
   b5fac:	dcf2      	bgt.n	b5f94 <_ZN11USARTSerial5writeEh+0x8>
}
   b5fae:	4628      	mov	r0, r5
   b5fb0:	b003      	add	sp, #12
   b5fb2:	bd30      	pop	{r4, r5, pc}

000b5fb4 <_ZN11USARTSerialD0Ev>:
   b5fb4:	b510      	push	{r4, lr}
   b5fb6:	2114      	movs	r1, #20
   b5fb8:	4604      	mov	r4, r0
   b5fba:	f7fe f86e 	bl	b409a <_ZdlPvj>
   b5fbe:	4620      	mov	r0, r4
   b5fc0:	bd10      	pop	{r4, pc}
	...

000b5fc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5fc4:	b510      	push	{r4, lr}
   b5fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fca:	4604      	mov	r4, r0
   b5fcc:	4608      	mov	r0, r1
   b5fce:	4611      	mov	r1, r2
   b5fd0:	2200      	movs	r2, #0
   b5fd2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5fd6:	4b04      	ldr	r3, [pc, #16]	; (b5fe8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5fd8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fda:	2301      	movs	r3, #1
  _serial = serial;
   b5fdc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5fde:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5fe0:	f7ff f876 	bl	b50d0 <hal_usart_init_ex>
}
   b5fe4:	4620      	mov	r0, r4
   b5fe6:	bd10      	pop	{r4, pc}
   b5fe8:	000b7024 	.word	0x000b7024

000b5fec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5fec:	7441      	strb	r1, [r0, #17]
}
   b5fee:	4770      	bx	lr

000b5ff0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ff0:	4770      	bx	lr

000b5ff2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ff2:	4770      	bx	lr

000b5ff4 <_ZN9USBSerial4readEv>:
{
   b5ff4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5ff6:	2100      	movs	r1, #0
   b5ff8:	7c00      	ldrb	r0, [r0, #16]
   b5ffa:	f7ff f891 	bl	b5120 <HAL_USB_USART_Receive_Data>
}
   b5ffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6002:	bd08      	pop	{r3, pc}

000b6004 <_ZN9USBSerial4peekEv>:
{
   b6004:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6006:	2101      	movs	r1, #1
   b6008:	7c00      	ldrb	r0, [r0, #16]
   b600a:	f7ff f889 	bl	b5120 <HAL_USB_USART_Receive_Data>
}
   b600e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6012:	bd08      	pop	{r3, pc}

000b6014 <_ZN9USBSerial17availableForWriteEv>:
{
   b6014:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6016:	7c00      	ldrb	r0, [r0, #16]
   b6018:	f7ff f87a 	bl	b5110 <HAL_USB_USART_Available_Data_For_Write>
}
   b601c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6020:	bd08      	pop	{r3, pc}

000b6022 <_ZN9USBSerial9availableEv>:
{
   b6022:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6024:	7c00      	ldrb	r0, [r0, #16]
   b6026:	f7ff f86b 	bl	b5100 <HAL_USB_USART_Available_Data>
}
   b602a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b602e:	bd08      	pop	{r3, pc}

000b6030 <_ZN9USBSerial5writeEh>:
{
   b6030:	b513      	push	{r0, r1, r4, lr}
   b6032:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6034:	7c00      	ldrb	r0, [r0, #16]
{
   b6036:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6038:	f7ff f86a 	bl	b5110 <HAL_USB_USART_Available_Data_For_Write>
   b603c:	2800      	cmp	r0, #0
   b603e:	9901      	ldr	r1, [sp, #4]
   b6040:	dc01      	bgt.n	b6046 <_ZN9USBSerial5writeEh+0x16>
   b6042:	7c60      	ldrb	r0, [r4, #17]
   b6044:	b120      	cbz	r0, b6050 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6046:	7c20      	ldrb	r0, [r4, #16]
   b6048:	f7ff f872 	bl	b5130 <HAL_USB_USART_Send_Data>
   b604c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6050:	b002      	add	sp, #8
   b6052:	bd10      	pop	{r4, pc}

000b6054 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6054:	7c00      	ldrb	r0, [r0, #16]
   b6056:	f7ff b873 	b.w	b5140 <HAL_USB_USART_Flush_Data>

000b605a <_ZN9USBSerialD0Ev>:
   b605a:	b510      	push	{r4, lr}
   b605c:	2114      	movs	r1, #20
   b605e:	4604      	mov	r4, r0
   b6060:	f7fe f81b 	bl	b409a <_ZdlPvj>
   b6064:	4620      	mov	r0, r4
   b6066:	bd10      	pop	{r4, pc}

000b6068 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6068:	b510      	push	{r4, lr}
   b606a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b606e:	4604      	mov	r4, r0
   b6070:	4608      	mov	r0, r1
   b6072:	2100      	movs	r1, #0
   b6074:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6078:	4b04      	ldr	r3, [pc, #16]	; (b608c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b607a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b607c:	2301      	movs	r3, #1
  _serial = serial;
   b607e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6080:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6082:	4611      	mov	r1, r2
   b6084:	f7ff f82c 	bl	b50e0 <HAL_USB_USART_Init>
}
   b6088:	4620      	mov	r0, r4
   b608a:	bd10      	pop	{r4, pc}
   b608c:	000b7054 	.word	0x000b7054

000b6090 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6090:	7c00      	ldrb	r0, [r0, #16]
   b6092:	2200      	movs	r2, #0
   b6094:	f7ff b82c 	b.w	b50f0 <HAL_USB_USART_Begin>

000b6098 <_Z19acquireSerialBufferv>:
{
   b6098:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b609a:	2214      	movs	r2, #20
{
   b609c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b609e:	2100      	movs	r1, #0
   b60a0:	f000 fb16 	bl	b66d0 <memset>
}
   b60a4:	4620      	mov	r0, r4
   b60a6:	bd10      	pop	{r4, pc}

000b60a8 <_Z16_fetch_usbserialv>:
{
   b60a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60aa:	4c0f      	ldr	r4, [pc, #60]	; (b60e8 <_Z16_fetch_usbserialv+0x40>)
{
   b60ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b60ae:	a803      	add	r0, sp, #12
   b60b0:	f7ff fff2 	bl	b6098 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60b4:	7821      	ldrb	r1, [r4, #0]
   b60b6:	f3bf 8f5b 	dmb	ish
   b60ba:	f011 0101 	ands.w	r1, r1, #1
   b60be:	d10f      	bne.n	b60e0 <_Z16_fetch_usbserialv+0x38>
   b60c0:	4620      	mov	r0, r4
   b60c2:	9101      	str	r1, [sp, #4]
   b60c4:	f7fd fff8 	bl	b40b8 <__cxa_guard_acquire>
   b60c8:	9901      	ldr	r1, [sp, #4]
   b60ca:	b148      	cbz	r0, b60e0 <_Z16_fetch_usbserialv+0x38>
   b60cc:	aa03      	add	r2, sp, #12
   b60ce:	4807      	ldr	r0, [pc, #28]	; (b60ec <_Z16_fetch_usbserialv+0x44>)
   b60d0:	f7ff ffca 	bl	b6068 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b60d4:	4620      	mov	r0, r4
   b60d6:	f7fd fff4 	bl	b40c2 <__cxa_guard_release>
   b60da:	4805      	ldr	r0, [pc, #20]	; (b60f0 <_Z16_fetch_usbserialv+0x48>)
   b60dc:	f000 fae4 	bl	b66a8 <atexit>
	return _usbserial;
}
   b60e0:	4802      	ldr	r0, [pc, #8]	; (b60ec <_Z16_fetch_usbserialv+0x44>)
   b60e2:	b008      	add	sp, #32
   b60e4:	bd10      	pop	{r4, pc}
   b60e6:	bf00      	nop
   b60e8:	2003e700 	.word	0x2003e700
   b60ec:	2003e704 	.word	0x2003e704
   b60f0:	000b5ff1 	.word	0x000b5ff1

000b60f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b60f4:	2200      	movs	r2, #0
   b60f6:	6840      	ldr	r0, [r0, #4]
   b60f8:	4611      	mov	r1, r2
   b60fa:	f7ff b875 	b.w	b51e8 <network_ready>

000b60fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b60fe:	2200      	movs	r2, #0
   b6100:	6840      	ldr	r0, [r0, #4]
   b6102:	4611      	mov	r1, r2
   b6104:	f7ff b890 	b.w	b5228 <network_listening>

000b6108 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6108:	2200      	movs	r2, #0
   b610a:	6840      	ldr	r0, [r0, #4]
   b610c:	4611      	mov	r1, r2
   b610e:	f7ff b89b 	b.w	b5248 <network_get_listen_timeout>

000b6112 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6112:	6840      	ldr	r0, [r0, #4]
   b6114:	2200      	movs	r2, #0
   b6116:	f7ff b88f 	b.w	b5238 <network_set_listen_timeout>

000b611a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b611a:	6840      	ldr	r0, [r0, #4]
   b611c:	2200      	movs	r2, #0
   b611e:	f081 0101 	eor.w	r1, r1, #1
   b6122:	f7ff b879 	b.w	b5218 <network_listen>

000b6126 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6126:	2300      	movs	r3, #0
   b6128:	6840      	ldr	r0, [r0, #4]
   b612a:	461a      	mov	r2, r3
   b612c:	4619      	mov	r1, r3
   b612e:	f7ff b86b 	b.w	b5208 <network_off>

000b6132 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6132:	2300      	movs	r3, #0
   b6134:	6840      	ldr	r0, [r0, #4]
   b6136:	461a      	mov	r2, r3
   b6138:	4619      	mov	r1, r3
   b613a:	f7ff b85d 	b.w	b51f8 <network_on>

000b613e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b613e:	2200      	movs	r2, #0
   b6140:	6840      	ldr	r0, [r0, #4]
   b6142:	4611      	mov	r1, r2
   b6144:	f7ff b840 	b.w	b51c8 <network_connecting>

000b6148 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6148:	6840      	ldr	r0, [r0, #4]
   b614a:	2200      	movs	r2, #0
   b614c:	2102      	movs	r1, #2
   b614e:	f7ff b843 	b.w	b51d8 <network_disconnect>

000b6152 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6152:	2300      	movs	r3, #0
   b6154:	6840      	ldr	r0, [r0, #4]
   b6156:	461a      	mov	r2, r3
   b6158:	f7ff b82e 	b.w	b51b8 <network_connect>

000b615c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b615c:	4b02      	ldr	r3, [pc, #8]	; (b6168 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b615e:	2204      	movs	r2, #4
   b6160:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6162:	4a02      	ldr	r2, [pc, #8]	; (b616c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6164:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6166:	4770      	bx	lr
   b6168:	2003e718 	.word	0x2003e718
   b616c:	000b7084 	.word	0x000b7084

000b6170 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6170:	4b01      	ldr	r3, [pc, #4]	; (b6178 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6172:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6174:	4770      	bx	lr
   b6176:	bf00      	nop
   b6178:	2003e4a4 	.word	0x2003e4a4

000b617c <serialEventRun>:
{
   b617c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b617e:	4b0b      	ldr	r3, [pc, #44]	; (b61ac <serialEventRun+0x30>)
   b6180:	b143      	cbz	r3, b6194 <serialEventRun+0x18>
   b6182:	f7ff ff91 	bl	b60a8 <_Z16_fetch_usbserialv>
   b6186:	6803      	ldr	r3, [r0, #0]
   b6188:	691b      	ldr	r3, [r3, #16]
   b618a:	4798      	blx	r3
   b618c:	2800      	cmp	r0, #0
   b618e:	dd01      	ble.n	b6194 <serialEventRun+0x18>
        serialEvent();
   b6190:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6194:	4b06      	ldr	r3, [pc, #24]	; (b61b0 <serialEventRun+0x34>)
   b6196:	b143      	cbz	r3, b61aa <serialEventRun+0x2e>
   b6198:	f000 f94a 	bl	b6430 <_Z22__fetch_global_Serial1v>
   b619c:	6803      	ldr	r3, [r0, #0]
   b619e:	691b      	ldr	r3, [r3, #16]
   b61a0:	4798      	blx	r3
   b61a2:	2800      	cmp	r0, #0
   b61a4:	dd01      	ble.n	b61aa <serialEventRun+0x2e>
        serialEvent1();
   b61a6:	f3af 8000 	nop.w
}
   b61aa:	bd08      	pop	{r3, pc}
	...

000b61b4 <_post_loop>:
{
   b61b4:	b508      	push	{r3, lr}
	serialEventRun();
   b61b6:	f7ff ffe1 	bl	b617c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b61ba:	f7fe fe61 	bl	b4e80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b61be:	4b01      	ldr	r3, [pc, #4]	; (b61c4 <_post_loop+0x10>)
   b61c0:	6018      	str	r0, [r3, #0]
}
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	2003e728 	.word	0x2003e728

000b61c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61c8:	4805      	ldr	r0, [pc, #20]	; (b61e0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b61ca:	4a06      	ldr	r2, [pc, #24]	; (b61e4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b61cc:	4906      	ldr	r1, [pc, #24]	; (b61e8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b61ce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61d0:	1a12      	subs	r2, r2, r0
   b61d2:	f000 fa6f 	bl	b66b4 <memcpy>
    __backup_sram_signature = signature;
   b61d6:	4b05      	ldr	r3, [pc, #20]	; (b61ec <_Z33system_initialize_user_backup_ramv+0x24>)
   b61d8:	4a05      	ldr	r2, [pc, #20]	; (b61f0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b61da:	601a      	str	r2, [r3, #0]
}
   b61dc:	bd08      	pop	{r3, pc}
   b61de:	bf00      	nop
   b61e0:	2003f400 	.word	0x2003f400
   b61e4:	2003f404 	.word	0x2003f404
   b61e8:	000b7274 	.word	0x000b7274
   b61ec:	2003f400 	.word	0x2003f400
   b61f0:	9a271c1e 	.word	0x9a271c1e

000b61f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b61f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61f6:	2300      	movs	r3, #0
   b61f8:	9300      	str	r3, [sp, #0]
   b61fa:	461a      	mov	r2, r3
   b61fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6200:	f7fe ffc8 	bl	b5194 <system_ctrl_set_result>
}
   b6204:	b003      	add	sp, #12
   b6206:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b620c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b620c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b620e:	8843      	ldrh	r3, [r0, #2]
   b6210:	2b0a      	cmp	r3, #10
   b6212:	d008      	beq.n	b6226 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6214:	2b50      	cmp	r3, #80	; 0x50
   b6216:	d10b      	bne.n	b6230 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6218:	4b09      	ldr	r3, [pc, #36]	; (b6240 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b621a:	681b      	ldr	r3, [r3, #0]
   b621c:	b14b      	cbz	r3, b6232 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b621e:	b003      	add	sp, #12
   b6220:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6224:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6226:	f7ff ffe5 	bl	b61f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b622a:	b003      	add	sp, #12
   b622c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6230:	2300      	movs	r3, #0
   b6232:	9300      	str	r3, [sp, #0]
   b6234:	461a      	mov	r2, r3
   b6236:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b623a:	f7fe ffab 	bl	b5194 <system_ctrl_set_result>
}
   b623e:	e7f4      	b.n	b622a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6240:	2003e724 	.word	0x2003e724

000b6244 <module_user_init_hook>:
{
   b6244:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6246:	4812      	ldr	r0, [pc, #72]	; (b6290 <module_user_init_hook+0x4c>)
   b6248:	2100      	movs	r1, #0
   b624a:	f7ff f84d 	bl	b52e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b624e:	4b11      	ldr	r3, [pc, #68]	; (b6294 <module_user_init_hook+0x50>)
   b6250:	681a      	ldr	r2, [r3, #0]
   b6252:	4b11      	ldr	r3, [pc, #68]	; (b6298 <module_user_init_hook+0x54>)
   b6254:	429a      	cmp	r2, r3
   b6256:	4b11      	ldr	r3, [pc, #68]	; (b629c <module_user_init_hook+0x58>)
   b6258:	bf0c      	ite	eq
   b625a:	2201      	moveq	r2, #1
   b625c:	2200      	movne	r2, #0
   b625e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6260:	d001      	beq.n	b6266 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6262:	f7ff ffb1 	bl	b61c8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6266:	f7fe fdfb 	bl	b4e60 <HAL_RNG_GetRandomNumber>
   b626a:	4604      	mov	r4, r0
    srand(seed);
   b626c:	f000 fa38 	bl	b66e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6270:	4b0b      	ldr	r3, [pc, #44]	; (b62a0 <module_user_init_hook+0x5c>)
   b6272:	b113      	cbz	r3, b627a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6274:	4620      	mov	r0, r4
   b6276:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b627a:	2100      	movs	r1, #0
   b627c:	4808      	ldr	r0, [pc, #32]	; (b62a0 <module_user_init_hook+0x5c>)
   b627e:	f7fe ff93 	bl	b51a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6286:	4807      	ldr	r0, [pc, #28]	; (b62a4 <module_user_init_hook+0x60>)
   b6288:	2100      	movs	r1, #0
   b628a:	f7fe bf79 	b.w	b5180 <system_ctrl_set_app_request_handler>
   b628e:	bf00      	nop
   b6290:	000b6171 	.word	0x000b6171
   b6294:	2003f400 	.word	0x2003f400
   b6298:	9a271c1e 	.word	0x9a271c1e
   b629c:	2003e720 	.word	0x2003e720
   b62a0:	00000000 	.word	0x00000000
   b62a4:	000b620d 	.word	0x000b620d

000b62a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b62a8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b62aa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b62ac:	d902      	bls.n	b62b4 <pinAvailable+0xc>
    return false;
   b62ae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b62b0:	b002      	add	sp, #8
   b62b2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b62b4:	f1a0 030b 	sub.w	r3, r0, #11
   b62b8:	2b02      	cmp	r3, #2
   b62ba:	d81a      	bhi.n	b62f2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b62bc:	4c17      	ldr	r4, [pc, #92]	; (b631c <pinAvailable+0x74>)
   b62be:	7821      	ldrb	r1, [r4, #0]
   b62c0:	f3bf 8f5b 	dmb	ish
   b62c4:	f011 0101 	ands.w	r1, r1, #1
   b62c8:	d10b      	bne.n	b62e2 <pinAvailable+0x3a>
   b62ca:	4620      	mov	r0, r4
   b62cc:	9101      	str	r1, [sp, #4]
   b62ce:	f7fd fef3 	bl	b40b8 <__cxa_guard_acquire>
   b62d2:	9901      	ldr	r1, [sp, #4]
   b62d4:	b128      	cbz	r0, b62e2 <pinAvailable+0x3a>
   b62d6:	4812      	ldr	r0, [pc, #72]	; (b6320 <pinAvailable+0x78>)
   b62d8:	f7ff faec 	bl	b58b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b62dc:	4620      	mov	r0, r4
   b62de:	f7fd fef0 	bl	b40c2 <__cxa_guard_release>
   b62e2:	4b0f      	ldr	r3, [pc, #60]	; (b6320 <pinAvailable+0x78>)
   b62e4:	7818      	ldrb	r0, [r3, #0]
   b62e6:	f7fe feb3 	bl	b5050 <hal_spi_is_enabled>
   b62ea:	2800      	cmp	r0, #0
   b62ec:	d1df      	bne.n	b62ae <pinAvailable+0x6>
  return true; // 'pin' is available
   b62ee:	2001      	movs	r0, #1
   b62f0:	e7de      	b.n	b62b0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b62f2:	2801      	cmp	r0, #1
   b62f4:	d809      	bhi.n	b630a <pinAvailable+0x62>
   b62f6:	f000 f85b 	bl	b63b0 <_Z19__fetch_global_Wirev>
   b62fa:	2100      	movs	r1, #0
   b62fc:	7c00      	ldrb	r0, [r0, #16]
   b62fe:	f7fe fe2f 	bl	b4f60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6302:	f080 0001 	eor.w	r0, r0, #1
   b6306:	b2c0      	uxtb	r0, r0
   b6308:	e7d2      	b.n	b62b0 <pinAvailable+0x8>
   b630a:	3809      	subs	r0, #9
   b630c:	2801      	cmp	r0, #1
   b630e:	d8ee      	bhi.n	b62ee <pinAvailable+0x46>
   b6310:	f000 f88e 	bl	b6430 <_Z22__fetch_global_Serial1v>
   b6314:	7c00      	ldrb	r0, [r0, #16]
   b6316:	f7fe fecb 	bl	b50b0 <hal_usart_is_enabled>
   b631a:	e7f2      	b.n	b6302 <pinAvailable+0x5a>
   b631c:	2003e624 	.word	0x2003e624
   b6320:	2003e628 	.word	0x2003e628

000b6324 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6324:	2823      	cmp	r0, #35	; 0x23
{
   b6326:	b538      	push	{r3, r4, r5, lr}
   b6328:	4604      	mov	r4, r0
   b632a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b632c:	d80a      	bhi.n	b6344 <pinMode+0x20>
   b632e:	29ff      	cmp	r1, #255	; 0xff
   b6330:	d008      	beq.n	b6344 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6332:	f7ff ffb9 	bl	b62a8 <pinAvailable>
   b6336:	b128      	cbz	r0, b6344 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6338:	4629      	mov	r1, r5
   b633a:	4620      	mov	r0, r4
}
   b633c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6340:	f7fe bdae 	b.w	b4ea0 <HAL_Pin_Mode>
}
   b6344:	bd38      	pop	{r3, r4, r5, pc}

000b6346 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6346:	b538      	push	{r3, r4, r5, lr}
   b6348:	4604      	mov	r4, r0
   b634a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b634c:	f7fe fdb0 	bl	b4eb0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6350:	28ff      	cmp	r0, #255	; 0xff
   b6352:	d010      	beq.n	b6376 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6354:	2806      	cmp	r0, #6
   b6356:	d804      	bhi.n	b6362 <digitalWrite+0x1c>
   b6358:	234d      	movs	r3, #77	; 0x4d
   b635a:	fa23 f000 	lsr.w	r0, r3, r0
   b635e:	07c3      	lsls	r3, r0, #31
   b6360:	d409      	bmi.n	b6376 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6362:	4620      	mov	r0, r4
   b6364:	f7ff ffa0 	bl	b62a8 <pinAvailable>
   b6368:	b128      	cbz	r0, b6376 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b636a:	4629      	mov	r1, r5
   b636c:	4620      	mov	r0, r4
}
   b636e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6372:	f7fe bda5 	b.w	b4ec0 <HAL_GPIO_Write>
}
   b6376:	bd38      	pop	{r3, r4, r5, pc}

000b6378 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6378:	4770      	bx	lr
	...

000b637c <_Z17acquireWireBufferv>:
{
   b637c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b637e:	4b0a      	ldr	r3, [pc, #40]	; (b63a8 <_Z17acquireWireBufferv+0x2c>)
   b6380:	6003      	str	r3, [r0, #0]
   b6382:	2301      	movs	r3, #1
{
   b6384:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6386:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6388:	4908      	ldr	r1, [pc, #32]	; (b63ac <_Z17acquireWireBufferv+0x30>)
   b638a:	2020      	movs	r0, #32
   b638c:	f000 f874 	bl	b6478 <_ZnajRKSt9nothrow_t>
	};
   b6390:	2520      	movs	r5, #32
   b6392:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6394:	4905      	ldr	r1, [pc, #20]	; (b63ac <_Z17acquireWireBufferv+0x30>)
	};
   b6396:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6398:	4628      	mov	r0, r5
   b639a:	f000 f86d 	bl	b6478 <_ZnajRKSt9nothrow_t>
	};
   b639e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b63a2:	4620      	mov	r0, r4
   b63a4:	bd38      	pop	{r3, r4, r5, pc}
   b63a6:	bf00      	nop
   b63a8:	00010018 	.word	0x00010018
   b63ac:	000b70b8 	.word	0x000b70b8

000b63b0 <_Z19__fetch_global_Wirev>:
{
   b63b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63b2:	4d0e      	ldr	r5, [pc, #56]	; (b63ec <_Z19__fetch_global_Wirev+0x3c>)
   b63b4:	7829      	ldrb	r1, [r5, #0]
   b63b6:	f3bf 8f5b 	dmb	ish
   b63ba:	f011 0401 	ands.w	r4, r1, #1
{
   b63be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63c0:	d111      	bne.n	b63e6 <_Z19__fetch_global_Wirev+0x36>
   b63c2:	4628      	mov	r0, r5
   b63c4:	f7fd fe78 	bl	b40b8 <__cxa_guard_acquire>
   b63c8:	b168      	cbz	r0, b63e6 <_Z19__fetch_global_Wirev+0x36>
   b63ca:	4668      	mov	r0, sp
   b63cc:	f7ff ffd6 	bl	b637c <_Z17acquireWireBufferv>
   b63d0:	466a      	mov	r2, sp
   b63d2:	4621      	mov	r1, r4
   b63d4:	4806      	ldr	r0, [pc, #24]	; (b63f0 <_Z19__fetch_global_Wirev+0x40>)
   b63d6:	f7ff f817 	bl	b5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b63da:	4628      	mov	r0, r5
   b63dc:	f7fd fe71 	bl	b40c2 <__cxa_guard_release>
   b63e0:	4804      	ldr	r0, [pc, #16]	; (b63f4 <_Z19__fetch_global_Wirev+0x44>)
   b63e2:	f000 f961 	bl	b66a8 <atexit>
	return wire;
}
   b63e6:	4802      	ldr	r0, [pc, #8]	; (b63f0 <_Z19__fetch_global_Wirev+0x40>)
   b63e8:	b007      	add	sp, #28
   b63ea:	bd30      	pop	{r4, r5, pc}
   b63ec:	2003e72c 	.word	0x2003e72c
   b63f0:	2003e730 	.word	0x2003e730
   b63f4:	000b6379 	.word	0x000b6379

000b63f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b63f8:	4770      	bx	lr
	...

000b63fc <_Z20acquireSerial1Bufferv>:
{
   b63fc:	b538      	push	{r3, r4, r5, lr}
   b63fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6400:	2514      	movs	r5, #20
   b6402:	462a      	mov	r2, r5
   b6404:	2100      	movs	r1, #0
   b6406:	f000 f963 	bl	b66d0 <memset>
   b640a:	8025      	strh	r5, [r4, #0]
   b640c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b640e:	4907      	ldr	r1, [pc, #28]	; (b642c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6410:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6412:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6414:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6416:	f000 f82f 	bl	b6478 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b641a:	4904      	ldr	r1, [pc, #16]	; (b642c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b641c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b641e:	4628      	mov	r0, r5
   b6420:	f000 f82a 	bl	b6478 <_ZnajRKSt9nothrow_t>
    };
   b6424:	60e0      	str	r0, [r4, #12]
}
   b6426:	4620      	mov	r0, r4
   b6428:	bd38      	pop	{r3, r4, r5, pc}
   b642a:	bf00      	nop
   b642c:	000b70b8 	.word	0x000b70b8

000b6430 <_Z22__fetch_global_Serial1v>:
{
   b6430:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6432:	4d0e      	ldr	r5, [pc, #56]	; (b646c <_Z22__fetch_global_Serial1v+0x3c>)
   b6434:	7829      	ldrb	r1, [r5, #0]
   b6436:	f3bf 8f5b 	dmb	ish
   b643a:	f011 0401 	ands.w	r4, r1, #1
{
   b643e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6440:	d111      	bne.n	b6466 <_Z22__fetch_global_Serial1v+0x36>
   b6442:	4628      	mov	r0, r5
   b6444:	f7fd fe38 	bl	b40b8 <__cxa_guard_acquire>
   b6448:	b168      	cbz	r0, b6466 <_Z22__fetch_global_Serial1v+0x36>
   b644a:	a801      	add	r0, sp, #4
   b644c:	f7ff ffd6 	bl	b63fc <_Z20acquireSerial1Bufferv>
   b6450:	aa01      	add	r2, sp, #4
   b6452:	4621      	mov	r1, r4
   b6454:	4806      	ldr	r0, [pc, #24]	; (b6470 <_Z22__fetch_global_Serial1v+0x40>)
   b6456:	f7ff fdb5 	bl	b5fc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b645a:	4628      	mov	r0, r5
   b645c:	f7fd fe31 	bl	b40c2 <__cxa_guard_release>
   b6460:	4804      	ldr	r0, [pc, #16]	; (b6474 <_Z22__fetch_global_Serial1v+0x44>)
   b6462:	f000 f921 	bl	b66a8 <atexit>
    return serial1;
}
   b6466:	4802      	ldr	r0, [pc, #8]	; (b6470 <_Z22__fetch_global_Serial1v+0x40>)
   b6468:	b007      	add	sp, #28
   b646a:	bd30      	pop	{r4, r5, pc}
   b646c:	2003e744 	.word	0x2003e744
   b6470:	2003e748 	.word	0x2003e748
   b6474:	000b63f9 	.word	0x000b63f9

000b6478 <_ZnajRKSt9nothrow_t>:
   b6478:	f7fd be0d 	b.w	b4096 <_Znaj>

000b647c <_ZSt25__throw_bad_function_callv>:
   b647c:	b508      	push	{r3, lr}
   b647e:	f7fe ff1b 	bl	b52b8 <abort>
	...

000b6484 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6484:	4901      	ldr	r1, [pc, #4]	; (b648c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6486:	f000 b8f9 	b.w	b667c <_ZNKSt9type_infoeqERKS_>
   b648a:	bf00      	nop
   b648c:	000b70d4 	.word	0x000b70d4

000b6490 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6492:	2400      	movs	r4, #0
   b6494:	2310      	movs	r3, #16
   b6496:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b649a:	6803      	ldr	r3, [r0, #0]
   b649c:	4615      	mov	r5, r2
   b649e:	699e      	ldr	r6, [r3, #24]
   b64a0:	6812      	ldr	r2, [r2, #0]
   b64a2:	466b      	mov	r3, sp
   b64a4:	e9cd 4400 	strd	r4, r4, [sp]
   b64a8:	47b0      	blx	r6
   b64aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b64ae:	f003 0306 	and.w	r3, r3, #6
   b64b2:	2b06      	cmp	r3, #6
   b64b4:	bf03      	ittte	eq
   b64b6:	9b00      	ldreq	r3, [sp, #0]
   b64b8:	602b      	streq	r3, [r5, #0]
   b64ba:	2001      	moveq	r0, #1
   b64bc:	4620      	movne	r0, r4
   b64be:	b004      	add	sp, #16
   b64c0:	bd70      	pop	{r4, r5, r6, pc}

000b64c2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b64c2:	9800      	ldr	r0, [sp, #0]
   b64c4:	4290      	cmp	r0, r2
   b64c6:	bf14      	ite	ne
   b64c8:	2001      	movne	r0, #1
   b64ca:	2006      	moveq	r0, #6
   b64cc:	4770      	bx	lr
	...

000b64d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b64d0:	b510      	push	{r4, lr}
   b64d2:	4b03      	ldr	r3, [pc, #12]	; (b64e0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b64d4:	6003      	str	r3, [r0, #0]
   b64d6:	4604      	mov	r4, r0
   b64d8:	f000 f8cd 	bl	b6676 <_ZNSt9type_infoD1Ev>
   b64dc:	4620      	mov	r0, r4
   b64de:	bd10      	pop	{r4, pc}
   b64e0:	000b7114 	.word	0x000b7114

000b64e4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b64e4:	b510      	push	{r4, lr}
   b64e6:	4604      	mov	r4, r0
   b64e8:	f7ff fff2 	bl	b64d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b64ec:	4620      	mov	r0, r4
   b64ee:	2108      	movs	r1, #8
   b64f0:	f7fd fdd3 	bl	b409a <_ZdlPvj>
   b64f4:	4620      	mov	r0, r4
   b64f6:	bd10      	pop	{r4, pc}

000b64f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b64f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64fc:	461f      	mov	r7, r3
   b64fe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6502:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6506:	4598      	cmp	r8, r3
   b6508:	4606      	mov	r6, r0
   b650a:	4615      	mov	r5, r2
   b650c:	d107      	bne.n	b651e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b650e:	9907      	ldr	r1, [sp, #28]
   b6510:	f000 f8b4 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b6514:	b118      	cbz	r0, b651e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6516:	7165      	strb	r5, [r4, #5]
   b6518:	2000      	movs	r0, #0
   b651a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b651e:	4639      	mov	r1, r7
   b6520:	4630      	mov	r0, r6
   b6522:	f000 f8ab 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b6526:	2800      	cmp	r0, #0
   b6528:	d0f6      	beq.n	b6518 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b652a:	2301      	movs	r3, #1
   b652c:	f8c4 8000 	str.w	r8, [r4]
   b6530:	7125      	strb	r5, [r4, #4]
   b6532:	71a3      	strb	r3, [r4, #6]
   b6534:	e7f0      	b.n	b6518 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6536 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6536:	b538      	push	{r3, r4, r5, lr}
   b6538:	4615      	mov	r5, r2
   b653a:	461c      	mov	r4, r3
   b653c:	f000 f89e 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b6540:	b120      	cbz	r0, b654c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6542:	2308      	movs	r3, #8
   b6544:	60e3      	str	r3, [r4, #12]
   b6546:	2306      	movs	r3, #6
   b6548:	6025      	str	r5, [r4, #0]
   b654a:	7123      	strb	r3, [r4, #4]
   b654c:	bd38      	pop	{r3, r4, r5, pc}

000b654e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b654e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6550:	4605      	mov	r5, r0
   b6552:	460c      	mov	r4, r1
   b6554:	9201      	str	r2, [sp, #4]
   b6556:	461e      	mov	r6, r3
   b6558:	f000 f890 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b655c:	b950      	cbnz	r0, b6574 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b655e:	2e03      	cmp	r6, #3
   b6560:	d808      	bhi.n	b6574 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6562:	6823      	ldr	r3, [r4, #0]
   b6564:	9a01      	ldr	r2, [sp, #4]
   b6566:	695b      	ldr	r3, [r3, #20]
   b6568:	4629      	mov	r1, r5
   b656a:	4620      	mov	r0, r4
   b656c:	b002      	add	sp, #8
   b656e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6572:	4718      	bx	r3
   b6574:	b002      	add	sp, #8
   b6576:	bd70      	pop	{r4, r5, r6, pc}

000b6578 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6578:	b510      	push	{r4, lr}
   b657a:	4b03      	ldr	r3, [pc, #12]	; (b6588 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b657c:	6003      	str	r3, [r0, #0]
   b657e:	4604      	mov	r4, r0
   b6580:	f7ff ffa6 	bl	b64d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6584:	4620      	mov	r0, r4
   b6586:	bd10      	pop	{r4, pc}
   b6588:	000b7174 	.word	0x000b7174

000b658c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b658c:	b510      	push	{r4, lr}
   b658e:	4604      	mov	r4, r0
   b6590:	f7ff fff2 	bl	b6578 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6594:	4620      	mov	r0, r4
   b6596:	210c      	movs	r1, #12
   b6598:	f7fd fd7f 	bl	b409a <_ZdlPvj>
   b659c:	4620      	mov	r0, r4
   b659e:	bd10      	pop	{r4, pc}

000b65a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b65a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b65a2:	9f08      	ldr	r7, [sp, #32]
   b65a4:	4297      	cmp	r7, r2
   b65a6:	4605      	mov	r5, r0
   b65a8:	460e      	mov	r6, r1
   b65aa:	4614      	mov	r4, r2
   b65ac:	d00a      	beq.n	b65c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b65ae:	68a8      	ldr	r0, [r5, #8]
   b65b0:	6802      	ldr	r2, [r0, #0]
   b65b2:	9708      	str	r7, [sp, #32]
   b65b4:	6a15      	ldr	r5, [r2, #32]
   b65b6:	4631      	mov	r1, r6
   b65b8:	4622      	mov	r2, r4
   b65ba:	46ac      	mov	ip, r5
   b65bc:	b003      	add	sp, #12
   b65be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b65c2:	4760      	bx	ip
   b65c4:	4619      	mov	r1, r3
   b65c6:	9301      	str	r3, [sp, #4]
   b65c8:	f000 f858 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b65cc:	9b01      	ldr	r3, [sp, #4]
   b65ce:	2800      	cmp	r0, #0
   b65d0:	d0ed      	beq.n	b65ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b65d2:	2006      	movs	r0, #6
   b65d4:	b003      	add	sp, #12
   b65d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b65d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b65d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65dc:	460d      	mov	r5, r1
   b65de:	4619      	mov	r1, r3
   b65e0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b65e4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b65e8:	4681      	mov	r9, r0
   b65ea:	4617      	mov	r7, r2
   b65ec:	4698      	mov	r8, r3
   b65ee:	f000 f845 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b65f2:	b190      	cbz	r0, b661a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b65f4:	2d00      	cmp	r5, #0
   b65f6:	6034      	str	r4, [r6, #0]
   b65f8:	7137      	strb	r7, [r6, #4]
   b65fa:	db09      	blt.n	b6610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b65fc:	1961      	adds	r1, r4, r5
   b65fe:	458a      	cmp	sl, r1
   b6600:	bf0c      	ite	eq
   b6602:	2106      	moveq	r1, #6
   b6604:	2101      	movne	r1, #1
   b6606:	71b1      	strb	r1, [r6, #6]
   b6608:	2000      	movs	r0, #0
   b660a:	b001      	add	sp, #4
   b660c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6610:	3502      	adds	r5, #2
   b6612:	d1f9      	bne.n	b6608 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6614:	2301      	movs	r3, #1
   b6616:	71b3      	strb	r3, [r6, #6]
   b6618:	e7f6      	b.n	b6608 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b661a:	4554      	cmp	r4, sl
   b661c:	d106      	bne.n	b662c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b661e:	4659      	mov	r1, fp
   b6620:	4648      	mov	r0, r9
   b6622:	f000 f82b 	bl	b667c <_ZNKSt9type_infoeqERKS_>
   b6626:	b108      	cbz	r0, b662c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6628:	7177      	strb	r7, [r6, #5]
   b662a:	e7ed      	b.n	b6608 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b662c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6630:	6803      	ldr	r3, [r0, #0]
   b6632:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6636:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b663a:	69dc      	ldr	r4, [r3, #28]
   b663c:	463a      	mov	r2, r7
   b663e:	4643      	mov	r3, r8
   b6640:	4629      	mov	r1, r5
   b6642:	46a4      	mov	ip, r4
   b6644:	b001      	add	sp, #4
   b6646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b664a:	4760      	bx	ip

000b664c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6650:	4607      	mov	r7, r0
   b6652:	460c      	mov	r4, r1
   b6654:	4615      	mov	r5, r2
   b6656:	461e      	mov	r6, r3
   b6658:	f7ff ff6d 	bl	b6536 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b665c:	b948      	cbnz	r0, b6672 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b665e:	68b8      	ldr	r0, [r7, #8]
   b6660:	6803      	ldr	r3, [r0, #0]
   b6662:	699f      	ldr	r7, [r3, #24]
   b6664:	462a      	mov	r2, r5
   b6666:	4633      	mov	r3, r6
   b6668:	4621      	mov	r1, r4
   b666a:	46bc      	mov	ip, r7
   b666c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6670:	4760      	bx	ip
   b6672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6676 <_ZNSt9type_infoD1Ev>:
   b6676:	4770      	bx	lr

000b6678 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6678:	2000      	movs	r0, #0
   b667a:	4770      	bx	lr

000b667c <_ZNKSt9type_infoeqERKS_>:
   b667c:	4281      	cmp	r1, r0
   b667e:	b508      	push	{r3, lr}
   b6680:	d00e      	beq.n	b66a0 <_ZNKSt9type_infoeqERKS_+0x24>
   b6682:	6840      	ldr	r0, [r0, #4]
   b6684:	7803      	ldrb	r3, [r0, #0]
   b6686:	2b2a      	cmp	r3, #42	; 0x2a
   b6688:	d00c      	beq.n	b66a4 <_ZNKSt9type_infoeqERKS_+0x28>
   b668a:	6849      	ldr	r1, [r1, #4]
   b668c:	780b      	ldrb	r3, [r1, #0]
   b668e:	2b2a      	cmp	r3, #42	; 0x2a
   b6690:	bf08      	it	eq
   b6692:	3101      	addeq	r1, #1
   b6694:	f000 f852 	bl	b673c <strcmp>
   b6698:	fab0 f080 	clz	r0, r0
   b669c:	0940      	lsrs	r0, r0, #5
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	2001      	movs	r0, #1
   b66a2:	e7fc      	b.n	b669e <_ZNKSt9type_infoeqERKS_+0x22>
   b66a4:	2000      	movs	r0, #0
   b66a6:	e7fa      	b.n	b669e <_ZNKSt9type_infoeqERKS_+0x22>

000b66a8 <atexit>:
   b66a8:	2300      	movs	r3, #0
   b66aa:	4601      	mov	r1, r0
   b66ac:	461a      	mov	r2, r3
   b66ae:	4618      	mov	r0, r3
   b66b0:	f000 b856 	b.w	b6760 <__register_exitproc>

000b66b4 <memcpy>:
   b66b4:	440a      	add	r2, r1
   b66b6:	4291      	cmp	r1, r2
   b66b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b66bc:	d100      	bne.n	b66c0 <memcpy+0xc>
   b66be:	4770      	bx	lr
   b66c0:	b510      	push	{r4, lr}
   b66c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b66c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b66ca:	4291      	cmp	r1, r2
   b66cc:	d1f9      	bne.n	b66c2 <memcpy+0xe>
   b66ce:	bd10      	pop	{r4, pc}

000b66d0 <memset>:
   b66d0:	4402      	add	r2, r0
   b66d2:	4603      	mov	r3, r0
   b66d4:	4293      	cmp	r3, r2
   b66d6:	d100      	bne.n	b66da <memset+0xa>
   b66d8:	4770      	bx	lr
   b66da:	f803 1b01 	strb.w	r1, [r3], #1
   b66de:	e7f9      	b.n	b66d4 <memset+0x4>

000b66e0 <srand>:
   b66e0:	b538      	push	{r3, r4, r5, lr}
   b66e2:	4b10      	ldr	r3, [pc, #64]	; (b6724 <srand+0x44>)
   b66e4:	681d      	ldr	r5, [r3, #0]
   b66e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66e8:	4604      	mov	r4, r0
   b66ea:	b9b3      	cbnz	r3, b671a <srand+0x3a>
   b66ec:	2018      	movs	r0, #24
   b66ee:	f7fe fdc3 	bl	b5278 <malloc>
   b66f2:	4602      	mov	r2, r0
   b66f4:	63a8      	str	r0, [r5, #56]	; 0x38
   b66f6:	b920      	cbnz	r0, b6702 <srand+0x22>
   b66f8:	4b0b      	ldr	r3, [pc, #44]	; (b6728 <srand+0x48>)
   b66fa:	480c      	ldr	r0, [pc, #48]	; (b672c <srand+0x4c>)
   b66fc:	2142      	movs	r1, #66	; 0x42
   b66fe:	f7fe fdeb 	bl	b52d8 <__assert_func>
   b6702:	490b      	ldr	r1, [pc, #44]	; (b6730 <srand+0x50>)
   b6704:	4b0b      	ldr	r3, [pc, #44]	; (b6734 <srand+0x54>)
   b6706:	e9c0 1300 	strd	r1, r3, [r0]
   b670a:	4b0b      	ldr	r3, [pc, #44]	; (b6738 <srand+0x58>)
   b670c:	6083      	str	r3, [r0, #8]
   b670e:	230b      	movs	r3, #11
   b6710:	8183      	strh	r3, [r0, #12]
   b6712:	2100      	movs	r1, #0
   b6714:	2001      	movs	r0, #1
   b6716:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b671a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b671c:	2200      	movs	r2, #0
   b671e:	611c      	str	r4, [r3, #16]
   b6720:	615a      	str	r2, [r3, #20]
   b6722:	bd38      	pop	{r3, r4, r5, pc}
   b6724:	2003e4a4 	.word	0x2003e4a4
   b6728:	000b71ad 	.word	0x000b71ad
   b672c:	000b71c4 	.word	0x000b71c4
   b6730:	abcd330e 	.word	0xabcd330e
   b6734:	e66d1234 	.word	0xe66d1234
   b6738:	0005deec 	.word	0x0005deec

000b673c <strcmp>:
   b673c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6740:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6744:	2a01      	cmp	r2, #1
   b6746:	bf28      	it	cs
   b6748:	429a      	cmpcs	r2, r3
   b674a:	d0f7      	beq.n	b673c <strcmp>
   b674c:	1ad0      	subs	r0, r2, r3
   b674e:	4770      	bx	lr

000b6750 <strlen>:
   b6750:	4603      	mov	r3, r0
   b6752:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6756:	2a00      	cmp	r2, #0
   b6758:	d1fb      	bne.n	b6752 <strlen+0x2>
   b675a:	1a18      	subs	r0, r3, r0
   b675c:	3801      	subs	r0, #1
   b675e:	4770      	bx	lr

000b6760 <__register_exitproc>:
   b6760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6764:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6820 <__register_exitproc+0xc0>
   b6768:	4606      	mov	r6, r0
   b676a:	f8d8 0000 	ldr.w	r0, [r8]
   b676e:	461f      	mov	r7, r3
   b6770:	460d      	mov	r5, r1
   b6772:	4691      	mov	r9, r2
   b6774:	f000 f856 	bl	b6824 <__retarget_lock_acquire_recursive>
   b6778:	4b25      	ldr	r3, [pc, #148]	; (b6810 <__register_exitproc+0xb0>)
   b677a:	681c      	ldr	r4, [r3, #0]
   b677c:	b934      	cbnz	r4, b678c <__register_exitproc+0x2c>
   b677e:	4c25      	ldr	r4, [pc, #148]	; (b6814 <__register_exitproc+0xb4>)
   b6780:	601c      	str	r4, [r3, #0]
   b6782:	4b25      	ldr	r3, [pc, #148]	; (b6818 <__register_exitproc+0xb8>)
   b6784:	b113      	cbz	r3, b678c <__register_exitproc+0x2c>
   b6786:	681b      	ldr	r3, [r3, #0]
   b6788:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b678c:	6863      	ldr	r3, [r4, #4]
   b678e:	2b1f      	cmp	r3, #31
   b6790:	dd07      	ble.n	b67a2 <__register_exitproc+0x42>
   b6792:	f8d8 0000 	ldr.w	r0, [r8]
   b6796:	f000 f847 	bl	b6828 <__retarget_lock_release_recursive>
   b679a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b67a2:	b34e      	cbz	r6, b67f8 <__register_exitproc+0x98>
   b67a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b67a8:	b988      	cbnz	r0, b67ce <__register_exitproc+0x6e>
   b67aa:	4b1c      	ldr	r3, [pc, #112]	; (b681c <__register_exitproc+0xbc>)
   b67ac:	b923      	cbnz	r3, b67b8 <__register_exitproc+0x58>
   b67ae:	f8d8 0000 	ldr.w	r0, [r8]
   b67b2:	f000 f838 	bl	b6826 <__retarget_lock_release>
   b67b6:	e7f0      	b.n	b679a <__register_exitproc+0x3a>
   b67b8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b67bc:	f7fe fd5c 	bl	b5278 <malloc>
   b67c0:	2800      	cmp	r0, #0
   b67c2:	d0f4      	beq.n	b67ae <__register_exitproc+0x4e>
   b67c4:	2300      	movs	r3, #0
   b67c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b67ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b67ce:	6863      	ldr	r3, [r4, #4]
   b67d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b67d4:	2201      	movs	r2, #1
   b67d6:	409a      	lsls	r2, r3
   b67d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b67dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b67e0:	4313      	orrs	r3, r2
   b67e2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b67e6:	2e02      	cmp	r6, #2
   b67e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b67ec:	bf02      	ittt	eq
   b67ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b67f2:	4313      	orreq	r3, r2
   b67f4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b67f8:	6863      	ldr	r3, [r4, #4]
   b67fa:	f8d8 0000 	ldr.w	r0, [r8]
   b67fe:	1c5a      	adds	r2, r3, #1
   b6800:	3302      	adds	r3, #2
   b6802:	6062      	str	r2, [r4, #4]
   b6804:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6808:	f000 f80e 	bl	b6828 <__retarget_lock_release_recursive>
   b680c:	2000      	movs	r0, #0
   b680e:	e7c6      	b.n	b679e <__register_exitproc+0x3e>
   b6810:	2003e7e8 	.word	0x2003e7e8
   b6814:	2003e75c 	.word	0x2003e75c
   b6818:	00000000 	.word	0x00000000
   b681c:	000b5279 	.word	0x000b5279
   b6820:	2003e508 	.word	0x2003e508

000b6824 <__retarget_lock_acquire_recursive>:
   b6824:	4770      	bx	lr

000b6826 <__retarget_lock_release>:
   b6826:	4770      	bx	lr

000b6828 <__retarget_lock_release_recursive>:
   b6828:	4770      	bx	lr

000b682a <link_code_end>:
	...

000b682c <dynalib_user>:
   b682c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b683c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b684c:	7620 7269 7574 6c61 4100 7373 7265 6974      virtual.Asserti
   b685c:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b686c:	3c20 2820 3233 2b20 3120 2936 4e00 206f      < (32 + 16).No 
   b687c:	6843 6e61 6567 2d20 4320 6e61 6563 6c6c     Change - Cancell
   b688c:	6e69 2067 4d43 0a44 7b00 6f22 226e 743a     ing CMD..{"on":t
   b689c:	7572 2c65 7322 7461 3a22 2c00 6222 6972     rue,"sat":.,"bri
   b68ac:	3a22 2c00 6822 6575 3a22 7b00 6f22 226e     ":.,"hue":.{"on"
   b68bc:	663a 6c61 6573 007d 6553 646e 6e69 2067     :false}.Sending 
   b68cc:	6f43 6d6d 6e61 2064 6f74 4820 6575 5000     Command to Hue.P
   b68dc:	5455 2f20 7061 2f69 2f00 696c 6867 7374     UT /api/./lights
   b68ec:	002f 732f 6174 6574 4820 5454 2f50 2e31     /./state HTTP/1.
   b68fc:	0031 656b 7065 612d 696c 6576 4800 736f     1.keep-alive.Hos
   b690c:	3a74 0020 6f43 746e 6e65 2d74 654c 676e     t: .Content-Leng
   b691c:	6874 203a 4300 6e6f 6574 746e 542d 7079     th: .Content-Typ
   b692c:	3a65 7420 7865 2f74 6c70 6961 3b6e 6863     e: text/plain;ch
   b693c:	7261 6573 3d74 5455 2d46 0038 7246 6d6f     arset=UTF-8.From
   b694c:	4820 6575 2500 0a73                           Hue.%s..

000b6955 <_ZL4font>:
   b6955:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6965:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6975:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6985:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6995:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b69a5:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b69b5:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b69c5:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b69d5:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b69e5:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b69f5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6a05:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6a15:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6a25:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6a35:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6a45:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6a55:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6a65:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6a75:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6a85:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6a95:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b6aa5:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b6ab5:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b6ac5:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b6ad5:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6ae5:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6af5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6b05:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6b15:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6b25:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6b35:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6b45:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6b55:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6b65:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6b75:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6b85:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6b95:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6ba5:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6bb5:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6bc5:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6bd5:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6be5:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b6bf5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6c05:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6c15:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6c25:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6c35:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6c45:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6c55:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6c65:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6c75:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6c85:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6c95:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6ca5:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6cb5:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6cc5:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b6cd5:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b6ce5:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b6cf5:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6d05:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6d15:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6d25:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6d35:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6d45:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6d55:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6d65:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6d75:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6d85:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6d95:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b6da5:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b6db5:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b6dc5:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b6dd5:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b6de5:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b6df5:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b6e05:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b6e15:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b6e25:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b6e35:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b6e45:	0012 3c3c 3c3c 0000 0000                     ..<<<<.....

000b6e50 <_ZTV12Adafruit_GFX>:
	...
   b6e60:	4a2d 000b 579d 000b 40a1 000b 4745 000b     -J...W...@..EG..
   b6e70:	486b 000b 4887 000b 4803 000b 48a1 000b     kH...H...H...H..
   b6e80:	48d7 000b 48f3 000b                         .H...H..

000b6e88 <_ZTV16Adafruit_SSD1306>:
	...
   b6e90:	4d85 000b 4e15 000b 4a2d 000b 579d 000b     .M...N..-J...W..
   b6ea0:	4d89 000b 4745 000b 4c11 000b 4aa1 000b     .M..EG...L...J..
   b6eb0:	4803 000b 48a1 000b 48d7 000b 48f3 000b     .H...H...H...H..

000b6ec0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6ec8 <_ZTVN5spark13EthernetClassE>:
	...
   b6ed0:	5393 000b 5389 000b 537f 000b 5375 000b     .S...S...S..uS..
   b6ee0:	5369 000b 535d 000b 5679 000b 5681 000b     iS..]S..yV...V..
   b6ef0:	5351 000b 5349 000b 533f 000b 5335 000b     QS..IS..?S..5S..
   b6f00:	56b1 000b                                   .V..

000b6f04 <_ZTV7TwoWire>:
	...
   b6f0c:	53b1 000b 53fb 000b 53d3 000b 53b3 000b     .S...S...S...S..
   b6f1c:	53db 000b 53e3 000b 53eb 000b 53f3 000b     .S...S...S...S..

000b6f2c <_ZTV9IPAddress>:
	...
   b6f34:	551d 000b 550d 000b 550f 000b 7061 0070     .U...U...U..app.

000b6f44 <_ZTVN5spark12NetworkClassE>:
	...
   b6f4c:	5639 000b 5643 000b 564d 000b 5657 000b     9V..CV..MV..WV..
   b6f5c:	5661 000b 566d 000b 5679 000b 5681 000b     aV..mV..yV...V..
   b6f6c:	5689 000b 5695 000b 569d 000b 56a7 000b     .V...V...V...V..
   b6f7c:	56b1 000b 6977 6972 676e 7200 6365 2076     .V..wiring.recv 
   b6f8c:	7265 6f72 2072 203d 6425 0000               error = %d..

000b6f98 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6fa0:	5a21 000b 5a45 000b 5f2f 000b 5a53 000b     !Z..EZ../_..SZ..
   b6fb0:	5a25 000b                                   %Z..

000b6fb4 <_ZTV9TCPClient>:
	...
   b6fbc:	4321 000b 4355 000b 599d 000b 59b7 000b     !C..UC...Y...Y..
   b6fcc:	5dc5 000b 59e1 000b 5c3b 000b 5a15 000b     .]...Y..;\...Z..
   b6fdc:	5ccd 000b 5b0d 000b 5c69 000b 5e79 000b     .\...[..i\..y^..
   b6fec:	5c09 000b 5a17 000b 59c9 000b 5a59 000b     .\...Z...Y..YZ..
   b6ffc:	5aed 000b 5925 252d 2d6d 6425 2554 3a48     .Z..%Y-%m-%dT%H:
   b700c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b701c <_ZTV11USARTSerial>:
	...
   b7024:	5f49 000b 5fb5 000b 5f8d 000b 579d 000b     I_..._..._...W..
   b7034:	5f5d 000b 5f79 000b 5f6b 000b 5f87 000b     ]_..y_..k_..._..
   b7044:	5f4b 000b 5f4f 000b                         K_..O_..

000b704c <_ZTV9USBSerial>:
	...
   b7054:	5ff3 000b 605b 000b 6031 000b 579d 000b     ._..[`..1`...W..
   b7064:	6023 000b 5ff5 000b 6005 000b 6055 000b     #`..._...`..U`..
   b7074:	6015 000b 5fed 000b                         .`..._..

000b707c <_ZTVN5spark9WiFiClassE>:
	...
   b7084:	6153 000b 6149 000b 613f 000b 60f5 000b     Sa..Ia..?a...`..
   b7094:	6133 000b 6127 000b 5679 000b 5681 000b     3a..'a..yV...V..
   b70a4:	611b 000b 6113 000b 6109 000b 60ff 000b     .a...a...a...`..
   b70b4:	56b1 000b                                   .V..

000b70b8 <_ZSt7nothrow>:
	...

000b70b9 <_ZTSSt19_Sp_make_shared_tag>:
   b70b9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b70c9:	6572 5f64 6174 0067 0000                     red_tag....

000b70d4 <_ZTISt19_Sp_make_shared_tag>:
   b70d4:	7114 000b 70b9 000b                         .q...p..

000b70dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   b70dc:	7174 000b 70e8 000b 7198 000b               tq...p...q..

000b70e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b70e8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b70f8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7108:	0045 0000                                   E...

000b710c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b710c:	0000 0000 70dc 000b 64d1 000b 64e5 000b     .....p...d...d..
   b711c:	6679 000b 6679 000b 654f 000b 6491 000b     yf..yf..Oe...d..
   b712c:	6537 000b 64f9 000b 64c3 000b               7e...d...d..

000b7138 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7138:	7174 000b 7144 000b 70dc 000b               tq..Dq...p..

000b7144 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7144:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7154:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7164:	666e 456f 0000 0000                         nfoE....

000b716c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b716c:	0000 0000 7138 000b 6579 000b 658d 000b     ....8q..ye...e..
   b717c:	6679 000b 6679 000b 654f 000b 6491 000b     yf..yf..Oe...d..
   b718c:	664d 000b 65d9 000b 65a1 000b               Mf...e...e..

000b7198 <_ZTISt9type_info>:
   b7198:	7114 000b 71a0 000b                         .q...q..

000b71a0 <_ZTSSt9type_info>:
   b71a0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b71b0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b71c0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b71d0:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b71e0:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b71f0:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b7200:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b7210:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b721d <link_const_variable_data_end>:
   b721d:	00          	.byte	0x00
	...

000b7220 <link_constructors_location>:
   b7220:	000b45d9 	.word	0x000b45d9
   b7224:	000b4735 	.word	0x000b4735
   b7228:	000b5325 	.word	0x000b5325
   b722c:	000b539d 	.word	0x000b539d
   b7230:	000b5629 	.word	0x000b5629
   b7234:	000b5789 	.word	0x000b5789
   b7238:	000b58a9 	.word	0x000b58a9
   b723c:	000b5979 	.word	0x000b5979
   b7240:	000b5f35 	.word	0x000b5f35
   b7244:	000b615d 	.word	0x000b615d

000b7248 <link_constructors_end>:
	...
