
/Users/adrianpijoan/Documents/IoT/SmartRoom/Spiritist_Telegragh/target/4.0.2/argon/Spiritist_Telegragh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003444  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7460  000b7460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7484  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000494  2003e08c  000b7488  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d0  2003e520  2003e520  0002e520  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b791c  000b791c  0002791c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7944  000b7944  00027944  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00126bde  00000000  00000000  00027948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014ae7  00000000  00000000  0014e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003e54b  00000000  00000000  0016300d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030f8  00000000  00000000  001a1558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000adb8  00000000  00000000  001a4650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cbca  00000000  00000000  001af408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004698c  00000000  00000000  001ebfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a07d  00000000  00000000  0023295e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b44  00000000  00000000  0036c9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fc41 	bl	b68b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fc49 	bl	b68d0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e08c 	.word	0x2003e08c
   b4048:	000b7488 	.word	0x000b7488
   b404c:	2003e520 	.word	0x2003e520
   b4050:	2003e520 	.word	0x2003e520
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f9f1 	bl	b6444 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7434 	.word	0x000b7434
   b407c:	000b745c 	.word	0x000b745c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba24 	b.w	b44cc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa43 	bl	b4510 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b991 	b.w	b63b4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 ba45 	b.w	b5520 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 ba43 	b.w	b5520 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 ba49 	b.w	b5530 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f9a6 	bl	b53f8 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5129 	.word	0x000b5129
   b40b4:	000b6a40 	.word	0x000b6a40

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c8:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40ca:	b510      	push	{r4, lr}
   b40cc:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40ce:	d90d      	bls.n	b40ec <nrf_gpio_pin_read+0x24>
   b40d0:	4a09      	ldr	r2, [pc, #36]	; (b40f8 <nrf_gpio_pin_read+0x30>)
   b40d2:	490a      	ldr	r1, [pc, #40]	; (b40fc <nrf_gpio_pin_read+0x34>)
   b40d4:	200a      	movs	r0, #10
   b40d6:	f001 f98f 	bl	b53f8 <panic_>
        return NRF_P1;
   b40da:	4b09      	ldr	r3, [pc, #36]	; (b4100 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40dc:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40e0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40e4:	40e0      	lsrs	r0, r4
}
   b40e6:	f000 0001 	and.w	r0, r0, #1
   b40ea:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40ec:	281f      	cmp	r0, #31
   b40ee:	d8f4      	bhi.n	b40da <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40f4:	e7f4      	b.n	b40e0 <nrf_gpio_pin_read+0x18>
   b40f6:	bf00      	nop
   b40f8:	000b5129 	.word	0x000b5129
   b40fc:	000b6a55 	.word	0x000b6a55
   b4100:	50000300 	.word	0x50000300

000b4104 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4108:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4238 <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b410c:	6887      	ldr	r7, [r0, #8]
   b410e:	f898 3000 	ldrb.w	r3, [r8]
   b4112:	4d48      	ldr	r5, [pc, #288]	; (b4234 <_ZN7Encoder16interruptHandlerEv+0x130>)
   b4114:	f3bf 8f5b 	dmb	ish
   b4118:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b411c:	4604      	mov	r4, r0
   b411e:	d109      	bne.n	b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4120:	4640      	mov	r0, r8
   b4122:	f7ff ffc9 	bl	b40b8 <__cxa_guard_acquire>
   b4126:	b128      	cbz	r0, b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4128:	f001 f816 	bl	b5158 <HAL_Pin_Map>
   b412c:	6028      	str	r0, [r5, #0]
   b412e:	4640      	mov	r0, r8
   b4130:	f7ff ffc7 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4134:	b2bf      	uxth	r7, r7
   b4136:	682b      	ldr	r3, [r5, #0]
   b4138:	013f      	lsls	r7, r7, #4
   b413a:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b413c:	f898 3000 	ldrb.w	r3, [r8]
   b4140:	f3bf 8f5b 	dmb	ish
   b4144:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4146:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b414a:	d409      	bmi.n	b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b414c:	483a      	ldr	r0, [pc, #232]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b414e:	f7ff ffb3 	bl	b40b8 <__cxa_guard_acquire>
   b4152:	b128      	cbz	r0, b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4154:	f001 f800 	bl	b5158 <HAL_Pin_Map>
   b4158:	6028      	str	r0, [r5, #0]
   b415a:	4837      	ldr	r0, [pc, #220]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b415c:	f7ff ffb1 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4160:	682b      	ldr	r3, [r5, #0]
   b4162:	443b      	add	r3, r7
   b4164:	785e      	ldrb	r6, [r3, #1]
   b4166:	f006 061f 	and.w	r6, r6, #31
   b416a:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b416e:	4630      	mov	r0, r6
   b4170:	f7ff ffaa 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4174:	4630      	mov	r0, r6
   b4176:	f7ff ffa7 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b417a:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b417c:	f898 3000 	ldrb.w	r3, [r8]
   b4180:	f3bf 8f5b 	dmb	ish
   b4184:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b4186:	b2c6      	uxtb	r6, r0
   b4188:	d409      	bmi.n	b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b418a:	482b      	ldr	r0, [pc, #172]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b418c:	f7ff ff94 	bl	b40b8 <__cxa_guard_acquire>
   b4190:	b128      	cbz	r0, b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4192:	f000 ffe1 	bl	b5158 <HAL_Pin_Map>
   b4196:	6028      	str	r0, [r5, #0]
   b4198:	4827      	ldr	r0, [pc, #156]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b419a:	f7ff ff92 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b419e:	b2bf      	uxth	r7, r7
   b41a0:	682b      	ldr	r3, [r5, #0]
   b41a2:	013f      	lsls	r7, r7, #4
   b41a4:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41a8:	f898 3000 	ldrb.w	r3, [r8]
   b41ac:	f3bf 8f5b 	dmb	ish
   b41b0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b2:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41b6:	d409      	bmi.n	b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41b8:	481f      	ldr	r0, [pc, #124]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41ba:	f7ff ff7d 	bl	b40b8 <__cxa_guard_acquire>
   b41be:	b128      	cbz	r0, b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41c0:	f000 ffca 	bl	b5158 <HAL_Pin_Map>
   b41c4:	6028      	str	r0, [r5, #0]
   b41c6:	481c      	ldr	r0, [pc, #112]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41c8:	f7ff ff7b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41cc:	682b      	ldr	r3, [r5, #0]
   b41ce:	441f      	add	r7, r3
   b41d0:	787d      	ldrb	r5, [r7, #1]
   b41d2:	f005 051f 	and.w	r5, r5, #31
   b41d6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41da:	4628      	mov	r0, r5
   b41dc:	f7ff ff74 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41e0:	4628      	mov	r0, r5
   b41e2:	f7ff ff71 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41e6:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41e8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41ea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41ee:	b10e      	cbz	r6, b41f4 <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41f0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41f4:	b108      	cbz	r0, b41fa <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41f6:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41fa:	089a      	lsrs	r2, r3, #2
   b41fc:	3b01      	subs	r3, #1
   b41fe:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b4200:	2b0d      	cmp	r3, #13
   b4202:	d80b      	bhi.n	b421c <_ZN7Encoder16interruptHandlerEv+0x118>
   b4204:	e8df f003 	tbb	[pc, r3]
   b4208:	0c0f0c07 	.word	0x0c0f0c07
   b420c:	0707120a 	.word	0x0707120a
   b4210:	0f0c0a12 	.word	0x0f0c0a12
   b4214:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b4216:	6963      	ldr	r3, [r4, #20]
   b4218:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b421a:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4220:	6963      	ldr	r3, [r4, #20]
   b4222:	3b01      	subs	r3, #1
   b4224:	e7f9      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b4226:	6963      	ldr	r3, [r4, #20]
   b4228:	3302      	adds	r3, #2
   b422a:	e7f6      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b422c:	6963      	ldr	r3, [r4, #20]
   b422e:	3b02      	subs	r3, #2
   b4230:	e7f3      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
   b4232:	bf00      	nop
   b4234:	2003e524 	.word	0x2003e524
   b4238:	2003e520 	.word	0x2003e520

000b423c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b423c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b423e:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4240:	685a      	ldr	r2, [r3, #4]
   b4242:	6899      	ldr	r1, [r3, #8]
   b4244:	681b      	ldr	r3, [r3, #0]
   b4246:	1054      	asrs	r4, r2, #1
   b4248:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b424c:	07d2      	lsls	r2, r2, #31
   b424e:	bf48      	it	mi
   b4250:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4252:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4256:	bf48      	it	mi
   b4258:	58d3      	ldrmi	r3, [r2, r3]
   b425a:	4718      	bx	r3

000b425c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b425c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b425e:	b538      	push	{r3, r4, r5, lr}
   b4260:	4604      	mov	r4, r0
	switch (__op)
   b4262:	d102      	bne.n	b426a <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4264:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4266:	6023      	str	r3, [r4, #0]
	}
   b4268:	e003      	b.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b426a:	2a02      	cmp	r2, #2
   b426c:	d003      	beq.n	b4276 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b426e:	2a03      	cmp	r2, #3
   b4270:	d00d      	beq.n	b428e <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4272:	2000      	movs	r0, #0
   b4274:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4276:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4278:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b427a:	f7ff ff0a 	bl	b4092 <_Znwj>
   b427e:	4603      	mov	r3, r0
   b4280:	2800      	cmp	r0, #0
   b4282:	d0f0      	beq.n	b4266 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b428c:	e7eb      	b.n	b4266 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b428e:	6800      	ldr	r0, [r0, #0]
   b4290:	2800      	cmp	r0, #0
   b4292:	d0ee      	beq.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4294:	210c      	movs	r1, #12
   b4296:	f7ff ff00 	bl	b409a <_ZdlPvj>
   b429a:	e7ea      	b.n	b4272 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b429c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b429e:	b08d      	sub	sp, #52	; 0x34
   b42a0:	ad02      	add	r5, sp, #8
   b42a2:	e885 0006 	stmia.w	r5, {r1, r2}
   b42a6:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42ac:	ac05      	add	r4, sp, #20
   b42ae:	e884 0005 	stmia.w	r4, {r0, r2}
   b42b2:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42b4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42b6:	2300      	movs	r3, #0
   b42b8:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42ba:	f7ff feea 	bl	b4092 <_Znwj>
   b42be:	4602      	mov	r2, r0
   b42c0:	b120      	cbz	r0, b42cc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42c6:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42ca:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42cc:	4b0b      	ldr	r3, [pc, #44]	; (b42fc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42ce:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42d0:	4b0b      	ldr	r3, [pc, #44]	; (b4300 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42d2:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b42d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42d8:	9208      	str	r2, [sp, #32]
   b42da:	9300      	str	r3, [sp, #0]
   b42dc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b42e0:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b42e4:	a908      	add	r1, sp, #32
   b42e6:	4630      	mov	r0, r6
   b42e8:	f001 fa1a 	bl	b5720 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b42ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b42ee:	b11b      	cbz	r3, b42f8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42f0:	a908      	add	r1, sp, #32
   b42f2:	2203      	movs	r2, #3
   b42f4:	4608      	mov	r0, r1
   b42f6:	4798      	blx	r3
}
   b42f8:	b00d      	add	sp, #52	; 0x34
   b42fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b42fc:	000b423d 	.word	0x000b423d
   b4300:	000b425d 	.word	0x000b425d

000b4304 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4304:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4306:	6984      	ldr	r4, [r0, #24]
   b4308:	4b0a      	ldr	r3, [pc, #40]	; (b4334 <_ZN9TCPClientD1Ev+0x30>)
   b430a:	6003      	str	r3, [r0, #0]
   b430c:	4605      	mov	r5, r0
   b430e:	b17c      	cbz	r4, b4330 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4310:	6863      	ldr	r3, [r4, #4]
   b4312:	3b01      	subs	r3, #1
   b4314:	6063      	str	r3, [r4, #4]
   b4316:	b95b      	cbnz	r3, b4330 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	4620      	mov	r0, r4
   b431c:	689b      	ldr	r3, [r3, #8]
   b431e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4320:	68a3      	ldr	r3, [r4, #8]
   b4322:	3b01      	subs	r3, #1
   b4324:	60a3      	str	r3, [r4, #8]
   b4326:	b91b      	cbnz	r3, b4330 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4328:	6823      	ldr	r3, [r4, #0]
   b432a:	4620      	mov	r0, r4
   b432c:	68db      	ldr	r3, [r3, #12]
   b432e:	4798      	blx	r3
   b4330:	4628      	mov	r0, r5
   b4332:	bd38      	pop	{r3, r4, r5, pc}
   b4334:	000b71d0 	.word	0x000b71d0

000b4338 <_ZN9TCPClientD0Ev>:
   b4338:	b510      	push	{r4, lr}
   b433a:	4604      	mov	r4, r0
   b433c:	f7ff ffe2 	bl	b4304 <_ZN9TCPClientD1Ev>
   b4340:	4620      	mov	r0, r4
   b4342:	211c      	movs	r1, #28
   b4344:	f7ff fea9 	bl	b409a <_ZdlPvj>
   b4348:	4620      	mov	r0, r4
   b434a:	bd10      	pop	{r4, pc}

000b434c <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4350:	460f      	mov	r7, r1
   b4352:	4604      	mov	r4, r0
   b4354:	4616      	mov	r6, r2
   b4356:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b4358:	2102      	movs	r1, #2
   b435a:	4638      	mov	r0, r7
   b435c:	f002 f8e2 	bl	b6524 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b4360:	2102      	movs	r1, #2
   b4362:	4630      	mov	r0, r6
   b4364:	f002 f8de 	bl	b6524 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4368:	f8df b158 	ldr.w	fp, [pc, #344]	; b44c4 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b436c:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b436e:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b4370:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b4374:	6023      	str	r3, [r4, #0]
		position = 0;
   b4376:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b437c:	f000 fed4 	bl	b5128 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b4380:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b4384:	f89b 3000 	ldrb.w	r3, [fp]
   b4388:	4d4d      	ldr	r5, [pc, #308]	; (b44c0 <_ZN7EncoderC1Ett+0x174>)
   b438a:	f3bf 8f5b 	dmb	ish
   b438e:	f013 0f01 	tst.w	r3, #1
   b4392:	d109      	bne.n	b43a8 <_ZN7EncoderC1Ett+0x5c>
   b4394:	4658      	mov	r0, fp
   b4396:	f7ff fe8f 	bl	b40b8 <__cxa_guard_acquire>
   b439a:	b128      	cbz	r0, b43a8 <_ZN7EncoderC1Ett+0x5c>
   b439c:	f000 fedc 	bl	b5158 <HAL_Pin_Map>
   b43a0:	6028      	str	r0, [r5, #0]
   b43a2:	4658      	mov	r0, fp
   b43a4:	f7ff fe8d 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43a8:	fa1f fa8a 	uxth.w	sl, sl
   b43ac:	682b      	ldr	r3, [r5, #0]
   b43ae:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b43b2:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43b6:	f89b 3000 	ldrb.w	r3, [fp]
   b43ba:	f3bf 8f5b 	dmb	ish
   b43be:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43c0:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43c4:	d409      	bmi.n	b43da <_ZN7EncoderC1Ett+0x8e>
   b43c6:	483f      	ldr	r0, [pc, #252]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b43c8:	f7ff fe76 	bl	b40b8 <__cxa_guard_acquire>
   b43cc:	b128      	cbz	r0, b43da <_ZN7EncoderC1Ett+0x8e>
   b43ce:	f000 fec3 	bl	b5158 <HAL_Pin_Map>
   b43d2:	6028      	str	r0, [r5, #0]
   b43d4:	483b      	ldr	r0, [pc, #236]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b43d6:	f7ff fe74 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43da:	682b      	ldr	r3, [r5, #0]
   b43dc:	4453      	add	r3, sl
   b43de:	f893 8001 	ldrb.w	r8, [r3, #1]
   b43e2:	f008 081f 	and.w	r8, r8, #31
   b43e6:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b43ea:	4640      	mov	r0, r8
   b43ec:	f7ff fe6c 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b43f0:	4640      	mov	r0, r8
   b43f2:	f7ff fe69 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b43f6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43fa:	f89b 3000 	ldrb.w	r3, [fp]
   b43fe:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b4402:	f1b0 0800 	subs.w	r8, r0, #0
   b4406:	bf18      	it	ne
   b4408:	f04f 0801 	movne.w	r8, #1
   b440c:	07da      	lsls	r2, r3, #31
   b440e:	d409      	bmi.n	b4424 <_ZN7EncoderC1Ett+0xd8>
   b4410:	482c      	ldr	r0, [pc, #176]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b4412:	f7ff fe51 	bl	b40b8 <__cxa_guard_acquire>
   b4416:	b128      	cbz	r0, b4424 <_ZN7EncoderC1Ett+0xd8>
   b4418:	f000 fe9e 	bl	b5158 <HAL_Pin_Map>
   b441c:	6028      	str	r0, [r5, #0]
   b441e:	4829      	ldr	r0, [pc, #164]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b4420:	f7ff fe4f 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4424:	fa1f fa8a 	uxth.w	sl, sl
   b4428:	682b      	ldr	r3, [r5, #0]
   b442a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b442e:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4432:	f89b 3000 	ldrb.w	r3, [fp]
   b4436:	f3bf 8f5b 	dmb	ish
   b443a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b443c:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4440:	d409      	bmi.n	b4456 <_ZN7EncoderC1Ett+0x10a>
   b4442:	4820      	ldr	r0, [pc, #128]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b4444:	f7ff fe38 	bl	b40b8 <__cxa_guard_acquire>
   b4448:	b128      	cbz	r0, b4456 <_ZN7EncoderC1Ett+0x10a>
   b444a:	f000 fe85 	bl	b5158 <HAL_Pin_Map>
   b444e:	6028      	str	r0, [r5, #0]
   b4450:	481c      	ldr	r0, [pc, #112]	; (b44c4 <_ZN7EncoderC1Ett+0x178>)
   b4452:	f7ff fe36 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4456:	682b      	ldr	r3, [r5, #0]
   b4458:	449a      	add	sl, r3
   b445a:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b445e:	f005 051f 	and.w	r5, r5, #31
   b4462:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b4466:	4628      	mov	r0, r5
   b4468:	f7ff fe2e 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b446c:	4628      	mov	r0, r5
   b446e:	f7ff fe2b 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b4472:	b108      	cbz	r0, b4478 <_ZN7EncoderC1Ett+0x12c>
   b4474:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b4478:	f8df 904c 	ldr.w	r9, [pc, #76]	; b44c8 <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b447c:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b4480:	2500      	movs	r5, #0
   b4482:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b4486:	4623      	mov	r3, r4
   b4488:	462a      	mov	r2, r5
   b448a:	4649      	mov	r1, r9
   b448c:	4638      	mov	r0, r7
   b448e:	e9cd 5800 	strd	r5, r8, [sp]
   b4492:	9502      	str	r5, [sp, #8]
   b4494:	f8cd 9010 	str.w	r9, [sp, #16]
   b4498:	9505      	str	r5, [sp, #20]
   b449a:	f7ff feff 	bl	b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b449e:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b44a2:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b44a6:	9500      	str	r5, [sp, #0]
   b44a8:	aa08      	add	r2, sp, #32
   b44aa:	4630      	mov	r0, r6
   b44ac:	e912 0006 	ldmdb	r2, {r1, r2}
   b44b0:	4623      	mov	r3, r4
   b44b2:	f7ff fef3 	bl	b429c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b44b6:	4620      	mov	r0, r4
   b44b8:	b009      	add	sp, #36	; 0x24
   b44ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b44be:	bf00      	nop
   b44c0:	2003e524 	.word	0x2003e524
   b44c4:	2003e520 	.word	0x2003e520
   b44c8:	000b4105 	.word	0x000b4105

000b44cc <setup>:


SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_MODE(MANUAL);

void setup() {
   b44cc:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b44ce:	f001 feeb 	bl	b62a8 <_Z16_fetch_usbserialv>
   b44d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b44d6:	f001 fedb 	bl	b6290 <_ZN9USBSerial5beginEl>
  // WiFi.on();
  // WiFi.setCredentials("IoTNetwork");
  // WiFi.connect();

  candlePixel.begin();
   b44da:	480c      	ldr	r0, [pc, #48]	; (b450c <setup+0x40>)
   b44dc:	f000 f8a1 	bl	b4622 <_ZN17Adafruit_NeoPixel5beginEv>
  candlePixel.show();
   b44e0:	480a      	ldr	r0, [pc, #40]	; (b450c <setup+0x40>)
   b44e2:	f000 f8d7 	bl	b4694 <_ZN17Adafruit_NeoPixel4showEv>

  pinMode(ENCSWITCH, INPUT_PULLUP);
   b44e6:	2102      	movs	r1, #2
   b44e8:	2006      	movs	r0, #6
   b44ea:	f002 f81b 	bl	b6524 <pinMode>
  pinMode(ENCLEDG, OUTPUT);
   b44ee:	2101      	movs	r1, #1
   b44f0:	2005      	movs	r0, #5
   b44f2:	f002 f817 	bl	b6524 <pinMode>
  pinMode(ENCLEDR, OUTPUT);
   b44f6:	2101      	movs	r1, #1
   b44f8:	2004      	movs	r0, #4
   b44fa:	f002 f813 	bl	b6524 <pinMode>
  pinMode(PIXELPIN, OUTPUT);

}
   b44fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(PIXELPIN, OUTPUT);
   b4502:	2101      	movs	r1, #1
   b4504:	2008      	movs	r0, #8
   b4506:	f002 b80d 	b.w	b6524 <pinMode>
   b450a:	bf00      	nop
   b450c:	2003e58c 	.word	0x2003e58c

000b4510 <loop>:

void loop() {
  
  //run ouija no matter what
  if(switchState = false){
   b4510:	4b01      	ldr	r3, [pc, #4]	; (b4518 <loop+0x8>)
   b4512:	2200      	movs	r2, #0
   b4514:	701a      	strb	r2, [r3, #0]
  //   Serial.printf("%s\n", ouijaBoard[ouijaChar]);
  //   ouijaToggle = false;
  // }
 

}
   b4516:	4770      	bx	lr
   b4518:	2003e620 	.word	0x2003e620

000b451c <_GLOBAL__sub_I_hueOn>:
    candlePixel.setBrightness(0);
    candlePixel.show();

  }

   b451c:	b508      	push	{r3, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b451e:	491f      	ldr	r1, [pc, #124]	; (b459c <_GLOBAL__sub_I_hueOn+0x80>)
   b4520:	481f      	ldr	r0, [pc, #124]	; (b45a0 <_GLOBAL__sub_I_hueOn+0x84>)
   b4522:	f001 fb15 	bl	b5b50 <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4526:	4a1f      	ldr	r2, [pc, #124]	; (b45a4 <_GLOBAL__sub_I_hueOn+0x88>)
   b4528:	4b1f      	ldr	r3, [pc, #124]	; (b45a8 <_GLOBAL__sub_I_hueOn+0x8c>)
   b452a:	6812      	ldr	r2, [r2, #0]
   b452c:	601a      	str	r2, [r3, #0]
   b452e:	4a1f      	ldr	r2, [pc, #124]	; (b45ac <_GLOBAL__sub_I_hueOn+0x90>)

TCPClient HueClient;
   b4530:	481f      	ldr	r0, [pc, #124]	; (b45b0 <_GLOBAL__sub_I_hueOn+0x94>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4532:	6812      	ldr	r2, [r2, #0]
   b4534:	605a      	str	r2, [r3, #4]
   b4536:	4a1f      	ldr	r2, [pc, #124]	; (b45b4 <_GLOBAL__sub_I_hueOn+0x98>)
   b4538:	6812      	ldr	r2, [r2, #0]
   b453a:	609a      	str	r2, [r3, #8]
   b453c:	4a1e      	ldr	r2, [pc, #120]	; (b45b8 <_GLOBAL__sub_I_hueOn+0x9c>)
   b453e:	6812      	ldr	r2, [r2, #0]
   b4540:	60da      	str	r2, [r3, #12]
   b4542:	4a1e      	ldr	r2, [pc, #120]	; (b45bc <_GLOBAL__sub_I_hueOn+0xa0>)
   b4544:	6812      	ldr	r2, [r2, #0]
   b4546:	611a      	str	r2, [r3, #16]
   b4548:	4a1d      	ldr	r2, [pc, #116]	; (b45c0 <_GLOBAL__sub_I_hueOn+0xa4>)
   b454a:	6812      	ldr	r2, [r2, #0]
   b454c:	615a      	str	r2, [r3, #20]
   b454e:	4a1d      	ldr	r2, [pc, #116]	; (b45c4 <_GLOBAL__sub_I_hueOn+0xa8>)
   b4550:	6812      	ldr	r2, [r2, #0]
   b4552:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4554:	f001 fdda 	bl	b610c <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4558:	481b      	ldr	r0, [pc, #108]	; (b45c8 <_GLOBAL__sub_I_hueOn+0xac>)
   b455a:	f001 fdd7 	bl	b610c <_ZN9TCPClientC1Ev>
Encoder spiritEncoder(ENCPINB, ENCPINA);
   b455e:	2210      	movs	r2, #16
   b4560:	210f      	movs	r1, #15
   b4562:	481a      	ldr	r0, [pc, #104]	; (b45cc <_GLOBAL__sub_I_hueOn+0xb0>)
   b4564:	f7ff fef2 	bl	b434c <_ZN7EncoderC1Ett>
Adafruit_NeoPixel candlePixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4568:	2302      	movs	r3, #2
   b456a:	4619      	mov	r1, r3
   b456c:	2208      	movs	r2, #8
   b456e:	4818      	ldr	r0, [pc, #96]	; (b45d0 <_GLOBAL__sub_I_hueOn+0xb4>)
   b4570:	f000 f87e 	bl	b4670 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_BMP280 spiritBmp;
   b4574:	4817      	ldr	r0, [pc, #92]	; (b45d4 <_GLOBAL__sub_I_hueOn+0xb8>)
   b4576:	f000 f833 	bl	b45e0 <_ZN15Adafruit_BMP280C1Ev>
Adafruit_SSD1306 spiritDisplay(OLED_RESET);
   b457a:	4817      	ldr	r0, [pc, #92]	; (b45d8 <_GLOBAL__sub_I_hueOn+0xbc>)
   b457c:	2104      	movs	r1, #4
   b457e:	f000 fdad 	bl	b50dc <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4582:	4b16      	ldr	r3, [pc, #88]	; (b45dc <_GLOBAL__sub_I_hueOn+0xc0>)
   b4584:	2200      	movs	r2, #0
   b4586:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b458a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b458e:	609a      	str	r2, [r3, #8]
   b4590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4594:	2002      	movs	r0, #2
   b4596:	f000 bf3f 	b.w	b5418 <set_system_mode>
   b459a:	bf00      	nop
   b459c:	000b6a94 	.word	0x000b6a94
   b45a0:	2003e5a0 	.word	0x2003e5a0
   b45a4:	2003e560 	.word	0x2003e560
   b45a8:	2003e544 	.word	0x2003e544
   b45ac:	2003e098 	.word	0x2003e098
   b45b0:	2003e528 	.word	0x2003e528
   b45b4:	2003e0a0 	.word	0x2003e0a0
   b45b8:	2003e090 	.word	0x2003e090
   b45bc:	2003e08c 	.word	0x2003e08c
   b45c0:	2003e094 	.word	0x2003e094
   b45c4:	2003e09c 	.word	0x2003e09c
   b45c8:	2003e570 	.word	0x2003e570
   b45cc:	2003e608 	.word	0x2003e608
   b45d0:	2003e58c 	.word	0x2003e58c
   b45d4:	2003e5b0 	.word	0x2003e5b0
   b45d8:	2003e5e4 	.word	0x2003e5e4
   b45dc:	2003e564 	.word	0x2003e564

000b45e0 <_ZN15Adafruit_BMP280C1Ev>:
 PRIVATE FUNCTIONS
 ***************************************************************************/


Adafruit_BMP280::Adafruit_BMP280()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b45e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b45e4:	60c3      	str	r3, [r0, #12]
{ }
   b45e6:	4770      	bx	lr

000b45e8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b45e8:	b538      	push	{r3, r4, r5, lr}
   b45ea:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b45ec:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b45ee:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b45f0:	b108      	cbz	r0, b45f6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b45f2:	f000 ff9d 	bl	b5530 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b45f6:	79a3      	ldrb	r3, [r4, #6]
   b45f8:	2b06      	cmp	r3, #6
   b45fa:	bf0c      	ite	eq
   b45fc:	2004      	moveq	r0, #4
   b45fe:	2003      	movne	r0, #3
   b4600:	fb10 f005 	smulbb	r0, r0, r5
   b4604:	b280      	uxth	r0, r0
   b4606:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4608:	f000 ff8a 	bl	b5520 <malloc>
   b460c:	60e0      	str	r0, [r4, #12]
   b460e:	b128      	cbz	r0, b461c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4610:	88a2      	ldrh	r2, [r4, #4]
   b4612:	2100      	movs	r1, #0
   b4614:	f002 f95c 	bl	b68d0 <memset>
    numLEDs = n;
   b4618:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b461a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b461c:	80a0      	strh	r0, [r4, #4]
   b461e:	8060      	strh	r0, [r4, #2]
}
   b4620:	e7fb      	b.n	b461a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4622 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4622:	b510      	push	{r4, lr}
   b4624:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4626:	2101      	movs	r1, #1
   b4628:	79c0      	ldrb	r0, [r0, #7]
   b462a:	f001 ff7b 	bl	b6524 <pinMode>
  digitalWrite(pin, LOW);
   b462e:	79e0      	ldrb	r0, [r4, #7]
   b4630:	2100      	movs	r1, #0
   b4632:	f001 ff88 	bl	b6546 <digitalWrite>
  begun = true;
   b4636:	2301      	movs	r3, #1
   b4638:	7023      	strb	r3, [r4, #0]
}
   b463a:	bd10      	pop	{r4, pc}

000b463c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b463c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b463e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4640:	4605      	mov	r5, r0
   b4642:	460c      	mov	r4, r1
    if (begun) {
   b4644:	b11b      	cbz	r3, b464e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4646:	79c0      	ldrb	r0, [r0, #7]
   b4648:	2100      	movs	r1, #0
   b464a:	f001 ff6b 	bl	b6524 <pinMode>
    }
    pin = p;
    if (begun) {
   b464e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4650:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4652:	b15b      	cbz	r3, b466c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4654:	b2a0      	uxth	r0, r4
   b4656:	2101      	movs	r1, #1
   b4658:	9001      	str	r0, [sp, #4]
   b465a:	f001 ff63 	bl	b6524 <pinMode>
        digitalWrite(p, LOW);
   b465e:	9801      	ldr	r0, [sp, #4]
   b4660:	2100      	movs	r1, #0
    }
}
   b4662:	b003      	add	sp, #12
   b4664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4668:	f001 bf6d 	b.w	b6546 <digitalWrite>
}
   b466c:	b003      	add	sp, #12
   b466e:	bd30      	pop	{r4, r5, pc}

000b4670 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4670:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4672:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4674:	4604      	mov	r4, r0
   b4676:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4678:	7183      	strb	r3, [r0, #6]
   b467a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b467e:	7005      	strb	r5, [r0, #0]
   b4680:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4682:	f7ff ffb1 	bl	b45e8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4686:	4620      	mov	r0, r4
   b4688:	4631      	mov	r1, r6
   b468a:	f7ff ffd7 	bl	b463c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b468e:	4620      	mov	r0, r4
   b4690:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4694 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4694:	68c3      	ldr	r3, [r0, #12]
   b4696:	2b00      	cmp	r3, #0
   b4698:	f000 81a4 	beq.w	b49e4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46a0:	7983      	ldrb	r3, [r0, #6]
   b46a2:	3b02      	subs	r3, #2
   b46a4:	b2db      	uxtb	r3, r3
   b46a6:	2b04      	cmp	r3, #4
   b46a8:	bf9c      	itt	ls
   b46aa:	4abf      	ldrls	r2, [pc, #764]	; (b49a8 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b46ac:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b46b0:	b085      	sub	sp, #20
   b46b2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b46b4:	bf88      	it	hi
   b46b6:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b46b8:	f000 fd3e 	bl	b5138 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b46bc:	692b      	ldr	r3, [r5, #16]
   b46be:	1ac0      	subs	r0, r0, r3
   b46c0:	42a0      	cmp	r0, r4
   b46c2:	d3f9      	bcc.n	b46b8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b46c4:	4cb9      	ldr	r4, [pc, #740]	; (b49ac <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b46c6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b46c8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46cc:	b91b      	cbnz	r3, b46d6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ce:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b46d2:	2b00      	cmp	r3, #0
   b46d4:	db7e      	blt.n	b47d4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b46d6:	4cb6      	ldr	r4, [pc, #728]	; (b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b46d8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46dc:	b923      	cbnz	r3, b46e8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46de:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b46e2:	2b00      	cmp	r3, #0
   b46e4:	f2c0 816e 	blt.w	b49c4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b46e8:	4cb2      	ldr	r4, [pc, #712]	; (b49b4 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b46ea:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ee:	2b00      	cmp	r3, #0
   b46f0:	f000 8144 	beq.w	b497c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b46f4:	79eb      	ldrb	r3, [r5, #7]
   b46f6:	4ab0      	ldr	r2, [pc, #704]	; (b49b8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b46f8:	4cb0      	ldr	r4, [pc, #704]	; (b49bc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b46fa:	6812      	ldr	r2, [r2, #0]
   b46fc:	0119      	lsls	r1, r3, #4
   b46fe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4702:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4704:	49ae      	ldr	r1, [pc, #696]	; (b49c0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4706:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4708:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b470c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4710:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4714:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4716:	f003 031f 	and.w	r3, r3, #31
   b471a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b471e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4720:	433a      	orrs	r2, r7
   b4722:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4724:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4726:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b472a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b472e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4730:	2900      	cmp	r1, #0
   b4732:	d044      	beq.n	b47be <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4734:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4738:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b473a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b473e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4742:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4744:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4746:	6863      	ldr	r3, [r4, #4]
   b4748:	1a9b      	subs	r3, r3, r2
   b474a:	2b46      	cmp	r3, #70	; 0x46
   b474c:	d9fb      	bls.n	b4746 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b474e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4750:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4754:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4758:	ea43 0307 	orr.w	r3, r3, r7
   b475c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4760:	d02f      	beq.n	b47c2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4762:	6863      	ldr	r3, [r4, #4]
   b4764:	1a9b      	subs	r3, r3, r2
   b4766:	2b28      	cmp	r3, #40	; 0x28
   b4768:	d9fb      	bls.n	b4762 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b476a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b476e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4770:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4774:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4778:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b477c:	d1e3      	bne.n	b4746 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b477e:	88ab      	ldrh	r3, [r5, #4]
   b4780:	f10e 0e01 	add.w	lr, lr, #1
   b4784:	fa1f fe8e 	uxth.w	lr, lr
   b4788:	4573      	cmp	r3, lr
   b478a:	d8d8      	bhi.n	b473e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b478c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4790:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4794:	6863      	ldr	r3, [r4, #4]
   b4796:	1a9b      	subs	r3, r3, r2
   b4798:	2b46      	cmp	r3, #70	; 0x46
   b479a:	d9fb      	bls.n	b4794 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b479c:	6863      	ldr	r3, [r4, #4]
   b479e:	eba3 0909 	sub.w	r9, r3, r9
   b47a2:	4589      	cmp	r9, r1
   b47a4:	f0c0 80e4 	bcc.w	b4970 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b47a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b47ac:	f000 fcbc 	bl	b5128 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b47b0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b47b2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b47b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b47ba:	2900      	cmp	r1, #0
   b47bc:	d1ba      	bne.n	b4734 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b47be:	460a      	mov	r2, r1
   b47c0:	e7e8      	b.n	b4794 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b47c2:	6863      	ldr	r3, [r4, #4]
   b47c4:	1a9b      	subs	r3, r3, r2
   b47c6:	2b11      	cmp	r3, #17
   b47c8:	d8cf      	bhi.n	b476a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b47ca:	6863      	ldr	r3, [r4, #4]
   b47cc:	1a9b      	subs	r3, r3, r2
   b47ce:	2b11      	cmp	r3, #17
   b47d0:	d9f7      	bls.n	b47c2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b47d2:	e7ca      	b.n	b476a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47d4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47d8:	2b00      	cmp	r3, #0
   b47da:	f6bf af7c 	bge.w	b46d6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47de:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47e2:	2b00      	cmp	r3, #0
   b47e4:	f6bf af77 	bge.w	b46d6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b47e8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47ec:	2b00      	cmp	r3, #0
   b47ee:	f6bf af72 	bge.w	b46d6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b47f2:	0136      	lsls	r6, r6, #4
   b47f4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b47f6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b47f8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b47fa:	f000 fe91 	bl	b5520 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b47fe:	2800      	cmp	r0, #0
   b4800:	f43f af78 	beq.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4804:	88ab      	ldrh	r3, [r5, #4]
   b4806:	2b00      	cmp	r3, #0
   b4808:	f000 80ed 	beq.w	b49e6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b480c:	68ea      	ldr	r2, [r5, #12]
   b480e:	3b01      	subs	r3, #1
   b4810:	fa12 f783 	uxtah	r7, r2, r3
   b4814:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4818:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b481a:	f248 0206 	movw	r2, #32774	; 0x8006
   b481e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4822:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4826:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b482a:	bf0c      	ite	eq
   b482c:	4693      	moveq	fp, r2
   b482e:	468b      	movne	fp, r1
   b4830:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4834:	bf0c      	ite	eq
   b4836:	4616      	moveq	r6, r2
   b4838:	460e      	movne	r6, r1
   b483a:	f01c 0f20 	tst.w	ip, #32
   b483e:	bf0c      	ite	eq
   b4840:	4690      	moveq	r8, r2
   b4842:	4688      	movne	r8, r1
        pos++;
   b4844:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4848:	f8cd 8008 	str.w	r8, [sp, #8]
   b484c:	9601      	str	r6, [sp, #4]
        pos++;
   b484e:	f103 0802 	add.w	r8, r3, #2
   b4852:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4856:	9e01      	ldr	r6, [sp, #4]
   b4858:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b485c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4860:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4864:	9e02      	ldr	r6, [sp, #8]
   b4866:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b486a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b486e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4872:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4876:	bf0c      	ite	eq
   b4878:	4693      	moveq	fp, r2
   b487a:	468b      	movne	fp, r1
   b487c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4880:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4884:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4888:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b488c:	bf0c      	ite	eq
   b488e:	4693      	moveq	fp, r2
   b4890:	468b      	movne	fp, r1
   b4892:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4896:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b489a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b489e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b48a2:	bf0c      	ite	eq
   b48a4:	4693      	moveq	fp, r2
   b48a6:	468b      	movne	fp, r1
   b48a8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b48ac:	f103 0a08 	add.w	sl, r3, #8
   b48b0:	f103 0806 	add.w	r8, r3, #6
   b48b4:	3307      	adds	r3, #7
   b48b6:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b48b8:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b48bc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b48c0:	bf0c      	ite	eq
   b48c2:	4693      	moveq	fp, r2
   b48c4:	468b      	movne	fp, r1
        pos++;
   b48c6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b48ca:	f01c 0f01 	tst.w	ip, #1
   b48ce:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b48d2:	bf15      	itete	ne
   b48d4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b48d8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b48dc:	fa1f f38a 	uxthne.w	r3, sl
   b48e0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b48e4:	4577      	cmp	r7, lr
   b48e6:	d19c      	bne.n	b4822 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48e8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48ea:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48ec:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48ee:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48f0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48f2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48f4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b48f8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b48fa:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b48fc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48fe:	4b2e      	ldr	r3, [pc, #184]	; (b49b8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4900:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4902:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4904:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4906:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4908:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b490c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4910:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4914:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4918:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b491c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4920:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4924:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4928:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b492c:	79eb      	ldrb	r3, [r5, #7]
   b492e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4932:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4934:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4936:	5cfe      	ldrb	r6, [r7, r3]
   b4938:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b493c:	f003 031f 	and.w	r3, r3, #31
   b4940:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4944:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4948:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b494c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4950:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4952:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4956:	2b00      	cmp	r3, #0
   b4958:	d0fb      	beq.n	b4952 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b495a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b495c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4960:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4964:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4968:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b496c:	f000 fde0 	bl	b5530 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4970:	f000 fbe2 	bl	b5138 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4974:	6128      	str	r0, [r5, #16]
}
   b4976:	b005      	add	sp, #20
   b4978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b497c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4980:	2b00      	cmp	r3, #0
   b4982:	f6bf aeb7 	bge.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4986:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b498a:	2b00      	cmp	r3, #0
   b498c:	f6bf aeb2 	bge.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4990:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4994:	2b00      	cmp	r3, #0
   b4996:	f6bf aead 	bge.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b499a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b499e:	2b00      	cmp	r3, #0
   b49a0:	f6bf aea8 	bge.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b49a4:	e725      	b.n	b47f2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b49a6:	bf00      	nop
   b49a8:	000b6b54 	.word	0x000b6b54
   b49ac:	4001c000 	.word	0x4001c000
   b49b0:	40021000 	.word	0x40021000
   b49b4:	40022000 	.word	0x40022000
   b49b8:	2003e630 	.word	0x2003e630
   b49bc:	e0001000 	.word	0xe0001000
   b49c0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49c4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49c8:	2b00      	cmp	r3, #0
   b49ca:	f6bf ae8d 	bge.w	b46e8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49ce:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49d2:	2b00      	cmp	r3, #0
   b49d4:	f6bf ae88 	bge.w	b46e8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b49d8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49dc:	2b00      	cmp	r3, #0
   b49de:	f6bf ae83 	bge.w	b46e8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b49e2:	e706      	b.n	b47f2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b49e4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b49e6:	2304      	movs	r3, #4
   b49e8:	2102      	movs	r1, #2
   b49ea:	e783      	b.n	b48f4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b49ec <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b49ec:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b49ee:	f000 fbb3 	bl	b5158 <HAL_Pin_Map>
   b49f2:	4b01      	ldr	r3, [pc, #4]	; (b49f8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b49f4:	6018      	str	r0, [r3, #0]
}
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	2003e630 	.word	0x2003e630

000b49fc <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b49fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a00:	b085      	sub	sp, #20
   b4a02:	461f      	mov	r7, r3
   b4a04:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4a08:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4a0c:	eba8 0902 	sub.w	r9, r8, r2
   b4a10:	eba7 0a01 	sub.w	sl, r7, r1
   b4a14:	f1b9 0f00 	cmp.w	r9, #0
   b4a18:	bfb8      	it	lt
   b4a1a:	f1c9 0900 	rsblt	r9, r9, #0
   b4a1e:	f1ba 0f00 	cmp.w	sl, #0
   b4a22:	bfb8      	it	lt
   b4a24:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4a28:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4a2a:	4683      	mov	fp, r0
   b4a2c:	460c      	mov	r4, r1
   b4a2e:	4615      	mov	r5, r2
  if (steep) {
   b4a30:	dd04      	ble.n	b4a3c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4a32:	463a      	mov	r2, r7
    swap(x0, y0);
   b4a34:	462c      	mov	r4, r5
    swap(x1, y1);
   b4a36:	4647      	mov	r7, r8
    swap(x0, y0);
   b4a38:	460d      	mov	r5, r1
    swap(x1, y1);
   b4a3a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4a3c:	42bc      	cmp	r4, r7
   b4a3e:	dd05      	ble.n	b4a4c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4a40:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4a42:	4645      	mov	r5, r8
   b4a44:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4a46:	4622      	mov	r2, r4
   b4a48:	463c      	mov	r4, r7
   b4a4a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4a4c:	1b3e      	subs	r6, r7, r4
   b4a4e:	b2b2      	uxth	r2, r6
   b4a50:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4a52:	eba8 0205 	sub.w	r2, r8, r5
   b4a56:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4a5a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4a5e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4a62:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4a66:	4545      	cmp	r5, r8
   b4a68:	bfb4      	ite	lt
   b4a6a:	2201      	movlt	r2, #1
   b4a6c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4a70:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4a72:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4a74:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4a76:	42bc      	cmp	r4, r7
   b4a78:	dc1c      	bgt.n	b4ab4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4a7a:	f8db 2000 	ldr.w	r2, [fp]
   b4a7e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4a80:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4a82:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4a86:	bfc7      	ittee	gt
   b4a88:	4629      	movgt	r1, r5
   b4a8a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4a8c:	462a      	movle	r2, r5
   b4a8e:	4621      	movle	r1, r4
   b4a90:	4658      	mov	r0, fp
   b4a92:	47c0      	blx	r8
    }
    err -= dy;
   b4a94:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4a96:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4a98:	1ab6      	subs	r6, r6, r2
   b4a9a:	b2b1      	uxth	r1, r6
   b4a9c:	b236      	sxth	r6, r6
    if (err < 0) {
   b4a9e:	2e00      	cmp	r6, #0
   b4aa0:	da05      	bge.n	b4aae <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4aa2:	9a02      	ldr	r2, [sp, #8]
   b4aa4:	4415      	add	r5, r2
      err += dx;
   b4aa6:	9a00      	ldr	r2, [sp, #0]
   b4aa8:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4aaa:	b22d      	sxth	r5, r5
      err += dx;
   b4aac:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4aae:	3401      	adds	r4, #1
   b4ab0:	b224      	sxth	r4, r4
   b4ab2:	e7e0      	b.n	b4a76 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4ab4:	b005      	add	sp, #20
   b4ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4aba <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4aba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4abe:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4ac2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4ac4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4ac8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4acc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4ace:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4ad0:	4616      	mov	r6, r2
   b4ad2:	468a      	mov	sl, r1
   b4ad4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4ad6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4ad8:	6823      	ldr	r3, [r4, #0]
   b4ada:	f8cd 8000 	str.w	r8, [sp]
   b4ade:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4ae2:	4432      	add	r2, r6
   b4ae4:	69df      	ldr	r7, [r3, #28]
   b4ae6:	4651      	mov	r1, sl
   b4ae8:	462b      	mov	r3, r5
   b4aea:	4620      	mov	r0, r4
   b4aec:	b212      	sxth	r2, r2
   b4aee:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4af0:	6823      	ldr	r3, [r4, #0]
   b4af2:	f8cd 8000 	str.w	r8, [sp]
   b4af6:	699f      	ldr	r7, [r3, #24]
   b4af8:	4632      	mov	r2, r6
   b4afa:	464b      	mov	r3, r9
   b4afc:	4651      	mov	r1, sl
   b4afe:	4620      	mov	r0, r4
   b4b00:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4b02:	1e6b      	subs	r3, r5, #1
   b4b04:	eb03 010a 	add.w	r1, r3, sl
   b4b08:	6823      	ldr	r3, [r4, #0]
   b4b0a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4b0e:	699d      	ldr	r5, [r3, #24]
   b4b10:	4632      	mov	r2, r6
   b4b12:	464b      	mov	r3, r9
   b4b14:	b209      	sxth	r1, r1
   b4b16:	4620      	mov	r0, r4
   b4b18:	46ac      	mov	ip, r5
}
   b4b1a:	b002      	add	sp, #8
   b4b1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4b20:	4760      	bx	ip

000b4b22 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4b24:	3b01      	subs	r3, #1
   b4b26:	4413      	add	r3, r2
   b4b28:	6804      	ldr	r4, [r0, #0]
   b4b2a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4b2e:	9501      	str	r5, [sp, #4]
   b4b30:	b21b      	sxth	r3, r3
   b4b32:	9300      	str	r3, [sp, #0]
   b4b34:	6964      	ldr	r4, [r4, #20]
   b4b36:	460b      	mov	r3, r1
   b4b38:	47a0      	blx	r4
}
   b4b3a:	b003      	add	sp, #12
   b4b3c:	bd30      	pop	{r4, r5, pc}

000b4b3e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4b40:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4b44:	6804      	ldr	r4, [r0, #0]
   b4b46:	e9cd 2500 	strd	r2, r5, [sp]
   b4b4a:	3b01      	subs	r3, #1
   b4b4c:	440b      	add	r3, r1
   b4b4e:	6964      	ldr	r4, [r4, #20]
   b4b50:	b21b      	sxth	r3, r3
   b4b52:	47a0      	blx	r4
}
   b4b54:	b003      	add	sp, #12
   b4b56:	bd30      	pop	{r4, r5, pc}

000b4b58 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4b58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4b5c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4b60:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4b64:	4605      	mov	r5, r0
   b4b66:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4b68:	460c      	mov	r4, r1
   b4b6a:	18ce      	adds	r6, r1, r3
   b4b6c:	42b4      	cmp	r4, r6
   b4b6e:	da0b      	bge.n	b4b88 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4b70:	682b      	ldr	r3, [r5, #0]
   b4b72:	f8cd 8000 	str.w	r8, [sp]
   b4b76:	699f      	ldr	r7, [r3, #24]
   b4b78:	4621      	mov	r1, r4
   b4b7a:	464b      	mov	r3, r9
   b4b7c:	4652      	mov	r2, sl
   b4b7e:	4628      	mov	r0, r5
   b4b80:	3401      	adds	r4, #1
   b4b82:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4b84:	b224      	sxth	r4, r4
   b4b86:	e7f1      	b.n	b4b6c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4b88:	b002      	add	sp, #8
   b4b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b8e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4b8e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4b90:	6802      	ldr	r2, [r0, #0]
   b4b92:	9101      	str	r1, [sp, #4]
   b4b94:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4b98:	9100      	str	r1, [sp, #0]
   b4b9a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4b9c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4ba0:	2200      	movs	r2, #0
   b4ba2:	4611      	mov	r1, r2
   b4ba4:	47a0      	blx	r4
}
   b4ba6:	b002      	add	sp, #8
   b4ba8:	bd10      	pop	{r4, pc}

000b4baa <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4baa:	4770      	bx	lr

000b4bac <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4bac:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4bae:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4bb0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4bb6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4bb8:	4d05      	ldr	r5, [pc, #20]	; (b4bd0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4bba:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4bbc:	2201      	movs	r2, #1
   b4bbe:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4bc0:	6005      	str	r5, [r0, #0]
   b4bc2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4bc4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4bc6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4bc8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4bca:	7682      	strb	r2, [r0, #26]
}
   b4bcc:	bd30      	pop	{r4, r5, pc}
   b4bce:	bf00      	nop
   b4bd0:	000b706c 	.word	0x000b706c

000b4bd4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bd8:	ed2d 8b02 	vpush	{d8}
   b4bdc:	b08d      	sub	sp, #52	; 0x34
   b4bde:	4607      	mov	r7, r0
   b4be0:	9104      	str	r1, [sp, #16]
   b4be2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4be6:	9105      	str	r1, [sp, #20]
   b4be8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4bec:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4bee:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4bf2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4bf4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4bf8:	4281      	cmp	r1, r0
   b4bfa:	dd52      	ble.n	b4ca2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4bfc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4c00:	4291      	cmp	r1, r2
   b4c02:	dd4e      	ble.n	b4ca2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4c04:	2106      	movs	r1, #6
   b4c06:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4c0a:	2c00      	cmp	r4, #0
   b4c0c:	dd49      	ble.n	b4ca2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4c0e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4c12:	2c00      	cmp	r4, #0
   b4c14:	dd45      	ble.n	b4ca2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4c16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4c1a:	930b      	str	r3, [sp, #44]	; 0x2c
   b4c1c:	b293      	uxth	r3, r2
   b4c1e:	9307      	str	r3, [sp, #28]
   b4c20:	3308      	adds	r3, #8
   b4c22:	b29b      	uxth	r3, r3
   b4c24:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4c26:	2400      	movs	r4, #0
   b4c28:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4c2a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4c2c:	bf1c      	itt	ne
   b4c2e:	4b2c      	ldrne	r3, [pc, #176]	; (b4ce0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4c30:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4c32:	9e07      	ldr	r6, [sp, #28]
   b4c34:	bf16      	itet	ne
   b4c36:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4c38:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4c3a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4c3c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c3e:	9a04      	ldr	r2, [sp, #16]
   b4c40:	b2ab      	uxth	r3, r5
   b4c42:	930a      	str	r3, [sp, #40]	; 0x28
   b4c44:	fb04 f305 	mul.w	r3, r4, r5
   b4c48:	fa13 f382 	uxtah	r3, r3, r2
   b4c4c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4c4e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c52:	ee08 3a10 	vmov	s16, r3
   b4c56:	46b0      	mov	r8, r6
   b4c58:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4c5c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4c60:	9b03      	ldr	r3, [sp, #12]
   b4c62:	07db      	lsls	r3, r3, #31
   b4c64:	d52f      	bpl.n	b4cc6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4c66:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c68:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c6a:	d11f      	bne.n	b4cac <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4c6c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c70:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4c72:	b232      	sxth	r2, r6
   b4c74:	4651      	mov	r1, sl
   b4c76:	4638      	mov	r0, r7
   b4c78:	47d8      	blx	fp
      line >>= 1;
   b4c7a:	9b03      	ldr	r3, [sp, #12]
   b4c7c:	085b      	lsrs	r3, r3, #1
   b4c7e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4c82:	3601      	adds	r6, #1
   b4c84:	4498      	add	r8, r3
   b4c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4c88:	b2b6      	uxth	r6, r6
   b4c8a:	42b3      	cmp	r3, r6
   b4c8c:	fa1f f888 	uxth.w	r8, r8
   b4c90:	d1e6      	bne.n	b4c60 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4c92:	9b08      	ldr	r3, [sp, #32]
   b4c94:	3b01      	subs	r3, #1
   b4c96:	3401      	adds	r4, #1
   b4c98:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4c9c:	b264      	sxtb	r4, r4
   b4c9e:	9308      	str	r3, [sp, #32]
   b4ca0:	d1c3      	bne.n	b4c2a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b4ca2:	b00d      	add	sp, #52	; 0x34
   b4ca4:	ecbd 8b02 	vpop	{d8}
   b4ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4cac:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4cae:	e9cd 9200 	strd	r9, r2, [sp]
   b4cb2:	ee18 1a10 	vmov	r1, s16
   b4cb6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4cba:	fa0f f288 	sxth.w	r2, r8
   b4cbe:	464b      	mov	r3, r9
   b4cc0:	4638      	mov	r0, r7
   b4cc2:	47d8      	blx	fp
   b4cc4:	e7d9      	b.n	b4c7a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4cc6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4cca:	4293      	cmp	r3, r2
   b4ccc:	d0d5      	beq.n	b4c7a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4cce:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4cd0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4cd2:	d103      	bne.n	b4cdc <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4cd4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4cd8:	9b06      	ldr	r3, [sp, #24]
   b4cda:	e7ca      	b.n	b4c72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4cdc:	9a06      	ldr	r2, [sp, #24]
   b4cde:	e7e6      	b.n	b4cae <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4ce0:	000b6b68 	.word	0x000b6b68

000b4ce4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4ce4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4ce6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4ce8:	b085      	sub	sp, #20
   b4cea:	4604      	mov	r4, r0
  if (c == '\n') {
   b4cec:	d107      	bne.n	b4cfe <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4cee:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4cf0:	8a63      	ldrh	r3, [r4, #18]
   b4cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4cf6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4cf8:	2300      	movs	r3, #0
   b4cfa:	8223      	strh	r3, [r4, #16]
   b4cfc:	e021      	b.n	b4d42 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4cfe:	290d      	cmp	r1, #13
   b4d00:	d01f      	beq.n	b4d42 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4d02:	7e03      	ldrb	r3, [r0, #24]
   b4d04:	9302      	str	r3, [sp, #8]
   b4d06:	8ac3      	ldrh	r3, [r0, #22]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	8a83      	ldrh	r3, [r0, #20]
   b4d0c:	9300      	str	r3, [sp, #0]
   b4d0e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4d12:	460b      	mov	r3, r1
   b4d14:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4d18:	f7ff ff5c 	bl	b4bd4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4d1c:	7e20      	ldrb	r0, [r4, #24]
   b4d1e:	8a23      	ldrh	r3, [r4, #16]
   b4d20:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4d24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4d28:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4d2a:	b21b      	sxth	r3, r3
   b4d2c:	4602      	mov	r2, r0
   b4d2e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4d30:	b139      	cbz	r1, b4d42 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4d32:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4d36:	f06f 0505 	mvn.w	r5, #5
   b4d3a:	fb05 1100 	mla	r1, r5, r0, r1
   b4d3e:	428b      	cmp	r3, r1
   b4d40:	dcd6      	bgt.n	b4cf0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4d42:	2001      	movs	r0, #1
   b4d44:	b005      	add	sp, #20
   b4d46:	bd30      	pop	{r4, r5, pc}

000b4d48 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4d48:	7e40      	ldrb	r0, [r0, #25]
   b4d4a:	4770      	bx	lr

000b4d4c <_ZN12Adafruit_GFX5widthEv>:
}
   b4d4c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4d50:	4770      	bx	lr

000b4d52 <_ZN12Adafruit_GFX6heightEv>:
}
   b4d52:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4d56:	4770      	bx	lr

000b4d58 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4d5a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4d5c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4d60:	2d02      	cmp	r5, #2
   b4d62:	d069      	beq.n	b4e38 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4d64:	2d03      	cmp	r5, #3
   b4d66:	f000 8099 	beq.w	b4e9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4d6a:	2d01      	cmp	r5, #1
   b4d6c:	d16c      	bne.n	b4e48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4d6e:	8905      	ldrh	r5, [r0, #8]
   b4d70:	43d2      	mvns	r2, r2
   b4d72:	442a      	add	r2, r5
   b4d74:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4d76:	2a00      	cmp	r2, #0
   b4d78:	db5d      	blt.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d7a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4d7e:	4295      	cmp	r5, r2
   b4d80:	dd59      	ble.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4d82:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4d84:	bfbe      	ittt	lt
   b4d86:	185b      	addlt	r3, r3, r1
   b4d88:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4d8a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4d8c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4d90:	18cd      	adds	r5, r1, r3
   b4d92:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4d94:	bfc4      	itt	gt
   b4d96:	1a43      	subgt	r3, r0, r1
   b4d98:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4d9a:	2b00      	cmp	r3, #0
   b4d9c:	dd4b      	ble.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4d9e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4da2:	f8df c120 	ldr.w	ip, [pc, #288]	; b4ec4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4da6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4daa:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4dae:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4db0:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4db4:	d01a      	beq.n	b4dec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4db6:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4dba:	4e40      	ldr	r6, [pc, #256]	; (b4ebc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4dbc:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4dbe:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4dc0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4dc2:	bf3f      	itttt	cc
   b4dc4:	eba5 0e03 	subcc.w	lr, r5, r3
   b4dc8:	26ff      	movcc	r6, #255	; 0xff
   b4dca:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4dce:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4dd0:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4dd4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4dd6:	bf0c      	ite	eq
   b4dd8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4dda:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4ddc:	42ab      	cmp	r3, r5
   b4dde:	f80c 6002 	strb.w	r6, [ip, r2]
   b4de2:	d328      	bcc.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4de4:	3908      	subs	r1, #8
   b4de6:	440b      	add	r3, r1
   b4de8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4dea:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4dec:	2b07      	cmp	r3, #7
   b4dee:	d919      	bls.n	b4e24 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4df0:	2c01      	cmp	r4, #1
   b4df2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4df6:	bf18      	it	ne
   b4df8:	2500      	movne	r5, #0
   b4dfa:	b2ed      	uxtb	r5, r5
   b4dfc:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e00:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4e02:	3a08      	subs	r2, #8
   b4e04:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e06:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e08:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e0c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e10:	d8f7      	bhi.n	b4e02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4e12:	f1a3 0208 	sub.w	r2, r3, #8
   b4e16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e1a:	3201      	adds	r2, #1
   b4e1c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e20:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4e24:	b13b      	cbz	r3, b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4e26:	4a26      	ldr	r2, [pc, #152]	; (b4ec0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4e28:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4e2a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e2c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e2e:	bf0c      	ite	eq
   b4e30:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4e32:	4393      	bicne	r3, r2
   b4e34:	7003      	strb	r3, [r0, #0]
}
   b4e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e38:	8945      	ldrh	r5, [r0, #10]
   b4e3a:	43d2      	mvns	r2, r2
   b4e3c:	442a      	add	r2, r5
      x -= (w-1);
   b4e3e:	18cd      	adds	r5, r1, r3
   b4e40:	8901      	ldrh	r1, [r0, #8]
   b4e42:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4e44:	b212      	sxth	r2, r2
      x -= (w-1);
   b4e46:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4e48:	2a00      	cmp	r2, #0
   b4e4a:	dbf4      	blt.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4e4c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4e50:	4295      	cmp	r5, r2
   b4e52:	ddf0      	ble.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4e54:	2900      	cmp	r1, #0
    w += x;
   b4e56:	bfbe      	ittt	lt
   b4e58:	185b      	addlt	r3, r3, r1
   b4e5a:	b21b      	sxthlt	r3, r3
    x = 0;
   b4e5c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4e5e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4e62:	18ce      	adds	r6, r1, r3
   b4e64:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4e66:	bfc4      	itt	gt
   b4e68:	1a6b      	subgt	r3, r5, r1
   b4e6a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4e6c:	2b00      	cmp	r3, #0
   b4e6e:	dde2      	ble.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4e70:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4e72:	2580      	movs	r5, #128	; 0x80
   b4e74:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4e78:	4812      	ldr	r0, [pc, #72]	; (b4ec4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4e7a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4e7c:	f002 0007 	and.w	r0, r2, #7
   b4e80:	2201      	movs	r2, #1
   b4e82:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4e84:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4e86:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4e88:	440b      	add	r3, r1
   b4e8a:	d10c      	bne.n	b4ea6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4e8c:	428b      	cmp	r3, r1
   b4e8e:	d0d2      	beq.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4e90:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4e94:	4310      	orrs	r0, r2
   b4e96:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4e9a:	e7f7      	b.n	b4e8c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4e9c:	18cd      	adds	r5, r1, r3
   b4e9e:	8941      	ldrh	r1, [r0, #10]
   b4ea0:	1b49      	subs	r1, r1, r5
   b4ea2:	b209      	sxth	r1, r1
      break;
   b4ea4:	e767      	b.n	b4d76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4ea6:	43d2      	mvns	r2, r2
   b4ea8:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4eaa:	428b      	cmp	r3, r1
   b4eac:	d0c3      	beq.n	b4e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4eae:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4eb2:	4010      	ands	r0, r2
   b4eb4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4eb8:	e7f7      	b.n	b4eaa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4eba:	bf00      	nop
   b4ebc:	2003e0ac 	.word	0x2003e0ac
   b4ec0:	2003e0a4 	.word	0x2003e0a4
   b4ec4:	2003e0b4 	.word	0x2003e0b4

000b4ec8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4eca:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4ecc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4ed0:	2d02      	cmp	r5, #2
   b4ed2:	d034      	beq.n	b4f3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4ed4:	2d03      	cmp	r5, #3
   b4ed6:	f000 809b 	beq.w	b5010 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4eda:	2d01      	cmp	r5, #1
   b4edc:	d137      	bne.n	b4f4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4ede:	18d5      	adds	r5, r2, r3
   b4ee0:	8902      	ldrh	r2, [r0, #8]
   b4ee2:	1b52      	subs	r2, r2, r5
   b4ee4:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4ee6:	2900      	cmp	r1, #0
   b4ee8:	f2c0 8091 	blt.w	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4eec:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4ef0:	428d      	cmp	r5, r1
   b4ef2:	f340 808c 	ble.w	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4ef6:	2a00      	cmp	r2, #0
    w += x;
   b4ef8:	bfbe      	ittt	lt
   b4efa:	189b      	addlt	r3, r3, r2
   b4efc:	b21b      	sxthlt	r3, r3
    x = 0;
   b4efe:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4f00:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4f04:	18d6      	adds	r6, r2, r3
   b4f06:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4f08:	bfc4      	itt	gt
   b4f0a:	1aab      	subgt	r3, r5, r2
   b4f0c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4f0e:	2b00      	cmp	r3, #0
   b4f10:	dd7d      	ble.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4f12:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4f14:	2580      	movs	r5, #128	; 0x80
   b4f16:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4f1a:	4845      	ldr	r0, [pc, #276]	; (b5030 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4f1c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4f1e:	f001 0007 	and.w	r0, r1, #7
   b4f22:	2101      	movs	r1, #1
   b4f24:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4f26:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4f28:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4f2a:	4413      	add	r3, r2
   b4f2c:	d175      	bne.n	b501a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4f2e:	429a      	cmp	r2, r3
   b4f30:	d06d      	beq.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f32:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4f36:	4308      	orrs	r0, r1
   b4f38:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4f3c:	e7f7      	b.n	b4f2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4f3e:	8905      	ldrh	r5, [r0, #8]
   b4f40:	43c9      	mvns	r1, r1
   b4f42:	4429      	add	r1, r5
      y -= (h-1);
   b4f44:	18d5      	adds	r5, r2, r3
   b4f46:	8942      	ldrh	r2, [r0, #10]
   b4f48:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4f4a:	b209      	sxth	r1, r1
      y -= (h-1);
   b4f4c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4f4e:	2900      	cmp	r1, #0
   b4f50:	db5d      	blt.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f52:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4f56:	428d      	cmp	r5, r1
   b4f58:	dd59      	ble.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4f5a:	2a00      	cmp	r2, #0
    __h += __y;
   b4f5c:	bfbe      	ittt	lt
   b4f5e:	189b      	addlt	r3, r3, r2
   b4f60:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4f62:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4f64:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4f68:	18d5      	adds	r5, r2, r3
   b4f6a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4f6c:	bfc4      	itt	gt
   b4f6e:	1a83      	subgt	r3, r0, r2
   b4f70:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4f72:	2b00      	cmp	r3, #0
   b4f74:	dd4b      	ble.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4f76:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4f7a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5030 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4f7e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4f82:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4f86:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4f88:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4f8c:	d01a      	beq.n	b4fc4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4f8e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4f92:	4e28      	ldr	r6, [pc, #160]	; (b5034 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4f94:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4f96:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4f98:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4f9a:	bf3f      	itttt	cc
   b4f9c:	eba5 0e03 	subcc.w	lr, r5, r3
   b4fa0:	26ff      	movcc	r6, #255	; 0xff
   b4fa2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4fa6:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4fa8:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4fac:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4fae:	bf0c      	ite	eq
   b4fb0:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4fb2:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4fb4:	42ab      	cmp	r3, r5
   b4fb6:	f80c 6001 	strb.w	r6, [ip, r1]
   b4fba:	d328      	bcc.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4fbc:	3a08      	subs	r2, #8
   b4fbe:	4413      	add	r3, r2
   b4fc0:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4fc2:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4fc4:	2b07      	cmp	r3, #7
   b4fc6:	d919      	bls.n	b4ffc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4fc8:	2c01      	cmp	r4, #1
   b4fca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4fce:	bf18      	it	ne
   b4fd0:	2500      	movne	r5, #0
   b4fd2:	b2ed      	uxtb	r5, r5
   b4fd4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4fd8:	461a      	mov	r2, r3
      h -= 8;
   b4fda:	3a08      	subs	r2, #8
   b4fdc:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4fde:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4fe0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4fe4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4fe8:	d8f7      	bhi.n	b4fda <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4fea:	f1a3 0208 	sub.w	r2, r3, #8
   b4fee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4ff2:	3201      	adds	r2, #1
   b4ff4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4ff8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4ffc:	b13b      	cbz	r3, b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4ffe:	4a0e      	ldr	r2, [pc, #56]	; (b5038 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5000:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5002:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5004:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5006:	bf0c      	ite	eq
   b5008:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b500a:	4393      	bicne	r3, r2
   b500c:	7003      	strb	r3, [r0, #0]
}
   b500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5010:	8945      	ldrh	r5, [r0, #10]
   b5012:	43c9      	mvns	r1, r1
   b5014:	4429      	add	r1, r5
   b5016:	b209      	sxth	r1, r1
      break;
   b5018:	e765      	b.n	b4ee6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b501a:	43c9      	mvns	r1, r1
   b501c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b501e:	429a      	cmp	r2, r3
   b5020:	d0f5      	beq.n	b500e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5022:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5026:	4008      	ands	r0, r1
   b5028:	f802 0c01 	strb.w	r0, [r2, #-1]
   b502c:	e7f7      	b.n	b501e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b502e:	bf00      	nop
   b5030:	2003e0b4 	.word	0x2003e0b4
   b5034:	2003e0ac 	.word	0x2003e0ac
   b5038:	2003e0a4 	.word	0x2003e0a4

000b503c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b503c:	4770      	bx	lr
	...

000b5040 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5042:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5044:	4606      	mov	r6, r0
   b5046:	4614      	mov	r4, r2
   b5048:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b504a:	db2d      	blt.n	b50a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b504c:	f7ff fe7e 	bl	b4d4c <_ZN12Adafruit_GFX5widthEv>
   b5050:	42a8      	cmp	r0, r5
   b5052:	dd29      	ble.n	b50a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5054:	2c00      	cmp	r4, #0
   b5056:	db27      	blt.n	b50a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5058:	4630      	mov	r0, r6
   b505a:	f7ff fe7a 	bl	b4d52 <_ZN12Adafruit_GFX6heightEv>
   b505e:	42a0      	cmp	r0, r4
   b5060:	dd22      	ble.n	b50a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5062:	4630      	mov	r0, r6
   b5064:	f7ff fe70 	bl	b4d48 <_ZN12Adafruit_GFX11getRotationEv>
   b5068:	2802      	cmp	r0, #2
   b506a:	d01e      	beq.n	b50aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b506c:	2803      	cmp	r0, #3
   b506e:	d025      	beq.n	b50bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5070:	2801      	cmp	r0, #1
   b5072:	d104      	bne.n	b507e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5074:	8933      	ldrh	r3, [r6, #8]
   b5076:	43e2      	mvns	r2, r4
   b5078:	441a      	add	r2, r3
    break;
   b507a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b507c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b507e:	2c00      	cmp	r4, #0
   b5080:	4622      	mov	r2, r4
   b5082:	bfb8      	it	lt
   b5084:	1de2      	addlt	r2, r4, #7
   b5086:	10d2      	asrs	r2, r2, #3
   b5088:	2180      	movs	r1, #128	; 0x80
   b508a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b508e:	490e      	ldr	r1, [pc, #56]	; (b50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5090:	2201      	movs	r2, #1
   b5092:	f004 0407 	and.w	r4, r4, #7
   b5096:	574b      	ldrsb	r3, [r1, r5]
   b5098:	fa02 f404 	lsl.w	r4, r2, r4
   b509c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b509e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b50a0:	bf0c      	ite	eq
   b50a2:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b50a4:	43a3      	bicne	r3, r4
   b50a6:	554b      	strb	r3, [r1, r5]
}
   b50a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b50aa:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b50ac:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b50ae:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b50b0:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b50b2:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b50b4:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b50b6:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b50b8:	b224      	sxth	r4, r4
    break;
   b50ba:	e7e0      	b.n	b507e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b50bc:	8973      	ldrh	r3, [r6, #10]
   b50be:	3b01      	subs	r3, #1
   b50c0:	1b5b      	subs	r3, r3, r5
    break;
   b50c2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b50c4:	b21c      	sxth	r4, r3
    break;
   b50c6:	e7da      	b.n	b507e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b50c8:	2003e0b4 	.word	0x2003e0b4

000b50cc <_ZN16Adafruit_SSD1306D0Ev>:
   b50cc:	b510      	push	{r4, lr}
   b50ce:	2124      	movs	r1, #36	; 0x24
   b50d0:	4604      	mov	r4, r0
   b50d2:	f7fe ffe2 	bl	b409a <_ZdlPvj>
   b50d6:	4620      	mov	r0, r4
   b50d8:	bd10      	pop	{r4, pc}
	...

000b50dc <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b50dc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b50de:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b50e0:	4604      	mov	r4, r0
   b50e2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b50e4:	2180      	movs	r1, #128	; 0x80
   b50e6:	f7ff fd61 	bl	b4bac <_ZN12Adafruit_GFXC1Ess>
   b50ea:	4b06      	ldr	r3, [pc, #24]	; (b5104 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b50ec:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b50ee:	23ff      	movs	r3, #255	; 0xff
   b50f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b50f4:	7763      	strb	r3, [r4, #29]
   b50f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b50fa:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b50fc:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5100:	4620      	mov	r0, r4
   b5102:	bd38      	pop	{r3, r4, r5, pc}
   b5104:	000b70a4 	.word	0x000b70a4

000b5108 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <os_mutex_recursive_create+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030248 	.word	0x00030248

000b5118 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <HAL_RNG_GetRandomNumber+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	685b      	ldr	r3, [r3, #4]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	00030218 	.word	0x00030218

000b5128 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <HAL_Delay_Microseconds+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	68db      	ldr	r3, [r3, #12]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030218 	.word	0x00030218

000b5138 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	691b      	ldr	r3, [r3, #16]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030218 	.word	0x00030218

000b5148 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	695b      	ldr	r3, [r3, #20]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030218 	.word	0x00030218

000b5158 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <HAL_Pin_Map+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	681b      	ldr	r3, [r3, #0]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	0003022c 	.word	0x0003022c

000b5168 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <HAL_Pin_Mode+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	689b      	ldr	r3, [r3, #8]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003022c 	.word	0x0003022c

000b5178 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <HAL_Get_Pin_Mode+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	68db      	ldr	r3, [r3, #12]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003022c 	.word	0x0003022c

000b5188 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <HAL_GPIO_Write+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	691b      	ldr	r3, [r3, #16]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003022c 	.word	0x0003022c

000b5198 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <HAL_Interrupts_Attach+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	699b      	ldr	r3, [r3, #24]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	0003022c 	.word	0x0003022c

000b51a8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <HAL_Interrupts_Detach+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	69db      	ldr	r3, [r3, #28]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	0003022c 	.word	0x0003022c

000b51b8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_i2c_write+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6a1b      	ldr	r3, [r3, #32]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030228 	.word	0x00030228

000b51c8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <hal_i2c_available+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030228 	.word	0x00030228

000b51d8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <hal_i2c_read+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030228 	.word	0x00030228

000b51e8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_i2c_peek+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	00030228 	.word	0x00030228

000b51f8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <hal_i2c_flush+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030228 	.word	0x00030228

000b5208 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <hal_i2c_is_enabled+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030228 	.word	0x00030228

000b5218 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <hal_i2c_init+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030228 	.word	0x00030228

000b5228 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <if_index_to_name+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	695b      	ldr	r3, [r3, #20]
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	0003026c 	.word	0x0003026c

000b5238 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <inet_inet_ntop+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	695b      	ldr	r3, [r3, #20]
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030264 	.word	0x00030264

000b5248 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <inet_htonl+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6a1b      	ldr	r3, [r3, #32]
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030264 	.word	0x00030264

000b5258 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <inet_htons+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030264 	.word	0x00030264

000b5268 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <netdb_freeaddrinfo+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	689b      	ldr	r3, [r3, #8]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030268 	.word	0x00030268

000b5278 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <netdb_getaddrinfo+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	68db      	ldr	r3, [r3, #12]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030268 	.word	0x00030268

000b5288 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <sock_setsockopt+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	699b      	ldr	r3, [r3, #24]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	00030238 	.word	0x00030238

000b5298 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <sock_close+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	69db      	ldr	r3, [r3, #28]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	00030238 	.word	0x00030238

000b52a8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <sock_connect+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6a1b      	ldr	r3, [r3, #32]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	00030238 	.word	0x00030238

000b52b8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <sock_recv+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	00030238 	.word	0x00030238

000b52c8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <sock_send+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	00030238 	.word	0x00030238

000b52d8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <sock_socket+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	00030238 	.word	0x00030238

000b52e8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <hal_spi_init+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	69db      	ldr	r3, [r3, #28]
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030230 	.word	0x00030230

000b52f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <hal_spi_is_enabled+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6a1b      	ldr	r3, [r3, #32]
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030230 	.word	0x00030230

000b5308 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <hal_usart_write+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	68db      	ldr	r3, [r3, #12]
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	0003023c 	.word	0x0003023c

000b5318 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <hal_usart_available+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	691b      	ldr	r3, [r3, #16]
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	0003023c 	.word	0x0003023c

000b5328 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <hal_usart_read+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	695b      	ldr	r3, [r3, #20]
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	0003023c 	.word	0x0003023c

000b5338 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <hal_usart_peek+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	699b      	ldr	r3, [r3, #24]
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	0003023c 	.word	0x0003023c

000b5348 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <hal_usart_flush+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	69db      	ldr	r3, [r3, #28]
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	0003023c 	.word	0x0003023c

000b5358 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <hal_usart_is_enabled+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	6a1b      	ldr	r3, [r3, #32]
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	0003023c 	.word	0x0003023c

000b5368 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <hal_usart_available_data_for_write+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	0003023c 	.word	0x0003023c

000b5378 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <hal_usart_init_ex+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	0003023c 	.word	0x0003023c

000b5388 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5388:	b508      	push	{r3, lr}
   b538a:	4b02      	ldr	r3, [pc, #8]	; (b5394 <HAL_USB_USART_Init+0xc>)
   b538c:	681b      	ldr	r3, [r3, #0]
   b538e:	681b      	ldr	r3, [r3, #0]
   b5390:	9301      	str	r3, [sp, #4]
   b5392:	bd08      	pop	{r3, pc}
   b5394:	0003024c 	.word	0x0003024c

000b5398 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5398:	b508      	push	{r3, lr}
   b539a:	4b02      	ldr	r3, [pc, #8]	; (b53a4 <HAL_USB_USART_Begin+0xc>)
   b539c:	681b      	ldr	r3, [r3, #0]
   b539e:	685b      	ldr	r3, [r3, #4]
   b53a0:	9301      	str	r3, [sp, #4]
   b53a2:	bd08      	pop	{r3, pc}
   b53a4:	0003024c 	.word	0x0003024c

000b53a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b53a8:	b508      	push	{r3, lr}
   b53aa:	4b02      	ldr	r3, [pc, #8]	; (b53b4 <HAL_USB_USART_Available_Data+0xc>)
   b53ac:	681b      	ldr	r3, [r3, #0]
   b53ae:	691b      	ldr	r3, [r3, #16]
   b53b0:	9301      	str	r3, [sp, #4]
   b53b2:	bd08      	pop	{r3, pc}
   b53b4:	0003024c 	.word	0x0003024c

000b53b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b53b8:	b508      	push	{r3, lr}
   b53ba:	4b02      	ldr	r3, [pc, #8]	; (b53c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b53bc:	681b      	ldr	r3, [r3, #0]
   b53be:	695b      	ldr	r3, [r3, #20]
   b53c0:	9301      	str	r3, [sp, #4]
   b53c2:	bd08      	pop	{r3, pc}
   b53c4:	0003024c 	.word	0x0003024c

000b53c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b53c8:	b508      	push	{r3, lr}
   b53ca:	4b02      	ldr	r3, [pc, #8]	; (b53d4 <HAL_USB_USART_Receive_Data+0xc>)
   b53cc:	681b      	ldr	r3, [r3, #0]
   b53ce:	699b      	ldr	r3, [r3, #24]
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	bd08      	pop	{r3, pc}
   b53d4:	0003024c 	.word	0x0003024c

000b53d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b53d8:	b508      	push	{r3, lr}
   b53da:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <HAL_USB_USART_Send_Data+0xc>)
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	69db      	ldr	r3, [r3, #28]
   b53e0:	9301      	str	r3, [sp, #4]
   b53e2:	bd08      	pop	{r3, pc}
   b53e4:	0003024c 	.word	0x0003024c

000b53e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <HAL_USB_USART_Flush_Data+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	6a1b      	ldr	r3, [r3, #32]
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	0003024c 	.word	0x0003024c

000b53f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b02      	ldr	r3, [pc, #8]	; (b5404 <panic_+0xc>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	bd08      	pop	{r3, pc}
   b5404:	00030260 	.word	0x00030260

000b5408 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5408:	b508      	push	{r3, lr}
   b540a:	4b02      	ldr	r3, [pc, #8]	; (b5414 <log_message+0xc>)
   b540c:	681b      	ldr	r3, [r3, #0]
   b540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5410:	9301      	str	r3, [sp, #4]
   b5412:	bd08      	pop	{r3, pc}
   b5414:	00030260 	.word	0x00030260

000b5418 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <set_system_mode+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	685b      	ldr	r3, [r3, #4]
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	00030220 	.word	0x00030220

000b5428 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b03      	ldr	r3, [pc, #12]	; (b5438 <system_ctrl_set_app_request_handler+0x10>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5432:	9301      	str	r3, [sp, #4]
   b5434:	bd08      	pop	{r3, pc}
   b5436:	0000      	.short	0x0000
   b5438:	00030220 	.word	0x00030220

000b543c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b543c:	b508      	push	{r3, lr}
   b543e:	4b03      	ldr	r3, [pc, #12]	; (b544c <system_ctrl_set_result+0x10>)
   b5440:	681b      	ldr	r3, [r3, #0]
   b5442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5446:	9301      	str	r3, [sp, #4]
   b5448:	bd08      	pop	{r3, pc}
   b544a:	0000      	.short	0x0000
   b544c:	00030220 	.word	0x00030220

000b5450 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030244 	.word	0x00030244

000b5460 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <network_connect+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	685b      	ldr	r3, [r3, #4]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030240 	.word	0x00030240

000b5470 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <network_connecting+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	689b      	ldr	r3, [r3, #8]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030240 	.word	0x00030240

000b5480 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <network_disconnect+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	68db      	ldr	r3, [r3, #12]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030240 	.word	0x00030240

000b5490 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <network_ready+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	691b      	ldr	r3, [r3, #16]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030240 	.word	0x00030240

000b54a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <network_on+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	695b      	ldr	r3, [r3, #20]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	00030240 	.word	0x00030240

000b54b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <network_off+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	699b      	ldr	r3, [r3, #24]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	00030240 	.word	0x00030240

000b54c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <network_listen+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	69db      	ldr	r3, [r3, #28]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030240 	.word	0x00030240

000b54d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <network_listening+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	6a1b      	ldr	r3, [r3, #32]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030240 	.word	0x00030240

000b54e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <network_set_listen_timeout+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030240 	.word	0x00030240

000b54f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <network_get_listen_timeout+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030240 	.word	0x00030240

000b5500 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <network_is_on+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030240 	.word	0x00030240

000b5510 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <network_is_off+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030240 	.word	0x00030240

000b5520 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <malloc+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	681b      	ldr	r3, [r3, #0]
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	0003021c 	.word	0x0003021c

000b5530 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <free+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	685b      	ldr	r3, [r3, #4]
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	0003021c 	.word	0x0003021c

000b5540 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <realloc+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	689b      	ldr	r3, [r3, #8]
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	0003021c 	.word	0x0003021c

000b5550 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <abort+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	0003021c 	.word	0x0003021c

000b5560 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <__errno+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	0003021c 	.word	0x0003021c

000b5570 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <__assert_func+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	0003021c 	.word	0x0003021c

000b5580 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <newlib_impure_ptr_callback+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	0003021c 	.word	0x0003021c

000b5590 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5590:	b510      	push	{r4, lr}
      if (_M_manager)
   b5592:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5594:	4604      	mov	r4, r0
      if (_M_manager)
   b5596:	b113      	cbz	r3, b559e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5598:	2203      	movs	r2, #3
   b559a:	4601      	mov	r1, r0
   b559c:	4798      	blx	r3
    }
   b559e:	4620      	mov	r0, r4
   b55a0:	bd10      	pop	{r4, pc}
	...

000b55a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b55a4:	4802      	ldr	r0, [pc, #8]	; (b55b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b55a6:	2300      	movs	r3, #0
   b55a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b55aa:	f7ff bdad 	b.w	b5108 <os_mutex_recursive_create>
   b55ae:	bf00      	nop
   b55b0:	2003e634 	.word	0x2003e634

000b55b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55b4:	2200      	movs	r2, #0
   b55b6:	6840      	ldr	r0, [r0, #4]
   b55b8:	4611      	mov	r1, r2
   b55ba:	f7ff bf89 	b.w	b54d0 <network_listening>

000b55be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55be:	2200      	movs	r2, #0
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	4611      	mov	r1, r2
   b55c4:	f7ff bf94 	b.w	b54f0 <network_get_listen_timeout>

000b55c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55c8:	6840      	ldr	r0, [r0, #4]
   b55ca:	2200      	movs	r2, #0
   b55cc:	f7ff bf88 	b.w	b54e0 <network_set_listen_timeout>

000b55d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b55d0:	6840      	ldr	r0, [r0, #4]
   b55d2:	2200      	movs	r2, #0
   b55d4:	f081 0101 	eor.w	r1, r1, #1
   b55d8:	f7ff bf72 	b.w	b54c0 <network_listen>

000b55dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b55dc:	2300      	movs	r3, #0
   b55de:	6840      	ldr	r0, [r0, #4]
   b55e0:	461a      	mov	r2, r3
   b55e2:	4619      	mov	r1, r3
   b55e4:	f7ff bf64 	b.w	b54b0 <network_off>

000b55e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b55e8:	2300      	movs	r3, #0
   b55ea:	6840      	ldr	r0, [r0, #4]
   b55ec:	461a      	mov	r2, r3
   b55ee:	4619      	mov	r1, r3
   b55f0:	f7ff bf56 	b.w	b54a0 <network_on>

000b55f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b55f4:	2200      	movs	r2, #0
   b55f6:	6840      	ldr	r0, [r0, #4]
   b55f8:	4611      	mov	r1, r2
   b55fa:	f7ff bf49 	b.w	b5490 <network_ready>

000b55fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55fe:	2200      	movs	r2, #0
   b5600:	6840      	ldr	r0, [r0, #4]
   b5602:	4611      	mov	r1, r2
   b5604:	f7ff bf34 	b.w	b5470 <network_connecting>

000b5608 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5608:	6840      	ldr	r0, [r0, #4]
   b560a:	2200      	movs	r2, #0
   b560c:	2102      	movs	r1, #2
   b560e:	f7ff bf37 	b.w	b5480 <network_disconnect>

000b5612 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5612:	2300      	movs	r3, #0
   b5614:	6840      	ldr	r0, [r0, #4]
   b5616:	461a      	mov	r2, r3
   b5618:	f7ff bf22 	b.w	b5460 <network_connect>

000b561c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b561c:	4b02      	ldr	r3, [pc, #8]	; (b5628 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b561e:	2203      	movs	r2, #3
   b5620:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5622:	4a02      	ldr	r2, [pc, #8]	; (b562c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5624:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5626:	4770      	bx	lr
   b5628:	2003e638 	.word	0x2003e638
   b562c:	000b70e4 	.word	0x000b70e4

000b5630 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5630:	4770      	bx	lr

000b5632 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5634:	4606      	mov	r6, r0
   b5636:	4615      	mov	r5, r2
   b5638:	460c      	mov	r4, r1
   b563a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b563c:	42bc      	cmp	r4, r7
   b563e:	d006      	beq.n	b564e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5640:	6833      	ldr	r3, [r6, #0]
   b5642:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5646:	689b      	ldr	r3, [r3, #8]
   b5648:	4630      	mov	r0, r6
   b564a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b564c:	e7f6      	b.n	b563c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b564e:	4628      	mov	r0, r5
   b5650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5652 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5652:	7c00      	ldrb	r0, [r0, #16]
   b5654:	2200      	movs	r2, #0
   b5656:	f7ff bdaf 	b.w	b51b8 <hal_i2c_write>

000b565a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b565a:	7c00      	ldrb	r0, [r0, #16]
   b565c:	2100      	movs	r1, #0
   b565e:	f7ff bdb3 	b.w	b51c8 <hal_i2c_available>

000b5662 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5662:	7c00      	ldrb	r0, [r0, #16]
   b5664:	2100      	movs	r1, #0
   b5666:	f7ff bdb7 	b.w	b51d8 <hal_i2c_read>

000b566a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b566a:	7c00      	ldrb	r0, [r0, #16]
   b566c:	2100      	movs	r1, #0
   b566e:	f7ff bdbb 	b.w	b51e8 <hal_i2c_peek>

000b5672 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5672:	7c00      	ldrb	r0, [r0, #16]
   b5674:	2100      	movs	r1, #0
   b5676:	f7ff bdbf 	b.w	b51f8 <hal_i2c_flush>

000b567a <_ZN7TwoWireD0Ev>:
   b567a:	b510      	push	{r4, lr}
   b567c:	2114      	movs	r1, #20
   b567e:	4604      	mov	r4, r0
   b5680:	f7fe fd0b 	bl	b409a <_ZdlPvj>
   b5684:	4620      	mov	r0, r4
   b5686:	bd10      	pop	{r4, pc}

000b5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5688:	b538      	push	{r3, r4, r5, lr}
   b568a:	4604      	mov	r4, r0
   b568c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b568e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5692:	2200      	movs	r2, #0
   b5694:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5698:	4b09      	ldr	r3, [pc, #36]	; (b56c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b569a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b569c:	4608      	mov	r0, r1
   b569e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b56a0:	4629      	mov	r1, r5
   b56a2:	f7ff fdb9 	bl	b5218 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56a6:	30bf      	adds	r0, #191	; 0xbf
   b56a8:	d108      	bne.n	b56bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b56aa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56ac:	07db      	lsls	r3, r3, #31
   b56ae:	d505      	bpl.n	b56bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b56b0:	6868      	ldr	r0, [r5, #4]
   b56b2:	f7ff ff3d 	bl	b5530 <free>
    free(conf.tx_buffer);
   b56b6:	68e8      	ldr	r0, [r5, #12]
   b56b8:	f7ff ff3a 	bl	b5530 <free>
}
   b56bc:	4620      	mov	r0, r4
   b56be:	bd38      	pop	{r3, r4, r5, pc}
   b56c0:	000b7120 	.word	0x000b7120

000b56c4 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b56c4:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b56c6:	b510      	push	{r4, lr}
   b56c8:	b90a      	cbnz	r2, b56ce <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b56ca:	f000 ffd7 	bl	b667c <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b56ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b56d2:	68c3      	ldr	r3, [r0, #12]
   b56d4:	4718      	bx	r3
	...

000b56d8 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b56d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b56da:	4f10      	ldr	r7, [pc, #64]	; (b571c <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b56dc:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b56e0:	4606      	mov	r6, r0
   b56e2:	460d      	mov	r5, r1
    delete handlers[pin];
   b56e4:	b134      	cbz	r4, b56f4 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b56e6:	4620      	mov	r0, r4
   b56e8:	f7ff ff52 	bl	b5590 <_ZNSt14_Function_baseD1Ev>
   b56ec:	2110      	movs	r1, #16
   b56ee:	4620      	mov	r0, r4
   b56f0:	f7fe fcd3 	bl	b409a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b56f4:	2010      	movs	r0, #16
   b56f6:	f7fe fccc 	bl	b4092 <_Znwj>
   b56fa:	4604      	mov	r4, r0
   b56fc:	b150      	cbz	r0, b5714 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b56fe:	2300      	movs	r3, #0
   b5700:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5702:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b5704:	b133      	cbz	r3, b5714 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5706:	2202      	movs	r2, #2
   b5708:	4629      	mov	r1, r5
   b570a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b570c:	68eb      	ldr	r3, [r5, #12]
   b570e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5710:	68ab      	ldr	r3, [r5, #8]
   b5712:	60a3      	str	r3, [r4, #8]
   b5714:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b5718:	4620      	mov	r0, r4
   b571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b571c:	2003e640 	.word	0x2003e640

000b5720 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b5720:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5722:	b087      	sub	sp, #28
   b5724:	4605      	mov	r5, r0
   b5726:	9103      	str	r1, [sp, #12]
   b5728:	4617      	mov	r7, r2
   b572a:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b572c:	f7ff fd3c 	bl	b51a8 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b5730:	9903      	ldr	r1, [sp, #12]
   b5732:	4628      	mov	r0, r5
   b5734:	f7ff ffd0 	bl	b56d8 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b5738:	4604      	mov	r4, r0
   b573a:	b1e8      	cbz	r0, b5778 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b573c:	2100      	movs	r1, #0
  if (priority >= 0) {
   b573e:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5740:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b5744:	f8ad 1015 	strh.w	r1, [sp, #21]
   b5748:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b574c:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b5750:	bfa2      	ittt	ge
   b5752:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b5754:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b5758:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b575c:	9100      	str	r1, [sp, #0]
   b575e:	4602      	mov	r2, r0
   b5760:	4907      	ldr	r1, [pc, #28]	; (b5780 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b5762:	bfa8      	it	ge
   b5764:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5768:	463b      	mov	r3, r7
   b576a:	4628      	mov	r0, r5
   b576c:	f7ff fd14 	bl	b5198 <HAL_Interrupts_Attach>
   b5770:	b110      	cbz	r0, b5778 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b5772:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b5774:	b007      	add	sp, #28
   b5776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b5778:	1e20      	subs	r0, r4, #0
   b577a:	bf18      	it	ne
   b577c:	2001      	movne	r0, #1
   b577e:	e7f9      	b.n	b5774 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b5780:	000b56c5 	.word	0x000b56c5

000b5784 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5784:	4770      	bx	lr

000b5786 <_ZN9IPAddressD0Ev>:
   b5786:	b510      	push	{r4, lr}
   b5788:	2118      	movs	r1, #24
   b578a:	4604      	mov	r4, r0
   b578c:	f7fe fc85 	bl	b409a <_ZdlPvj>
   b5790:	4620      	mov	r0, r4
   b5792:	bd10      	pop	{r4, pc}

000b5794 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5794:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5796:	7d03      	ldrb	r3, [r0, #20]
   b5798:	2b06      	cmp	r3, #6
{
   b579a:	b08d      	sub	sp, #52	; 0x34
   b579c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b579e:	f100 0704 	add.w	r7, r0, #4
   b57a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b57a6:	d012      	beq.n	b57ce <_ZNK9IPAddress7printToER5Print+0x3a>
   b57a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b57ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b57b0:	220a      	movs	r2, #10
   b57b2:	4630      	mov	r0, r6
   b57b4:	f000 f959 	bl	b5a6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b57b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b57ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b57bc:	d019      	beq.n	b57f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b57be:	2c00      	cmp	r4, #0
   b57c0:	d0f4      	beq.n	b57ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b57c2:	212e      	movs	r1, #46	; 0x2e
   b57c4:	4630      	mov	r0, r6
   b57c6:	f000 f94d 	bl	b5a64 <_ZN5Print5printEc>
   b57ca:	4404      	add	r4, r0
   b57cc:	e7ee      	b.n	b57ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57ce:	232f      	movs	r3, #47	; 0x2f
   b57d0:	466a      	mov	r2, sp
   b57d2:	4639      	mov	r1, r7
   b57d4:	200a      	movs	r0, #10
		buf[0] = 0;
   b57d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57da:	f7ff fd2d 	bl	b5238 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b57de:	4668      	mov	r0, sp
   b57e0:	f001 f8b6 	bl	b6950 <strlen>
   b57e4:	6833      	ldr	r3, [r6, #0]
   b57e6:	4602      	mov	r2, r0
   b57e8:	68db      	ldr	r3, [r3, #12]
   b57ea:	4669      	mov	r1, sp
   b57ec:	4630      	mov	r0, r6
   b57ee:	4798      	blx	r3
   b57f0:	4604      	mov	r4, r0
    }
    return n;
}
   b57f2:	4620      	mov	r0, r4
   b57f4:	b00d      	add	sp, #52	; 0x34
   b57f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b57f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b57f8:	b510      	push	{r4, lr}
   b57fa:	4b05      	ldr	r3, [pc, #20]	; (b5810 <_ZN9IPAddressC1Ev+0x18>)
   b57fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b57fe:	2211      	movs	r2, #17
   b5800:	f840 3b04 	str.w	r3, [r0], #4
   b5804:	2100      	movs	r1, #0
   b5806:	f001 f863 	bl	b68d0 <memset>
}
   b580a:	4620      	mov	r0, r4
   b580c:	bd10      	pop	{r4, pc}
   b580e:	bf00      	nop
   b5810:	000b7148 	.word	0x000b7148

000b5814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5814:	4603      	mov	r3, r0
   b5816:	4a07      	ldr	r2, [pc, #28]	; (b5834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5818:	b510      	push	{r4, lr}
   b581a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b581e:	f101 0210 	add.w	r2, r1, #16
   b5822:	f851 4b04 	ldr.w	r4, [r1], #4
   b5826:	f843 4b04 	str.w	r4, [r3], #4
   b582a:	4291      	cmp	r1, r2
   b582c:	d1f9      	bne.n	b5822 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b582e:	780a      	ldrb	r2, [r1, #0]
   b5830:	701a      	strb	r2, [r3, #0]
}
   b5832:	bd10      	pop	{r4, pc}
   b5834:	000b7148 	.word	0x000b7148

000b5838 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5838:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b583a:	2b04      	cmp	r3, #4
   b583c:	d104      	bne.n	b5848 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b583e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5840:	3800      	subs	r0, #0
   b5842:	bf18      	it	ne
   b5844:	2001      	movne	r0, #1
   b5846:	4770      	bx	lr
    } else if (version() == 6) {
   b5848:	2b06      	cmp	r3, #6
   b584a:	d107      	bne.n	b585c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b584c:	6843      	ldr	r3, [r0, #4]
   b584e:	b93b      	cbnz	r3, b5860 <_ZNK9IPAddresscvbEv+0x28>
   b5850:	6883      	ldr	r3, [r0, #8]
   b5852:	b92b      	cbnz	r3, b5860 <_ZNK9IPAddresscvbEv+0x28>
   b5854:	68c3      	ldr	r3, [r0, #12]
   b5856:	b91b      	cbnz	r3, b5860 <_ZNK9IPAddresscvbEv+0x28>
   b5858:	6900      	ldr	r0, [r0, #16]
   b585a:	e7f1      	b.n	b5840 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b585c:	2000      	movs	r0, #0
   b585e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5860:	2001      	movs	r0, #1
}
   b5862:	4770      	bx	lr

000b5864 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5864:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5866:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b586a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b586e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5872:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5876:	2304      	movs	r3, #4
   b5878:	6041      	str	r1, [r0, #4]
   b587a:	7503      	strb	r3, [r0, #20]
}
   b587c:	bd10      	pop	{r4, pc}
	...

000b5880 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5880:	b507      	push	{r0, r1, r2, lr}
   b5882:	4b06      	ldr	r3, [pc, #24]	; (b589c <_ZN9IPAddressC1EPKh+0x1c>)
   b5884:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5886:	78cb      	ldrb	r3, [r1, #3]
   b5888:	9300      	str	r3, [sp, #0]
   b588a:	788b      	ldrb	r3, [r1, #2]
   b588c:	784a      	ldrb	r2, [r1, #1]
   b588e:	7809      	ldrb	r1, [r1, #0]
   b5890:	f7ff ffe8 	bl	b5864 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5894:	b003      	add	sp, #12
   b5896:	f85d fb04 	ldr.w	pc, [sp], #4
   b589a:	bf00      	nop
   b589c:	000b7148 	.word	0x000b7148

000b58a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b58a0:	4b01      	ldr	r3, [pc, #4]	; (b58a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b58a2:	4a02      	ldr	r2, [pc, #8]	; (b58ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b58a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b58a6:	4770      	bx	lr
   b58a8:	2003e6d0 	.word	0x2003e6d0
   b58ac:	000b7154 	.word	0x000b7154

000b58b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b58b0:	2300      	movs	r3, #0
   b58b2:	6840      	ldr	r0, [r0, #4]
   b58b4:	461a      	mov	r2, r3
   b58b6:	f7ff bdd3 	b.w	b5460 <network_connect>

000b58ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b58ba:	6840      	ldr	r0, [r0, #4]
   b58bc:	2200      	movs	r2, #0
   b58be:	2102      	movs	r1, #2
   b58c0:	f7ff bdde 	b.w	b5480 <network_disconnect>

000b58c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b58c4:	2200      	movs	r2, #0
   b58c6:	6840      	ldr	r0, [r0, #4]
   b58c8:	4611      	mov	r1, r2
   b58ca:	f7ff bdd1 	b.w	b5470 <network_connecting>

000b58ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b58ce:	2200      	movs	r2, #0
   b58d0:	6840      	ldr	r0, [r0, #4]
   b58d2:	4611      	mov	r1, r2
   b58d4:	f7ff bddc 	b.w	b5490 <network_ready>

000b58d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b58d8:	2300      	movs	r3, #0
   b58da:	6840      	ldr	r0, [r0, #4]
   b58dc:	461a      	mov	r2, r3
   b58de:	4619      	mov	r1, r3
   b58e0:	f7ff bdde 	b.w	b54a0 <network_on>

000b58e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b58e4:	2300      	movs	r3, #0
   b58e6:	6840      	ldr	r0, [r0, #4]
   b58e8:	461a      	mov	r2, r3
   b58ea:	4619      	mov	r1, r3
   b58ec:	f7ff bde0 	b.w	b54b0 <network_off>

000b58f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b58f0:	6840      	ldr	r0, [r0, #4]
   b58f2:	2100      	movs	r1, #0
   b58f4:	f7ff be04 	b.w	b5500 <network_is_on>

000b58f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b58f8:	6840      	ldr	r0, [r0, #4]
   b58fa:	2100      	movs	r1, #0
   b58fc:	f7ff be08 	b.w	b5510 <network_is_off>

000b5900 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5900:	6840      	ldr	r0, [r0, #4]
   b5902:	2200      	movs	r2, #0
   b5904:	f081 0101 	eor.w	r1, r1, #1
   b5908:	f7ff bdda 	b.w	b54c0 <network_listen>

000b590c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b590c:	6840      	ldr	r0, [r0, #4]
   b590e:	2200      	movs	r2, #0
   b5910:	f7ff bde6 	b.w	b54e0 <network_set_listen_timeout>

000b5914 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5914:	2200      	movs	r2, #0
   b5916:	6840      	ldr	r0, [r0, #4]
   b5918:	4611      	mov	r1, r2
   b591a:	f7ff bde9 	b.w	b54f0 <network_get_listen_timeout>

000b591e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b591e:	2200      	movs	r2, #0
   b5920:	6840      	ldr	r0, [r0, #4]
   b5922:	4611      	mov	r1, r2
   b5924:	f7ff bdd4 	b.w	b54d0 <network_listening>

000b5928 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b592c:	b095      	sub	sp, #84	; 0x54
   b592e:	4614      	mov	r4, r2
   b5930:	460d      	mov	r5, r1
   b5932:	4607      	mov	r7, r0
    IPAddress addr;
   b5934:	f7ff ff60 	bl	b57f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5938:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b593a:	221c      	movs	r2, #28
   b593c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b593e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5940:	f000 ffc6 	bl	b68d0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5944:	2340      	movs	r3, #64	; 0x40
   b5946:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5948:	4620      	mov	r0, r4
   b594a:	466b      	mov	r3, sp
   b594c:	aa0c      	add	r2, sp, #48	; 0x30
   b594e:	2100      	movs	r1, #0
   b5950:	f7ff fc92 	bl	b5278 <netdb_getaddrinfo>
    if (!r) {
   b5954:	4604      	mov	r4, r0
   b5956:	2800      	cmp	r0, #0
   b5958:	d14b      	bne.n	b59f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b595a:	4602      	mov	r2, r0
   b595c:	2101      	movs	r1, #1
   b595e:	6868      	ldr	r0, [r5, #4]
   b5960:	f7ff fd96 	bl	b5490 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5964:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5966:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5968:	4622      	mov	r2, r4
   b596a:	6868      	ldr	r0, [r5, #4]
   b596c:	f7ff fd90 	bl	b5490 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5970:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5972:	4681      	mov	r9, r0
        bool ok = false;
   b5974:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5976:	2e00      	cmp	r6, #0
   b5978:	d03b      	beq.n	b59f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b597a:	2900      	cmp	r1, #0
   b597c:	d139      	bne.n	b59f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b597e:	6873      	ldr	r3, [r6, #4]
   b5980:	2b02      	cmp	r3, #2
   b5982:	d003      	beq.n	b598c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5984:	2b0a      	cmp	r3, #10
   b5986:	d011      	beq.n	b59ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5988:	69f6      	ldr	r6, [r6, #28]
   b598a:	e7f4      	b.n	b5976 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b598c:	f1b8 0f00 	cmp.w	r8, #0
   b5990:	d0fa      	beq.n	b5988 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5992:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5994:	a806      	add	r0, sp, #24
   b5996:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5998:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b599a:	f7ff ff71 	bl	b5880 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b599e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59a0:	1d3c      	adds	r4, r7, #4
   b59a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59a4:	682b      	ldr	r3, [r5, #0]
   b59a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b59a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b59aa:	e7ed      	b.n	b5988 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b59ac:	f1b9 0f00 	cmp.w	r9, #0
   b59b0:	d0ea      	beq.n	b5988 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b59b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b59b4:	2210      	movs	r2, #16
   b59b6:	a801      	add	r0, sp, #4
   b59b8:	f000 ff8a 	bl	b68d0 <memset>
                    a.v = 6;
   b59bc:	2306      	movs	r3, #6
   b59be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b59c2:	ad01      	add	r5, sp, #4
   b59c4:	f104 0308 	add.w	r3, r4, #8
   b59c8:	3418      	adds	r4, #24
   b59ca:	6818      	ldr	r0, [r3, #0]
   b59cc:	6859      	ldr	r1, [r3, #4]
   b59ce:	462a      	mov	r2, r5
   b59d0:	c203      	stmia	r2!, {r0, r1}
   b59d2:	3308      	adds	r3, #8
   b59d4:	42a3      	cmp	r3, r4
   b59d6:	4615      	mov	r5, r2
   b59d8:	d1f7      	bne.n	b59ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b59da:	a901      	add	r1, sp, #4
   b59dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b59de:	ad07      	add	r5, sp, #28
   b59e0:	f7ff ff18 	bl	b5814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b59e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59e6:	1d3c      	adds	r4, r7, #4
   b59e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59ea:	682b      	ldr	r3, [r5, #0]
   b59ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b59ee:	4649      	mov	r1, r9
   b59f0:	e7ca      	b.n	b5988 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b59f2:	9800      	ldr	r0, [sp, #0]
   b59f4:	f7ff fc38 	bl	b5268 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b59f8:	4638      	mov	r0, r7
   b59fa:	b015      	add	sp, #84	; 0x54
   b59fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5a00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5a00:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5a02:	4a03      	ldr	r2, [pc, #12]	; (b5a10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5a04:	601a      	str	r2, [r3, #0]
   b5a06:	2200      	movs	r2, #0
   b5a08:	605a      	str	r2, [r3, #4]

} // spark
   b5a0a:	4770      	bx	lr
   b5a0c:	2003e6d4 	.word	0x2003e6d4
   b5a10:	000b7160 	.word	0x000b7160

000b5a14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a16:	4606      	mov	r6, r0
   b5a18:	460d      	mov	r5, r1
  size_t n = 0;
   b5a1a:	188f      	adds	r7, r1, r2
   b5a1c:	2400      	movs	r4, #0
  while (size--) {
   b5a1e:	42bd      	cmp	r5, r7
   b5a20:	d00c      	beq.n	b5a3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5a22:	6833      	ldr	r3, [r6, #0]
   b5a24:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5a28:	689b      	ldr	r3, [r3, #8]
   b5a2a:	4630      	mov	r0, r6
   b5a2c:	4798      	blx	r3
     if (chunk>=0)
   b5a2e:	1e03      	subs	r3, r0, #0
   b5a30:	db01      	blt.n	b5a36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5a32:	441c      	add	r4, r3
  while (size--) {
   b5a34:	e7f3      	b.n	b5a1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5a36:	2c00      	cmp	r4, #0
   b5a38:	bf08      	it	eq
   b5a3a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a40 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5a40:	b513      	push	{r0, r1, r4, lr}
   b5a42:	4604      	mov	r4, r0
    }
   b5a44:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5a46:	b159      	cbz	r1, b5a60 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5a48:	9101      	str	r1, [sp, #4]
   b5a4a:	f000 ff81 	bl	b6950 <strlen>
   b5a4e:	6823      	ldr	r3, [r4, #0]
   b5a50:	9901      	ldr	r1, [sp, #4]
   b5a52:	68db      	ldr	r3, [r3, #12]
   b5a54:	4602      	mov	r2, r0
   b5a56:	4620      	mov	r0, r4
    }
   b5a58:	b002      	add	sp, #8
   b5a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5a5e:	4718      	bx	r3
    }
   b5a60:	b002      	add	sp, #8
   b5a62:	bd10      	pop	{r4, pc}

000b5a64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5a64:	6803      	ldr	r3, [r0, #0]
   b5a66:	689b      	ldr	r3, [r3, #8]
   b5a68:	4718      	bx	r3

000b5a6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5a6a:	b530      	push	{r4, r5, lr}
   b5a6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5a6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5a70:	2a01      	cmp	r2, #1
  *str = '\0';
   b5a72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5a76:	bf98      	it	ls
   b5a78:	220a      	movls	r2, #10
   b5a7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5a7c:	460d      	mov	r5, r1
   b5a7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5a82:	fb01 5312 	mls	r3, r1, r2, r5
   b5a86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a8a:	2b09      	cmp	r3, #9
   b5a8c:	bf94      	ite	ls
   b5a8e:	3330      	addls	r3, #48	; 0x30
   b5a90:	3337      	addhi	r3, #55	; 0x37
   b5a92:	b2db      	uxtb	r3, r3
  } while(n);
   b5a94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a9a:	d9ef      	bls.n	b5a7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a9c:	4621      	mov	r1, r4
   b5a9e:	f7ff ffcf 	bl	b5a40 <_ZN5Print5writeEPKc>
}
   b5aa2:	b00b      	add	sp, #44	; 0x2c
   b5aa4:	bd30      	pop	{r4, r5, pc}
	...

000b5aa8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5aa8:	4b01      	ldr	r3, [pc, #4]	; (b5ab0 <_GLOBAL__sub_I_RGB+0x8>)
   b5aaa:	2200      	movs	r2, #0
   b5aac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5aae:	4770      	bx	lr
   b5ab0:	2003e6dc 	.word	0x2003e6dc

000b5ab4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5ab4:	b510      	push	{r4, lr}
   b5ab6:	4604      	mov	r4, r0
   b5ab8:	4608      	mov	r0, r1
{
    _spi = spi;
   b5aba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5abc:	f7ff fc14 	bl	b52e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ac0:	2300      	movs	r3, #0
   b5ac2:	6063      	str	r3, [r4, #4]
}
   b5ac4:	4620      	mov	r0, r4
   b5ac6:	bd10      	pop	{r4, pc}

000b5ac8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5ac8:	b510      	push	{r4, lr}
   b5aca:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5acc:	6800      	ldr	r0, [r0, #0]
   b5ace:	b108      	cbz	r0, b5ad4 <_ZN6String10invalidateEv+0xc>
   b5ad0:	f7ff fd2e 	bl	b5530 <free>
	buffer = NULL;
   b5ad4:	2300      	movs	r3, #0
	capacity = len = 0;
   b5ad6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5ada:	6023      	str	r3, [r4, #0]
}
   b5adc:	bd10      	pop	{r4, pc}

000b5ade <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5ade:	b538      	push	{r3, r4, r5, lr}
   b5ae0:	4604      	mov	r4, r0
   b5ae2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5ae4:	6800      	ldr	r0, [r0, #0]
   b5ae6:	3101      	adds	r1, #1
   b5ae8:	f7ff fd2a 	bl	b5540 <realloc>
	if (newbuffer) {
   b5aec:	b110      	cbz	r0, b5af4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5aee:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5af2:	2001      	movs	r0, #1
	}
	return 0;
}
   b5af4:	bd38      	pop	{r3, r4, r5, pc}

000b5af6 <_ZN6String7reserveEj>:
{
   b5af6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5af8:	6803      	ldr	r3, [r0, #0]
{
   b5afa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5afc:	b123      	cbz	r3, b5b08 <_ZN6String7reserveEj+0x12>
   b5afe:	6843      	ldr	r3, [r0, #4]
   b5b00:	428b      	cmp	r3, r1
   b5b02:	d301      	bcc.n	b5b08 <_ZN6String7reserveEj+0x12>
   b5b04:	2001      	movs	r0, #1
}
   b5b06:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b08:	4620      	mov	r0, r4
   b5b0a:	f7ff ffe8 	bl	b5ade <_ZN6String12changeBufferEj>
   b5b0e:	2800      	cmp	r0, #0
   b5b10:	d0f9      	beq.n	b5b06 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5b12:	68a3      	ldr	r3, [r4, #8]
   b5b14:	2b00      	cmp	r3, #0
   b5b16:	d1f5      	bne.n	b5b04 <_ZN6String7reserveEj+0xe>
   b5b18:	6822      	ldr	r2, [r4, #0]
   b5b1a:	7013      	strb	r3, [r2, #0]
   b5b1c:	e7f2      	b.n	b5b04 <_ZN6String7reserveEj+0xe>

000b5b1e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b20:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5b22:	4611      	mov	r1, r2
   b5b24:	9201      	str	r2, [sp, #4]
{
   b5b26:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5b28:	f7ff ffe5 	bl	b5af6 <_ZN6String7reserveEj>
   b5b2c:	9a01      	ldr	r2, [sp, #4]
   b5b2e:	b928      	cbnz	r0, b5b3c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5b30:	4620      	mov	r0, r4
   b5b32:	f7ff ffc9 	bl	b5ac8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5b36:	4620      	mov	r0, r4
   b5b38:	b003      	add	sp, #12
   b5b3a:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5b3c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5b3e:	4629      	mov	r1, r5
   b5b40:	6820      	ldr	r0, [r4, #0]
   b5b42:	f000 feb7 	bl	b68b4 <memcpy>
	buffer[len] = 0;
   b5b46:	6822      	ldr	r2, [r4, #0]
   b5b48:	68a3      	ldr	r3, [r4, #8]
   b5b4a:	2100      	movs	r1, #0
   b5b4c:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5b4e:	e7f2      	b.n	b5b36 <_ZN6String4copyEPKcj+0x18>

000b5b50 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5b50:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5b52:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5b54:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5b58:	4604      	mov	r4, r0
	len = 0;
   b5b5a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b5c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5b5e:	b141      	cbz	r1, b5b72 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5b60:	4608      	mov	r0, r1
   b5b62:	9101      	str	r1, [sp, #4]
   b5b64:	f000 fef4 	bl	b6950 <strlen>
   b5b68:	9901      	ldr	r1, [sp, #4]
   b5b6a:	4602      	mov	r2, r0
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f7ff ffd6 	bl	b5b1e <_ZN6String4copyEPKcj>
}
   b5b72:	4620      	mov	r0, r4
   b5b74:	b002      	add	sp, #8
   b5b76:	bd10      	pop	{r4, pc}

000b5b78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b78:	4b05      	ldr	r3, [pc, #20]	; (b5b90 <_GLOBAL__sub_I_System+0x18>)
   b5b7a:	2202      	movs	r2, #2
   b5b7c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b7e:	4b05      	ldr	r3, [pc, #20]	; (b5b94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b80:	4a05      	ldr	r2, [pc, #20]	; (b5b98 <_GLOBAL__sub_I_System+0x20>)
   b5b82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b84:	2000      	movs	r0, #0
   b5b86:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b8a:	f7ff bc45 	b.w	b5418 <set_system_mode>
   b5b8e:	bf00      	nop
   b5b90:	2003e6f8 	.word	0x2003e6f8
   b5b94:	2003e6ec 	.word	0x2003e6ec
   b5b98:	ffff0000 	.word	0xffff0000

000b5b9c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5b9c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5b9e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5ba0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5ba4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5ba6:	2201      	movs	r2, #1
   b5ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5bac:	f10d 0107 	add.w	r1, sp, #7
   b5bb0:	47a0      	blx	r4
}
   b5bb2:	b002      	add	sp, #8
   b5bb4:	bd10      	pop	{r4, pc}

000b5bb6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5bb6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5bc0:	46a4      	mov	ip, r4
}
   b5bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5bc6:	4760      	bx	ip

000b5bc8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5bc8:	b513      	push	{r0, r1, r4, lr}
   b5bca:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5bcc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5bce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5bd2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5bd4:	f10d 0107 	add.w	r1, sp, #7
   b5bd8:	2201      	movs	r2, #1
   b5bda:	47a0      	blx	r4
}
   b5bdc:	b002      	add	sp, #8
   b5bde:	bd10      	pop	{r4, pc}

000b5be0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5be0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5be2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5be4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5be8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5bec:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5bee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5bf0:	d008      	beq.n	b5c04 <_ZN9TCPClient4readEv+0x24>
   b5bf2:	6963      	ldr	r3, [r4, #20]
   b5bf4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5bf8:	1c51      	adds	r1, r2, #1
   b5bfa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5bfe:	4413      	add	r3, r2
   b5c00:	7918      	ldrb	r0, [r3, #4]
}
   b5c02:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5c04:	6803      	ldr	r3, [r0, #0]
   b5c06:	691b      	ldr	r3, [r3, #16]
   b5c08:	4798      	blx	r3
   b5c0a:	2800      	cmp	r0, #0
   b5c0c:	d1f1      	bne.n	b5bf2 <_ZN9TCPClient4readEv+0x12>
   b5c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5c12:	e7f6      	b.n	b5c02 <_ZN9TCPClient4readEv+0x22>

000b5c14 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5c14:	4770      	bx	lr

000b5c16 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5c16:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5c18:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5c1a:	43c0      	mvns	r0, r0
   b5c1c:	0fc0      	lsrs	r0, r0, #31
   b5c1e:	4770      	bx	lr

000b5c20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5c20:	4770      	bx	lr
	...

000b5c24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5c24:	4b06      	ldr	r3, [pc, #24]	; (b5c40 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5c26:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5c28:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5c2a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5c2e:	d005      	beq.n	b5c3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5c30:	4608      	mov	r0, r1
   b5c32:	f000 fd27 	bl	b6684 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5c36:	2800      	cmp	r0, #0
   b5c38:	bf08      	it	eq
   b5c3a:	2400      	moveq	r4, #0
      }
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	bd10      	pop	{r4, pc}
   b5c40:	000b70d4 	.word	0x000b70d4

000b5c44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5c44:	b510      	push	{r4, lr}
   b5c46:	21ac      	movs	r1, #172	; 0xac
   b5c48:	4604      	mov	r4, r0
   b5c4a:	f7fe fa26 	bl	b409a <_ZdlPvj>
   b5c4e:	4620      	mov	r0, r4
   b5c50:	bd10      	pop	{r4, pc}

000b5c52 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5c52:	21ac      	movs	r1, #172	; 0xac
   b5c54:	f7fe ba21 	b.w	b409a <_ZdlPvj>

000b5c58 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5c5c:	f04f 0800 	mov.w	r8, #0
   b5c60:	b086      	sub	sp, #24
   b5c62:	461c      	mov	r4, r3
   b5c64:	f8c0 8004 	str.w	r8, [r0, #4]
   b5c68:	4605      	mov	r5, r0
   b5c6a:	460e      	mov	r6, r1
   b5c6c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5c6e:	4641      	mov	r1, r8
   b5c70:	2210      	movs	r2, #16
   b5c72:	a802      	add	r0, sp, #8
   b5c74:	f000 fe2c 	bl	b68d0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5c78:	1c63      	adds	r3, r4, #1
   b5c7a:	d009      	beq.n	b5c90 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c80:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5c84:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5c88:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5c8c:	435c      	muls	r4, r3
   b5c8e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5c90:	6968      	ldr	r0, [r5, #20]
   b5c92:	2310      	movs	r3, #16
   b5c94:	9300      	str	r3, [sp, #0]
   b5c96:	6800      	ldr	r0, [r0, #0]
   b5c98:	ab02      	add	r3, sp, #8
   b5c9a:	f241 0205 	movw	r2, #4101	; 0x1005
   b5c9e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ca2:	f7ff faf1 	bl	b5288 <sock_setsockopt>
    if (ret < 0) {
   b5ca6:	2800      	cmp	r0, #0
   b5ca8:	da07      	bge.n	b5cba <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5caa:	f7ff fc59 	bl	b5560 <__errno>
   b5cae:	6803      	ldr	r3, [r0, #0]
   b5cb0:	606b      	str	r3, [r5, #4]
        return 0;
   b5cb2:	2000      	movs	r0, #0
}
   b5cb4:	b006      	add	sp, #24
   b5cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5cba:	6968      	ldr	r0, [r5, #20]
   b5cbc:	2300      	movs	r3, #0
   b5cbe:	6800      	ldr	r0, [r0, #0]
   b5cc0:	463a      	mov	r2, r7
   b5cc2:	4631      	mov	r1, r6
   b5cc4:	f7ff fb00 	bl	b52c8 <sock_send>
    if (ret < 0) {
   b5cc8:	1e03      	subs	r3, r0, #0
   b5cca:	dbee      	blt.n	b5caa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5ccc:	4618      	mov	r0, r3
   b5cce:	e7f1      	b.n	b5cb4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5cd0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5cd0:	b530      	push	{r4, r5, lr}
   b5cd2:	b087      	sub	sp, #28
   b5cd4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5cd6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5cd8:	4668      	mov	r0, sp
   b5cda:	f7ff fdd1 	bl	b5880 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ce0:	3404      	adds	r4, #4
   b5ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ce4:	682b      	ldr	r3, [r5, #0]
   b5ce6:	7023      	strb	r3, [r4, #0]
    }
   b5ce8:	b007      	add	sp, #28
   b5cea:	bd30      	pop	{r4, r5, pc}

000b5cec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5cec:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5cee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5cf0:	4b05      	ldr	r3, [pc, #20]	; (b5d08 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5cf2:	4604      	mov	r4, r0
   b5cf4:	358c      	adds	r5, #140	; 0x8c
   b5cf6:	f844 3b04 	str.w	r3, [r4], #4
   b5cfa:	4606      	mov	r6, r0
   b5cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d00:	682b      	ldr	r3, [r5, #0]
   b5d02:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5d04:	4630      	mov	r0, r6
   b5d06:	bd70      	pop	{r4, r5, r6, pc}
   b5d08:	000b7148 	.word	0x000b7148

000b5d0c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d10:	4698      	mov	r8, r3
    stop();
   b5d12:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5d14:	b093      	sub	sp, #76	; 0x4c
   b5d16:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5d18:	2400      	movs	r4, #0
    stop();
   b5d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5d1c:	4606      	mov	r6, r0
   b5d1e:	4617      	mov	r7, r2
    stop();
   b5d20:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5d22:	4628      	mov	r0, r5
   b5d24:	466b      	mov	r3, sp
   b5d26:	4622      	mov	r2, r4
   b5d28:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5d2a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5d2c:	f7ff faa4 	bl	b5278 <netdb_getaddrinfo>
   b5d30:	4605      	mov	r5, r0
   b5d32:	2800      	cmp	r0, #0
   b5d34:	d163      	bne.n	b5dfe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5d36:	9b00      	ldr	r3, [sp, #0]
   b5d38:	2b00      	cmp	r3, #0
   b5d3a:	d04b      	beq.n	b5dd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5d3c:	695b      	ldr	r3, [r3, #20]
   b5d3e:	2b00      	cmp	r3, #0
   b5d40:	d048      	beq.n	b5dd4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5d42:	a806      	add	r0, sp, #24
   b5d44:	f7ff fd58 	bl	b57f8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5d48:	9b00      	ldr	r3, [sp, #0]
   b5d4a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5d4c:	7863      	ldrb	r3, [r4, #1]
   b5d4e:	2b02      	cmp	r3, #2
   b5d50:	d104      	bne.n	b5d5c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5d52:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5d54:	a806      	add	r0, sp, #24
   b5d56:	f7ff ffbb 	bl	b5cd0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5d5a:	e026      	b.n	b5daa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5d5c:	2b0a      	cmp	r3, #10
   b5d5e:	d124      	bne.n	b5daa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5d60:	2211      	movs	r2, #17
   b5d62:	4629      	mov	r1, r5
   b5d64:	a801      	add	r0, sp, #4
   b5d66:	f000 fdb3 	bl	b68d0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5d6a:	68a3      	ldr	r3, [r4, #8]
   b5d6c:	2b00      	cmp	r3, #0
   b5d6e:	d038      	beq.n	b5de2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5d70:	f104 0308 	add.w	r3, r4, #8
   b5d74:	f10d 0c04 	add.w	ip, sp, #4
   b5d78:	3418      	adds	r4, #24
   b5d7a:	6818      	ldr	r0, [r3, #0]
   b5d7c:	6859      	ldr	r1, [r3, #4]
   b5d7e:	4662      	mov	r2, ip
   b5d80:	c203      	stmia	r2!, {r0, r1}
   b5d82:	3308      	adds	r3, #8
   b5d84:	42a3      	cmp	r3, r4
   b5d86:	4694      	mov	ip, r2
   b5d88:	d1f7      	bne.n	b5d7a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5d8a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5d8c:	a901      	add	r1, sp, #4
   b5d8e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5d90:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5d94:	f7ff fd3e 	bl	b5814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5d98:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5d9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5da0:	ac07      	add	r4, sp, #28
   b5da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5da4:	f8dc 3000 	ldr.w	r3, [ip]
   b5da8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5daa:	a806      	add	r0, sp, #24
   b5dac:	f7ff fd44 	bl	b5838 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5db0:	b180      	cbz	r0, b5dd4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5db2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5db4:	ad07      	add	r5, sp, #28
   b5db6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5dba:	4b12      	ldr	r3, [pc, #72]	; (b5e04 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5dbc:	930c      	str	r3, [sp, #48]	; 0x30
   b5dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5dc0:	ac0d      	add	r4, sp, #52	; 0x34
   b5dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5dc4:	682b      	ldr	r3, [r5, #0]
   b5dc6:	7023      	strb	r3, [r4, #0]
   b5dc8:	463a      	mov	r2, r7
   b5dca:	4643      	mov	r3, r8
   b5dcc:	a90c      	add	r1, sp, #48	; 0x30
   b5dce:	4630      	mov	r0, r6
   b5dd0:	47c8      	blx	r9
   b5dd2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5dd4:	9800      	ldr	r0, [sp, #0]
   b5dd6:	f7ff fa47 	bl	b5268 <netdb_freeaddrinfo>
}
   b5dda:	4628      	mov	r0, r5
   b5ddc:	b013      	add	sp, #76	; 0x4c
   b5dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5de2:	68e3      	ldr	r3, [r4, #12]
   b5de4:	2b00      	cmp	r3, #0
   b5de6:	d1c3      	bne.n	b5d70 <_ZN9TCPClient7connectEPKctm+0x64>
   b5de8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5dec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5df0:	f7ff fa2a 	bl	b5248 <inet_htonl>
   b5df4:	4581      	cmp	r9, r0
   b5df6:	d1bb      	bne.n	b5d70 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5df8:	f104 0114 	add.w	r1, r4, #20
   b5dfc:	e7aa      	b.n	b5d54 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5dfe:	4625      	mov	r5, r4
   b5e00:	e7e8      	b.n	b5dd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5e02:	bf00      	nop
   b5e04:	000b7148 	.word	0x000b7148

000b5e08 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5e08:	b538      	push	{r3, r4, r5, lr}
   b5e0a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5e0c:	681a      	ldr	r2, [r3, #0]
   b5e0e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5e10:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5e12:	da10      	bge.n	b5e36 <_ZN9TCPClient9connectedEv+0x2e>
   b5e14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5e1c:	429a      	cmp	r2, r3
   b5e1e:	d10a      	bne.n	b5e36 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5e20:	6803      	ldr	r3, [r0, #0]
   b5e22:	691b      	ldr	r3, [r3, #16]
   b5e24:	4798      	blx	r3
        if (!rv) {
   b5e26:	4604      	mov	r4, r0
   b5e28:	b928      	cbnz	r0, b5e36 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5e2a:	682b      	ldr	r3, [r5, #0]
   b5e2c:	4628      	mov	r0, r5
   b5e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e30:	4798      	blx	r3
        rv = available();
   b5e32:	4620      	mov	r0, r4
}
   b5e34:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5e36:	2001      	movs	r0, #1
   b5e38:	e7fc      	b.n	b5e34 <_ZN9TCPClient9connectedEv+0x2c>

000b5e3a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5e3a:	b510      	push	{r4, lr}
   b5e3c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5e3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5e46:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5e48:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5e4a:	d005      	beq.n	b5e58 <_ZN9TCPClient4peekEv+0x1e>
   b5e4c:	6963      	ldr	r3, [r4, #20]
   b5e4e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5e52:	4413      	add	r3, r2
   b5e54:	7918      	ldrb	r0, [r3, #4]
}
   b5e56:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5e58:	6803      	ldr	r3, [r0, #0]
   b5e5a:	691b      	ldr	r3, [r3, #16]
   b5e5c:	4798      	blx	r3
   b5e5e:	2800      	cmp	r0, #0
   b5e60:	d1f4      	bne.n	b5e4c <_ZN9TCPClient4peekEv+0x12>
   b5e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5e66:	e7f6      	b.n	b5e56 <_ZN9TCPClient4peekEv+0x1c>

000b5e68 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e6a:	6943      	ldr	r3, [r0, #20]
   b5e6c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5e6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5e72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5e76:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5e78:	4605      	mov	r5, r0
   b5e7a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5e7c:	d016      	beq.n	b5eac <_ZN9TCPClient4readEPhj+0x44>
   b5e7e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5e80:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5e84:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5e88:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5e8a:	42bc      	cmp	r4, r7
   b5e8c:	bf28      	it	cs
   b5e8e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5e90:	3304      	adds	r3, #4
   b5e92:	4622      	mov	r2, r4
   b5e94:	4419      	add	r1, r3
   b5e96:	4630      	mov	r0, r6
   b5e98:	f000 fd0c 	bl	b68b4 <memcpy>
   b5e9c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5e9e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5ea2:	4423      	add	r3, r4
   b5ea4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5eac:	6803      	ldr	r3, [r0, #0]
   b5eae:	691b      	ldr	r3, [r3, #16]
   b5eb0:	4798      	blx	r3
   b5eb2:	2800      	cmp	r0, #0
   b5eb4:	d1e3      	bne.n	b5e7e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5eb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5eba:	e7f5      	b.n	b5ea8 <_ZN9TCPClient4readEPhj+0x40>

000b5ebc <_ZN9TCPClient12flush_bufferEv>:
   b5ebc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5ebe:	2300      	movs	r3, #0
   b5ec0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5ec4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5ec6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5eca:	4770      	bx	lr

000b5ecc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ed0:	461f      	mov	r7, r3
    stop();
   b5ed2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5ed4:	460c      	mov	r4, r1
    stop();
   b5ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5ed8:	b08a      	sub	sp, #40	; 0x28
   b5eda:	4605      	mov	r5, r0
   b5edc:	4616      	mov	r6, r2
    stop();
   b5ede:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5ee0:	7d23      	ldrb	r3, [r4, #20]
   b5ee2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5ee6:	2b04      	cmp	r3, #4
   b5ee8:	bf0c      	ite	eq
   b5eea:	2002      	moveq	r0, #2
   b5eec:	200a      	movne	r0, #10
   b5eee:	2206      	movs	r2, #6
   b5ef0:	2101      	movs	r1, #1
   b5ef2:	f7ff f9f1 	bl	b52d8 <sock_socket>
   b5ef6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5efa:	696b      	ldr	r3, [r5, #20]
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	2b00      	cmp	r3, #0
   b5f00:	da08      	bge.n	b5f14 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5f02:	682b      	ldr	r3, [r5, #0]
   b5f04:	4628      	mov	r0, r5
   b5f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5f08:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5f0a:	4798      	blx	r3
}
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	b00a      	add	sp, #40	; 0x28
   b5f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5f14:	4628      	mov	r0, r5
   b5f16:	f7ff ffd1 	bl	b5ebc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5f1a:	b1b7      	cbz	r7, b5f4a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5f1c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5f1e:	a903      	add	r1, sp, #12
   b5f20:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5f22:	9303      	str	r3, [sp, #12]
   b5f24:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5f28:	f7ff f97e 	bl	b5228 <if_index_to_name>
   b5f2c:	2800      	cmp	r0, #0
   b5f2e:	d1e8      	bne.n	b5f02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5f30:	6968      	ldr	r0, [r5, #20]
   b5f32:	2306      	movs	r3, #6
   b5f34:	9300      	str	r3, [sp, #0]
   b5f36:	6800      	ldr	r0, [r0, #0]
   b5f38:	ab03      	add	r3, sp, #12
   b5f3a:	f241 020b 	movw	r2, #4107	; 0x100b
   b5f3e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5f42:	f7ff f9a1 	bl	b5288 <sock_setsockopt>
   b5f46:	2800      	cmp	r0, #0
   b5f48:	d1db      	bne.n	b5f02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5f4a:	221c      	movs	r2, #28
   b5f4c:	2100      	movs	r1, #0
   b5f4e:	a803      	add	r0, sp, #12
   b5f50:	f000 fcbe 	bl	b68d0 <memset>
    if (ip.version() == 4) {
   b5f54:	7d23      	ldrb	r3, [r4, #20]
   b5f56:	2b04      	cmp	r3, #4
   b5f58:	d11d      	bne.n	b5f96 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5f5a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5f5e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5f60:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5f64:	f7ff f978 	bl	b5258 <inet_htons>
   b5f68:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5f6c:	6860      	ldr	r0, [r4, #4]
   b5f6e:	f7ff f96b 	bl	b5248 <inet_htonl>
   b5f72:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5f74:	696b      	ldr	r3, [r5, #20]
   b5f76:	221c      	movs	r2, #28
   b5f78:	6818      	ldr	r0, [r3, #0]
   b5f7a:	a903      	add	r1, sp, #12
   b5f7c:	f7ff f994 	bl	b52a8 <sock_connect>
   b5f80:	2800      	cmp	r0, #0
   b5f82:	d1be      	bne.n	b5f02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5f84:	3404      	adds	r4, #4
   b5f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5f88:	696d      	ldr	r5, [r5, #20]
   b5f8a:	358c      	adds	r5, #140	; 0x8c
   b5f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5f8e:	6823      	ldr	r3, [r4, #0]
   b5f90:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5f92:	2401      	movs	r4, #1
   b5f94:	e7ba      	b.n	b5f0c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5f96:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5f9a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5f9c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5fa0:	f7ff f95a 	bl	b5258 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5fa4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5fa6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5faa:	1d23      	adds	r3, r4, #4
   b5fac:	f104 0714 	add.w	r7, r4, #20
   b5fb0:	6818      	ldr	r0, [r3, #0]
   b5fb2:	6859      	ldr	r1, [r3, #4]
   b5fb4:	4632      	mov	r2, r6
   b5fb6:	c203      	stmia	r2!, {r0, r1}
   b5fb8:	3308      	adds	r3, #8
   b5fba:	42bb      	cmp	r3, r7
   b5fbc:	4616      	mov	r6, r2
   b5fbe:	d1f7      	bne.n	b5fb0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5fc0:	e7d8      	b.n	b5f74 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5fc4 <_ZN9TCPClient9availableEv>:
{
   b5fc4:	b530      	push	{r4, r5, lr}
   b5fc6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5fc8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5fcc:	b08b      	sub	sp, #44	; 0x2c
   b5fce:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5fd0:	b12b      	cbz	r3, b5fde <_ZN9TCPClient9availableEv+0x1a>
   b5fd2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5fd6:	429a      	cmp	r2, r3
   b5fd8:	d101      	bne.n	b5fde <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5fda:	f7ff ff6f 	bl	b5ebc <_ZN9TCPClient12flush_bufferEv>
   b5fde:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5fe0:	6808      	ldr	r0, [r1, #0]
   b5fe2:	2800      	cmp	r0, #0
   b5fe4:	db18      	blt.n	b6018 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5fe6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5fea:	2d7f      	cmp	r5, #127	; 0x7f
   b5fec:	d814      	bhi.n	b6018 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5fee:	3104      	adds	r1, #4
   b5ff0:	2308      	movs	r3, #8
   b5ff2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5ff6:	4429      	add	r1, r5
   b5ff8:	f7ff f95e 	bl	b52b8 <sock_recv>
            if (ret > 0) {
   b5ffc:	2800      	cmp	r0, #0
   b5ffe:	dd13      	ble.n	b6028 <_ZN9TCPClient9availableEv+0x64>
   b6000:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6002:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6006:	b90a      	cbnz	r2, b600c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6008:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b600c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b600e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6012:	4410      	add	r0, r2
   b6014:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6018:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b601a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b601e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6022:	1ac0      	subs	r0, r0, r3
   b6024:	b00b      	add	sp, #44	; 0x2c
   b6026:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6028:	f7ff fa9a 	bl	b5560 <__errno>
   b602c:	6803      	ldr	r3, [r0, #0]
   b602e:	2b0b      	cmp	r3, #11
   b6030:	d0f2      	beq.n	b6018 <_ZN9TCPClient9availableEv+0x54>
   b6032:	f7ff fa95 	bl	b5560 <__errno>
   b6036:	6803      	ldr	r3, [r0, #0]
   b6038:	2b0b      	cmp	r3, #11
   b603a:	d0ed      	beq.n	b6018 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b603c:	2320      	movs	r3, #32
   b603e:	2500      	movs	r5, #0
   b6040:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6044:	f7ff fa8c 	bl	b5560 <__errno>
   b6048:	6803      	ldr	r3, [r0, #0]
   b604a:	9301      	str	r3, [sp, #4]
   b604c:	4b08      	ldr	r3, [pc, #32]	; (b6070 <_ZN9TCPClient9availableEv+0xac>)
   b604e:	4909      	ldr	r1, [pc, #36]	; (b6074 <_ZN9TCPClient9availableEv+0xb0>)
   b6050:	9300      	str	r3, [sp, #0]
   b6052:	aa02      	add	r2, sp, #8
   b6054:	462b      	mov	r3, r5
   b6056:	2032      	movs	r0, #50	; 0x32
   b6058:	f7ff f9d6 	bl	b5408 <log_message>
                    sock_close(d_->sock);
   b605c:	6963      	ldr	r3, [r4, #20]
   b605e:	6818      	ldr	r0, [r3, #0]
   b6060:	f7ff f91a 	bl	b5298 <sock_close>
   b6064:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b606a:	601a      	str	r2, [r3, #0]
   b606c:	e7d4      	b.n	b6018 <_ZN9TCPClient9availableEv+0x54>
   b606e:	bf00      	nop
   b6070:	000b719b 	.word	0x000b719b
   b6074:	000b7194 	.word	0x000b7194

000b6078 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6078:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b607a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b607c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b607e:	6818      	ldr	r0, [r3, #0]
   b6080:	2800      	cmp	r0, #0
   b6082:	db01      	blt.n	b6088 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6084:	f7ff f908 	bl	b5298 <sock_close>
   b6088:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b608a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b608e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6090:	6960      	ldr	r0, [r4, #20]
   b6092:	2211      	movs	r2, #17
   b6094:	2100      	movs	r1, #0
   b6096:	308c      	adds	r0, #140	; 0x8c
   b6098:	f000 fc1a 	bl	b68d0 <memset>
    flush_buffer();
   b609c:	4620      	mov	r0, r4
}
   b609e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b60a2:	f7ff bf0b 	b.w	b5ebc <_ZN9TCPClient12flush_bufferEv>

000b60a6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b60a6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b60a8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b60aa:	4604      	mov	r4, r0
          total(0) {
   b60ac:	6001      	str	r1, [r0, #0]
   b60ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b60b2:	3088      	adds	r0, #136	; 0x88
   b60b4:	f7ff fba0 	bl	b57f8 <_ZN9IPAddressC1Ev>
}
   b60b8:	4620      	mov	r0, r4
   b60ba:	bd10      	pop	{r4, pc}

000b60bc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b60bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60be:	2300      	movs	r3, #0
   b60c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b60c4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b60c8:	4a0e      	ldr	r2, [pc, #56]	; (b6104 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b60ca:	6103      	str	r3, [r0, #16]
   b60cc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b60ce:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b60d0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b60d2:	20ac      	movs	r0, #172	; 0xac
   b60d4:	9101      	str	r1, [sp, #4]
   b60d6:	f7fd ffdc 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b60da:	1e05      	subs	r5, r0, #0
   b60dc:	f105 060c 	add.w	r6, r5, #12
   b60e0:	d008      	beq.n	b60f4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b60e2:	2301      	movs	r3, #1
   b60e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b60e8:	4b07      	ldr	r3, [pc, #28]	; (b6108 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b60ea:	9901      	ldr	r1, [sp, #4]
   b60ec:	602b      	str	r3, [r5, #0]
   b60ee:	4630      	mov	r0, r6
   b60f0:	f7ff ffd9 	bl	b60a6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b60f4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b60f6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b60fa:	f7ff fedf 	bl	b5ebc <_ZN9TCPClient12flush_bufferEv>
}
   b60fe:	b002      	add	sp, #8
   b6100:	bd70      	pop	{r4, r5, r6, pc}
   b6102:	bf00      	nop
   b6104:	000b71d0 	.word	0x000b71d0
   b6108:	000b71b4 	.word	0x000b71b4

000b610c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b610c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b610e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6112:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6114:	f7ff ffd2 	bl	b60bc <_ZN9TCPClientC1Ei>
}
   b6118:	4620      	mov	r0, r4
   b611a:	bd10      	pop	{r4, pc}

000b611c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b611c:	b510      	push	{r4, lr}
   b611e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6120:	6800      	ldr	r0, [r0, #0]
   b6122:	2800      	cmp	r0, #0
   b6124:	db01      	blt.n	b612a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6126:	f7ff f8b7 	bl	b5298 <sock_close>
    }
}
   b612a:	4620      	mov	r0, r4
   b612c:	bd10      	pop	{r4, pc}

000b612e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b612e:	300c      	adds	r0, #12
   b6130:	f7ff bff4 	b.w	b611c <_ZN9TCPClient4DataD1Ev>

000b6134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6134:	4b02      	ldr	r3, [pc, #8]	; (b6140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6136:	681a      	ldr	r2, [r3, #0]
   b6138:	4b02      	ldr	r3, [pc, #8]	; (b6144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b613a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b613c:	4770      	bx	lr
   b613e:	bf00      	nop
   b6140:	2003e4b4 	.word	0x2003e4b4
   b6144:	2003e6fc 	.word	0x2003e6fc

000b6148 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6148:	4770      	bx	lr

000b614a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b614a:	7441      	strb	r1, [r0, #17]
}
   b614c:	4770      	bx	lr

000b614e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b614e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6150:	7c00      	ldrb	r0, [r0, #16]
   b6152:	f7ff f909 	bl	b5368 <hal_usart_available_data_for_write>
}
   b6156:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b615a:	bd08      	pop	{r3, pc}

000b615c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b615c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b615e:	7c00      	ldrb	r0, [r0, #16]
   b6160:	f7ff f8da 	bl	b5318 <hal_usart_available>
}
   b6164:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6168:	bd08      	pop	{r3, pc}

000b616a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b616a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b616c:	7c00      	ldrb	r0, [r0, #16]
   b616e:	f7ff f8e3 	bl	b5338 <hal_usart_peek>
}
   b6172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6176:	bd08      	pop	{r3, pc}

000b6178 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6178:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b617a:	7c00      	ldrb	r0, [r0, #16]
   b617c:	f7ff f8d4 	bl	b5328 <hal_usart_read>
}
   b6180:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6184:	bd08      	pop	{r3, pc}

000b6186 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6186:	7c00      	ldrb	r0, [r0, #16]
   b6188:	f7ff b8de 	b.w	b5348 <hal_usart_flush>

000b618c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b618c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b618e:	7c45      	ldrb	r5, [r0, #17]
{
   b6190:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6192:	b12d      	cbz	r5, b61a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6194:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6196:	b003      	add	sp, #12
   b6198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b619c:	f7ff b8b4 	b.w	b5308 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b61a0:	7c00      	ldrb	r0, [r0, #16]
   b61a2:	9101      	str	r1, [sp, #4]
   b61a4:	f7ff f8e0 	bl	b5368 <hal_usart_available_data_for_write>
   b61a8:	2800      	cmp	r0, #0
   b61aa:	9901      	ldr	r1, [sp, #4]
   b61ac:	dcf2      	bgt.n	b6194 <_ZN11USARTSerial5writeEh+0x8>
}
   b61ae:	4628      	mov	r0, r5
   b61b0:	b003      	add	sp, #12
   b61b2:	bd30      	pop	{r4, r5, pc}

000b61b4 <_ZN11USARTSerialD0Ev>:
   b61b4:	b510      	push	{r4, lr}
   b61b6:	2114      	movs	r1, #20
   b61b8:	4604      	mov	r4, r0
   b61ba:	f7fd ff6e 	bl	b409a <_ZdlPvj>
   b61be:	4620      	mov	r0, r4
   b61c0:	bd10      	pop	{r4, pc}
	...

000b61c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b61c4:	b510      	push	{r4, lr}
   b61c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61ca:	4604      	mov	r4, r0
   b61cc:	4608      	mov	r0, r1
   b61ce:	4611      	mov	r1, r2
   b61d0:	2200      	movs	r2, #0
   b61d2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b61d6:	4b04      	ldr	r3, [pc, #16]	; (b61e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b61d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61da:	2301      	movs	r3, #1
  _serial = serial;
   b61dc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61de:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b61e0:	f7ff f8ca 	bl	b5378 <hal_usart_init_ex>
}
   b61e4:	4620      	mov	r0, r4
   b61e6:	bd10      	pop	{r4, pc}
   b61e8:	000b7238 	.word	0x000b7238

000b61ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b61ec:	7441      	strb	r1, [r0, #17]
}
   b61ee:	4770      	bx	lr

000b61f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b61f0:	4770      	bx	lr

000b61f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b61f2:	4770      	bx	lr

000b61f4 <_ZN9USBSerial4readEv>:
{
   b61f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b61f6:	2100      	movs	r1, #0
   b61f8:	7c00      	ldrb	r0, [r0, #16]
   b61fa:	f7ff f8e5 	bl	b53c8 <HAL_USB_USART_Receive_Data>
}
   b61fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6202:	bd08      	pop	{r3, pc}

000b6204 <_ZN9USBSerial4peekEv>:
{
   b6204:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6206:	2101      	movs	r1, #1
   b6208:	7c00      	ldrb	r0, [r0, #16]
   b620a:	f7ff f8dd 	bl	b53c8 <HAL_USB_USART_Receive_Data>
}
   b620e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6212:	bd08      	pop	{r3, pc}

000b6214 <_ZN9USBSerial17availableForWriteEv>:
{
   b6214:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6216:	7c00      	ldrb	r0, [r0, #16]
   b6218:	f7ff f8ce 	bl	b53b8 <HAL_USB_USART_Available_Data_For_Write>
}
   b621c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6220:	bd08      	pop	{r3, pc}

000b6222 <_ZN9USBSerial9availableEv>:
{
   b6222:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6224:	7c00      	ldrb	r0, [r0, #16]
   b6226:	f7ff f8bf 	bl	b53a8 <HAL_USB_USART_Available_Data>
}
   b622a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b622e:	bd08      	pop	{r3, pc}

000b6230 <_ZN9USBSerial5writeEh>:
{
   b6230:	b513      	push	{r0, r1, r4, lr}
   b6232:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6234:	7c00      	ldrb	r0, [r0, #16]
{
   b6236:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6238:	f7ff f8be 	bl	b53b8 <HAL_USB_USART_Available_Data_For_Write>
   b623c:	2800      	cmp	r0, #0
   b623e:	9901      	ldr	r1, [sp, #4]
   b6240:	dc01      	bgt.n	b6246 <_ZN9USBSerial5writeEh+0x16>
   b6242:	7c60      	ldrb	r0, [r4, #17]
   b6244:	b120      	cbz	r0, b6250 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6246:	7c20      	ldrb	r0, [r4, #16]
   b6248:	f7ff f8c6 	bl	b53d8 <HAL_USB_USART_Send_Data>
   b624c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6250:	b002      	add	sp, #8
   b6252:	bd10      	pop	{r4, pc}

000b6254 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6254:	7c00      	ldrb	r0, [r0, #16]
   b6256:	f7ff b8c7 	b.w	b53e8 <HAL_USB_USART_Flush_Data>

000b625a <_ZN9USBSerialD0Ev>:
   b625a:	b510      	push	{r4, lr}
   b625c:	2114      	movs	r1, #20
   b625e:	4604      	mov	r4, r0
   b6260:	f7fd ff1b 	bl	b409a <_ZdlPvj>
   b6264:	4620      	mov	r0, r4
   b6266:	bd10      	pop	{r4, pc}

000b6268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6268:	b510      	push	{r4, lr}
   b626a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b626e:	4604      	mov	r4, r0
   b6270:	4608      	mov	r0, r1
   b6272:	2100      	movs	r1, #0
   b6274:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6278:	4b04      	ldr	r3, [pc, #16]	; (b628c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b627a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b627c:	2301      	movs	r3, #1
  _serial = serial;
   b627e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6280:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6282:	4611      	mov	r1, r2
   b6284:	f7ff f880 	bl	b5388 <HAL_USB_USART_Init>
}
   b6288:	4620      	mov	r0, r4
   b628a:	bd10      	pop	{r4, pc}
   b628c:	000b7268 	.word	0x000b7268

000b6290 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6290:	7c00      	ldrb	r0, [r0, #16]
   b6292:	2200      	movs	r2, #0
   b6294:	f7ff b880 	b.w	b5398 <HAL_USB_USART_Begin>

000b6298 <_Z19acquireSerialBufferv>:
{
   b6298:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b629a:	2214      	movs	r2, #20
{
   b629c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b629e:	2100      	movs	r1, #0
   b62a0:	f000 fb16 	bl	b68d0 <memset>
}
   b62a4:	4620      	mov	r0, r4
   b62a6:	bd10      	pop	{r4, pc}

000b62a8 <_Z16_fetch_usbserialv>:
{
   b62a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b62aa:	4c0f      	ldr	r4, [pc, #60]	; (b62e8 <_Z16_fetch_usbserialv+0x40>)
{
   b62ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b62ae:	a803      	add	r0, sp, #12
   b62b0:	f7ff fff2 	bl	b6298 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b62b4:	7821      	ldrb	r1, [r4, #0]
   b62b6:	f3bf 8f5b 	dmb	ish
   b62ba:	f011 0101 	ands.w	r1, r1, #1
   b62be:	d10f      	bne.n	b62e0 <_Z16_fetch_usbserialv+0x38>
   b62c0:	4620      	mov	r0, r4
   b62c2:	9101      	str	r1, [sp, #4]
   b62c4:	f7fd fef8 	bl	b40b8 <__cxa_guard_acquire>
   b62c8:	9901      	ldr	r1, [sp, #4]
   b62ca:	b148      	cbz	r0, b62e0 <_Z16_fetch_usbserialv+0x38>
   b62cc:	aa03      	add	r2, sp, #12
   b62ce:	4807      	ldr	r0, [pc, #28]	; (b62ec <_Z16_fetch_usbserialv+0x44>)
   b62d0:	f7ff ffca 	bl	b6268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b62d4:	4620      	mov	r0, r4
   b62d6:	f7fd fef4 	bl	b40c2 <__cxa_guard_release>
   b62da:	4805      	ldr	r0, [pc, #20]	; (b62f0 <_Z16_fetch_usbserialv+0x48>)
   b62dc:	f000 fae4 	bl	b68a8 <atexit>
	return _usbserial;
}
   b62e0:	4802      	ldr	r0, [pc, #8]	; (b62ec <_Z16_fetch_usbserialv+0x44>)
   b62e2:	b008      	add	sp, #32
   b62e4:	bd10      	pop	{r4, pc}
   b62e6:	bf00      	nop
   b62e8:	2003e700 	.word	0x2003e700
   b62ec:	2003e704 	.word	0x2003e704
   b62f0:	000b61f1 	.word	0x000b61f1

000b62f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b62f4:	2200      	movs	r2, #0
   b62f6:	6840      	ldr	r0, [r0, #4]
   b62f8:	4611      	mov	r1, r2
   b62fa:	f7ff b8c9 	b.w	b5490 <network_ready>

000b62fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b62fe:	2200      	movs	r2, #0
   b6300:	6840      	ldr	r0, [r0, #4]
   b6302:	4611      	mov	r1, r2
   b6304:	f7ff b8e4 	b.w	b54d0 <network_listening>

000b6308 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6308:	2200      	movs	r2, #0
   b630a:	6840      	ldr	r0, [r0, #4]
   b630c:	4611      	mov	r1, r2
   b630e:	f7ff b8ef 	b.w	b54f0 <network_get_listen_timeout>

000b6312 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6312:	6840      	ldr	r0, [r0, #4]
   b6314:	2200      	movs	r2, #0
   b6316:	f7ff b8e3 	b.w	b54e0 <network_set_listen_timeout>

000b631a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b631a:	6840      	ldr	r0, [r0, #4]
   b631c:	2200      	movs	r2, #0
   b631e:	f081 0101 	eor.w	r1, r1, #1
   b6322:	f7ff b8cd 	b.w	b54c0 <network_listen>

000b6326 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6326:	2300      	movs	r3, #0
   b6328:	6840      	ldr	r0, [r0, #4]
   b632a:	461a      	mov	r2, r3
   b632c:	4619      	mov	r1, r3
   b632e:	f7ff b8bf 	b.w	b54b0 <network_off>

000b6332 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6332:	2300      	movs	r3, #0
   b6334:	6840      	ldr	r0, [r0, #4]
   b6336:	461a      	mov	r2, r3
   b6338:	4619      	mov	r1, r3
   b633a:	f7ff b8b1 	b.w	b54a0 <network_on>

000b633e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b633e:	2200      	movs	r2, #0
   b6340:	6840      	ldr	r0, [r0, #4]
   b6342:	4611      	mov	r1, r2
   b6344:	f7ff b894 	b.w	b5470 <network_connecting>

000b6348 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6348:	6840      	ldr	r0, [r0, #4]
   b634a:	2200      	movs	r2, #0
   b634c:	2102      	movs	r1, #2
   b634e:	f7ff b897 	b.w	b5480 <network_disconnect>

000b6352 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6352:	2300      	movs	r3, #0
   b6354:	6840      	ldr	r0, [r0, #4]
   b6356:	461a      	mov	r2, r3
   b6358:	f7ff b882 	b.w	b5460 <network_connect>

000b635c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b635c:	4b02      	ldr	r3, [pc, #8]	; (b6368 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b635e:	2204      	movs	r2, #4
   b6360:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6362:	4a02      	ldr	r2, [pc, #8]	; (b636c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6364:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6366:	4770      	bx	lr
   b6368:	2003e718 	.word	0x2003e718
   b636c:	000b7298 	.word	0x000b7298

000b6370 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6370:	4b01      	ldr	r3, [pc, #4]	; (b6378 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6372:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6374:	4770      	bx	lr
   b6376:	bf00      	nop
   b6378:	2003e4b8 	.word	0x2003e4b8

000b637c <serialEventRun>:
{
   b637c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b637e:	4b0b      	ldr	r3, [pc, #44]	; (b63ac <serialEventRun+0x30>)
   b6380:	b143      	cbz	r3, b6394 <serialEventRun+0x18>
   b6382:	f7ff ff91 	bl	b62a8 <_Z16_fetch_usbserialv>
   b6386:	6803      	ldr	r3, [r0, #0]
   b6388:	691b      	ldr	r3, [r3, #16]
   b638a:	4798      	blx	r3
   b638c:	2800      	cmp	r0, #0
   b638e:	dd01      	ble.n	b6394 <serialEventRun+0x18>
        serialEvent();
   b6390:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6394:	4b06      	ldr	r3, [pc, #24]	; (b63b0 <serialEventRun+0x34>)
   b6396:	b143      	cbz	r3, b63aa <serialEventRun+0x2e>
   b6398:	f000 f94a 	bl	b6630 <_Z22__fetch_global_Serial1v>
   b639c:	6803      	ldr	r3, [r0, #0]
   b639e:	691b      	ldr	r3, [r3, #16]
   b63a0:	4798      	blx	r3
   b63a2:	2800      	cmp	r0, #0
   b63a4:	dd01      	ble.n	b63aa <serialEventRun+0x2e>
        serialEvent1();
   b63a6:	f3af 8000 	nop.w
}
   b63aa:	bd08      	pop	{r3, pc}
	...

000b63b4 <_post_loop>:
{
   b63b4:	b508      	push	{r3, lr}
	serialEventRun();
   b63b6:	f7ff ffe1 	bl	b637c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b63ba:	f7fe fec5 	bl	b5148 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b63be:	4b01      	ldr	r3, [pc, #4]	; (b63c4 <_post_loop+0x10>)
   b63c0:	6018      	str	r0, [r3, #0]
}
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	2003e728 	.word	0x2003e728

000b63c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63c8:	4805      	ldr	r0, [pc, #20]	; (b63e0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b63ca:	4a06      	ldr	r2, [pc, #24]	; (b63e4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b63cc:	4906      	ldr	r1, [pc, #24]	; (b63e8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b63ce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63d0:	1a12      	subs	r2, r2, r0
   b63d2:	f000 fa6f 	bl	b68b4 <memcpy>
    __backup_sram_signature = signature;
   b63d6:	4b05      	ldr	r3, [pc, #20]	; (b63ec <_Z33system_initialize_user_backup_ramv+0x24>)
   b63d8:	4a05      	ldr	r2, [pc, #20]	; (b63f0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b63da:	601a      	str	r2, [r3, #0]
}
   b63dc:	bd08      	pop	{r3, pc}
   b63de:	bf00      	nop
   b63e0:	2003f400 	.word	0x2003f400
   b63e4:	2003f404 	.word	0x2003f404
   b63e8:	000b7484 	.word	0x000b7484
   b63ec:	2003f400 	.word	0x2003f400
   b63f0:	9a271c1e 	.word	0x9a271c1e

000b63f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b63f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b63f6:	2300      	movs	r3, #0
   b63f8:	9300      	str	r3, [sp, #0]
   b63fa:	461a      	mov	r2, r3
   b63fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6400:	f7ff f81c 	bl	b543c <system_ctrl_set_result>
}
   b6404:	b003      	add	sp, #12
   b6406:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b640c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b640c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b640e:	8843      	ldrh	r3, [r0, #2]
   b6410:	2b0a      	cmp	r3, #10
   b6412:	d008      	beq.n	b6426 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6414:	2b50      	cmp	r3, #80	; 0x50
   b6416:	d10b      	bne.n	b6430 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6418:	4b09      	ldr	r3, [pc, #36]	; (b6440 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b641a:	681b      	ldr	r3, [r3, #0]
   b641c:	b14b      	cbz	r3, b6432 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b641e:	b003      	add	sp, #12
   b6420:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6424:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6426:	f7ff ffe5 	bl	b63f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b642a:	b003      	add	sp, #12
   b642c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6430:	2300      	movs	r3, #0
   b6432:	9300      	str	r3, [sp, #0]
   b6434:	461a      	mov	r2, r3
   b6436:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b643a:	f7fe ffff 	bl	b543c <system_ctrl_set_result>
}
   b643e:	e7f4      	b.n	b642a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6440:	2003e724 	.word	0x2003e724

000b6444 <module_user_init_hook>:
{
   b6444:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6446:	4812      	ldr	r0, [pc, #72]	; (b6490 <module_user_init_hook+0x4c>)
   b6448:	2100      	movs	r1, #0
   b644a:	f7ff f899 	bl	b5580 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b644e:	4b11      	ldr	r3, [pc, #68]	; (b6494 <module_user_init_hook+0x50>)
   b6450:	681a      	ldr	r2, [r3, #0]
   b6452:	4b11      	ldr	r3, [pc, #68]	; (b6498 <module_user_init_hook+0x54>)
   b6454:	429a      	cmp	r2, r3
   b6456:	4b11      	ldr	r3, [pc, #68]	; (b649c <module_user_init_hook+0x58>)
   b6458:	bf0c      	ite	eq
   b645a:	2201      	moveq	r2, #1
   b645c:	2200      	movne	r2, #0
   b645e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6460:	d001      	beq.n	b6466 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6462:	f7ff ffb1 	bl	b63c8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6466:	f7fe fe57 	bl	b5118 <HAL_RNG_GetRandomNumber>
   b646a:	4604      	mov	r4, r0
    srand(seed);
   b646c:	f000 fa38 	bl	b68e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6470:	4b0b      	ldr	r3, [pc, #44]	; (b64a0 <module_user_init_hook+0x5c>)
   b6472:	b113      	cbz	r3, b647a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6474:	4620      	mov	r0, r4
   b6476:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b647a:	2100      	movs	r1, #0
   b647c:	4808      	ldr	r0, [pc, #32]	; (b64a0 <module_user_init_hook+0x5c>)
   b647e:	f7fe ffe7 	bl	b5450 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6486:	4807      	ldr	r0, [pc, #28]	; (b64a4 <module_user_init_hook+0x60>)
   b6488:	2100      	movs	r1, #0
   b648a:	f7fe bfcd 	b.w	b5428 <system_ctrl_set_app_request_handler>
   b648e:	bf00      	nop
   b6490:	000b6371 	.word	0x000b6371
   b6494:	2003f400 	.word	0x2003f400
   b6498:	9a271c1e 	.word	0x9a271c1e
   b649c:	2003e720 	.word	0x2003e720
   b64a0:	00000000 	.word	0x00000000
   b64a4:	000b640d 	.word	0x000b640d

000b64a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b64a8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b64aa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b64ac:	d902      	bls.n	b64b4 <pinAvailable+0xc>
    return false;
   b64ae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b64b0:	b002      	add	sp, #8
   b64b2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b64b4:	f1a0 030b 	sub.w	r3, r0, #11
   b64b8:	2b02      	cmp	r3, #2
   b64ba:	d81a      	bhi.n	b64f2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b64bc:	4c17      	ldr	r4, [pc, #92]	; (b651c <pinAvailable+0x74>)
   b64be:	7821      	ldrb	r1, [r4, #0]
   b64c0:	f3bf 8f5b 	dmb	ish
   b64c4:	f011 0101 	ands.w	r1, r1, #1
   b64c8:	d10b      	bne.n	b64e2 <pinAvailable+0x3a>
   b64ca:	4620      	mov	r0, r4
   b64cc:	9101      	str	r1, [sp, #4]
   b64ce:	f7fd fdf3 	bl	b40b8 <__cxa_guard_acquire>
   b64d2:	9901      	ldr	r1, [sp, #4]
   b64d4:	b128      	cbz	r0, b64e2 <pinAvailable+0x3a>
   b64d6:	4812      	ldr	r0, [pc, #72]	; (b6520 <pinAvailable+0x78>)
   b64d8:	f7ff faec 	bl	b5ab4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b64dc:	4620      	mov	r0, r4
   b64de:	f7fd fdf0 	bl	b40c2 <__cxa_guard_release>
   b64e2:	4b0f      	ldr	r3, [pc, #60]	; (b6520 <pinAvailable+0x78>)
   b64e4:	7818      	ldrb	r0, [r3, #0]
   b64e6:	f7fe ff07 	bl	b52f8 <hal_spi_is_enabled>
   b64ea:	2800      	cmp	r0, #0
   b64ec:	d1df      	bne.n	b64ae <pinAvailable+0x6>
  return true; // 'pin' is available
   b64ee:	2001      	movs	r0, #1
   b64f0:	e7de      	b.n	b64b0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b64f2:	2801      	cmp	r0, #1
   b64f4:	d809      	bhi.n	b650a <pinAvailable+0x62>
   b64f6:	f000 f85b 	bl	b65b0 <_Z19__fetch_global_Wirev>
   b64fa:	2100      	movs	r1, #0
   b64fc:	7c00      	ldrb	r0, [r0, #16]
   b64fe:	f7fe fe83 	bl	b5208 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6502:	f080 0001 	eor.w	r0, r0, #1
   b6506:	b2c0      	uxtb	r0, r0
   b6508:	e7d2      	b.n	b64b0 <pinAvailable+0x8>
   b650a:	3809      	subs	r0, #9
   b650c:	2801      	cmp	r0, #1
   b650e:	d8ee      	bhi.n	b64ee <pinAvailable+0x46>
   b6510:	f000 f88e 	bl	b6630 <_Z22__fetch_global_Serial1v>
   b6514:	7c00      	ldrb	r0, [r0, #16]
   b6516:	f7fe ff1f 	bl	b5358 <hal_usart_is_enabled>
   b651a:	e7f2      	b.n	b6502 <pinAvailable+0x5a>
   b651c:	2003e624 	.word	0x2003e624
   b6520:	2003e628 	.word	0x2003e628

000b6524 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6524:	2823      	cmp	r0, #35	; 0x23
{
   b6526:	b538      	push	{r3, r4, r5, lr}
   b6528:	4604      	mov	r4, r0
   b652a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b652c:	d80a      	bhi.n	b6544 <pinMode+0x20>
   b652e:	29ff      	cmp	r1, #255	; 0xff
   b6530:	d008      	beq.n	b6544 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6532:	f7ff ffb9 	bl	b64a8 <pinAvailable>
   b6536:	b128      	cbz	r0, b6544 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6538:	4629      	mov	r1, r5
   b653a:	4620      	mov	r0, r4
}
   b653c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6540:	f7fe be12 	b.w	b5168 <HAL_Pin_Mode>
}
   b6544:	bd38      	pop	{r3, r4, r5, pc}

000b6546 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6546:	b538      	push	{r3, r4, r5, lr}
   b6548:	4604      	mov	r4, r0
   b654a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b654c:	f7fe fe14 	bl	b5178 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6550:	28ff      	cmp	r0, #255	; 0xff
   b6552:	d010      	beq.n	b6576 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6554:	2806      	cmp	r0, #6
   b6556:	d804      	bhi.n	b6562 <digitalWrite+0x1c>
   b6558:	234d      	movs	r3, #77	; 0x4d
   b655a:	fa23 f000 	lsr.w	r0, r3, r0
   b655e:	07c3      	lsls	r3, r0, #31
   b6560:	d409      	bmi.n	b6576 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6562:	4620      	mov	r0, r4
   b6564:	f7ff ffa0 	bl	b64a8 <pinAvailable>
   b6568:	b128      	cbz	r0, b6576 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b656a:	4629      	mov	r1, r5
   b656c:	4620      	mov	r0, r4
}
   b656e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6572:	f7fe be09 	b.w	b5188 <HAL_GPIO_Write>
}
   b6576:	bd38      	pop	{r3, r4, r5, pc}

000b6578 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6578:	4770      	bx	lr
	...

000b657c <_Z17acquireWireBufferv>:
{
   b657c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b657e:	4b0a      	ldr	r3, [pc, #40]	; (b65a8 <_Z17acquireWireBufferv+0x2c>)
   b6580:	6003      	str	r3, [r0, #0]
   b6582:	2301      	movs	r3, #1
{
   b6584:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6586:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6588:	4908      	ldr	r1, [pc, #32]	; (b65ac <_Z17acquireWireBufferv+0x30>)
   b658a:	2020      	movs	r0, #32
   b658c:	f000 f874 	bl	b6678 <_ZnajRKSt9nothrow_t>
	};
   b6590:	2520      	movs	r5, #32
   b6592:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6594:	4905      	ldr	r1, [pc, #20]	; (b65ac <_Z17acquireWireBufferv+0x30>)
	};
   b6596:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6598:	4628      	mov	r0, r5
   b659a:	f000 f86d 	bl	b6678 <_ZnajRKSt9nothrow_t>
	};
   b659e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b65a2:	4620      	mov	r0, r4
   b65a4:	bd38      	pop	{r3, r4, r5, pc}
   b65a6:	bf00      	nop
   b65a8:	00010018 	.word	0x00010018
   b65ac:	000b72cc 	.word	0x000b72cc

000b65b0 <_Z19__fetch_global_Wirev>:
{
   b65b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b65b2:	4d0e      	ldr	r5, [pc, #56]	; (b65ec <_Z19__fetch_global_Wirev+0x3c>)
   b65b4:	7829      	ldrb	r1, [r5, #0]
   b65b6:	f3bf 8f5b 	dmb	ish
   b65ba:	f011 0401 	ands.w	r4, r1, #1
{
   b65be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b65c0:	d111      	bne.n	b65e6 <_Z19__fetch_global_Wirev+0x36>
   b65c2:	4628      	mov	r0, r5
   b65c4:	f7fd fd78 	bl	b40b8 <__cxa_guard_acquire>
   b65c8:	b168      	cbz	r0, b65e6 <_Z19__fetch_global_Wirev+0x36>
   b65ca:	4668      	mov	r0, sp
   b65cc:	f7ff ffd6 	bl	b657c <_Z17acquireWireBufferv>
   b65d0:	466a      	mov	r2, sp
   b65d2:	4621      	mov	r1, r4
   b65d4:	4806      	ldr	r0, [pc, #24]	; (b65f0 <_Z19__fetch_global_Wirev+0x40>)
   b65d6:	f7ff f857 	bl	b5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b65da:	4628      	mov	r0, r5
   b65dc:	f7fd fd71 	bl	b40c2 <__cxa_guard_release>
   b65e0:	4804      	ldr	r0, [pc, #16]	; (b65f4 <_Z19__fetch_global_Wirev+0x44>)
   b65e2:	f000 f961 	bl	b68a8 <atexit>
	return wire;
}
   b65e6:	4802      	ldr	r0, [pc, #8]	; (b65f0 <_Z19__fetch_global_Wirev+0x40>)
   b65e8:	b007      	add	sp, #28
   b65ea:	bd30      	pop	{r4, r5, pc}
   b65ec:	2003e72c 	.word	0x2003e72c
   b65f0:	2003e730 	.word	0x2003e730
   b65f4:	000b6579 	.word	0x000b6579

000b65f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b65f8:	4770      	bx	lr
	...

000b65fc <_Z20acquireSerial1Bufferv>:
{
   b65fc:	b538      	push	{r3, r4, r5, lr}
   b65fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6600:	2514      	movs	r5, #20
   b6602:	462a      	mov	r2, r5
   b6604:	2100      	movs	r1, #0
   b6606:	f000 f963 	bl	b68d0 <memset>
   b660a:	8025      	strh	r5, [r4, #0]
   b660c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b660e:	4907      	ldr	r1, [pc, #28]	; (b662c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6610:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6612:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6614:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6616:	f000 f82f 	bl	b6678 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b661a:	4904      	ldr	r1, [pc, #16]	; (b662c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b661c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b661e:	4628      	mov	r0, r5
   b6620:	f000 f82a 	bl	b6678 <_ZnajRKSt9nothrow_t>
    };
   b6624:	60e0      	str	r0, [r4, #12]
}
   b6626:	4620      	mov	r0, r4
   b6628:	bd38      	pop	{r3, r4, r5, pc}
   b662a:	bf00      	nop
   b662c:	000b72cc 	.word	0x000b72cc

000b6630 <_Z22__fetch_global_Serial1v>:
{
   b6630:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6632:	4d0e      	ldr	r5, [pc, #56]	; (b666c <_Z22__fetch_global_Serial1v+0x3c>)
   b6634:	7829      	ldrb	r1, [r5, #0]
   b6636:	f3bf 8f5b 	dmb	ish
   b663a:	f011 0401 	ands.w	r4, r1, #1
{
   b663e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6640:	d111      	bne.n	b6666 <_Z22__fetch_global_Serial1v+0x36>
   b6642:	4628      	mov	r0, r5
   b6644:	f7fd fd38 	bl	b40b8 <__cxa_guard_acquire>
   b6648:	b168      	cbz	r0, b6666 <_Z22__fetch_global_Serial1v+0x36>
   b664a:	a801      	add	r0, sp, #4
   b664c:	f7ff ffd6 	bl	b65fc <_Z20acquireSerial1Bufferv>
   b6650:	aa01      	add	r2, sp, #4
   b6652:	4621      	mov	r1, r4
   b6654:	4806      	ldr	r0, [pc, #24]	; (b6670 <_Z22__fetch_global_Serial1v+0x40>)
   b6656:	f7ff fdb5 	bl	b61c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b665a:	4628      	mov	r0, r5
   b665c:	f7fd fd31 	bl	b40c2 <__cxa_guard_release>
   b6660:	4804      	ldr	r0, [pc, #16]	; (b6674 <_Z22__fetch_global_Serial1v+0x44>)
   b6662:	f000 f921 	bl	b68a8 <atexit>
    return serial1;
}
   b6666:	4802      	ldr	r0, [pc, #8]	; (b6670 <_Z22__fetch_global_Serial1v+0x40>)
   b6668:	b007      	add	sp, #28
   b666a:	bd30      	pop	{r4, r5, pc}
   b666c:	2003e744 	.word	0x2003e744
   b6670:	2003e748 	.word	0x2003e748
   b6674:	000b65f9 	.word	0x000b65f9

000b6678 <_ZnajRKSt9nothrow_t>:
   b6678:	f7fd bd0d 	b.w	b4096 <_Znaj>

000b667c <_ZSt25__throw_bad_function_callv>:
   b667c:	b508      	push	{r3, lr}
   b667e:	f7fe ff67 	bl	b5550 <abort>
	...

000b6684 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6684:	4901      	ldr	r1, [pc, #4]	; (b668c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6686:	f000 b8f9 	b.w	b687c <_ZNKSt9type_infoeqERKS_>
   b668a:	bf00      	nop
   b668c:	000b72e8 	.word	0x000b72e8

000b6690 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6692:	2400      	movs	r4, #0
   b6694:	2310      	movs	r3, #16
   b6696:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b669a:	6803      	ldr	r3, [r0, #0]
   b669c:	4615      	mov	r5, r2
   b669e:	699e      	ldr	r6, [r3, #24]
   b66a0:	6812      	ldr	r2, [r2, #0]
   b66a2:	466b      	mov	r3, sp
   b66a4:	e9cd 4400 	strd	r4, r4, [sp]
   b66a8:	47b0      	blx	r6
   b66aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b66ae:	f003 0306 	and.w	r3, r3, #6
   b66b2:	2b06      	cmp	r3, #6
   b66b4:	bf03      	ittte	eq
   b66b6:	9b00      	ldreq	r3, [sp, #0]
   b66b8:	602b      	streq	r3, [r5, #0]
   b66ba:	2001      	moveq	r0, #1
   b66bc:	4620      	movne	r0, r4
   b66be:	b004      	add	sp, #16
   b66c0:	bd70      	pop	{r4, r5, r6, pc}

000b66c2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b66c2:	9800      	ldr	r0, [sp, #0]
   b66c4:	4290      	cmp	r0, r2
   b66c6:	bf14      	ite	ne
   b66c8:	2001      	movne	r0, #1
   b66ca:	2006      	moveq	r0, #6
   b66cc:	4770      	bx	lr
	...

000b66d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b66d0:	b510      	push	{r4, lr}
   b66d2:	4b03      	ldr	r3, [pc, #12]	; (b66e0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b66d4:	6003      	str	r3, [r0, #0]
   b66d6:	4604      	mov	r4, r0
   b66d8:	f000 f8cd 	bl	b6876 <_ZNSt9type_infoD1Ev>
   b66dc:	4620      	mov	r0, r4
   b66de:	bd10      	pop	{r4, pc}
   b66e0:	000b7328 	.word	0x000b7328

000b66e4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b66e4:	b510      	push	{r4, lr}
   b66e6:	4604      	mov	r4, r0
   b66e8:	f7ff fff2 	bl	b66d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b66ec:	4620      	mov	r0, r4
   b66ee:	2108      	movs	r1, #8
   b66f0:	f7fd fcd3 	bl	b409a <_ZdlPvj>
   b66f4:	4620      	mov	r0, r4
   b66f6:	bd10      	pop	{r4, pc}

000b66f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b66f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66fc:	461f      	mov	r7, r3
   b66fe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6702:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6706:	4598      	cmp	r8, r3
   b6708:	4606      	mov	r6, r0
   b670a:	4615      	mov	r5, r2
   b670c:	d107      	bne.n	b671e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b670e:	9907      	ldr	r1, [sp, #28]
   b6710:	f000 f8b4 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b6714:	b118      	cbz	r0, b671e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6716:	7165      	strb	r5, [r4, #5]
   b6718:	2000      	movs	r0, #0
   b671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b671e:	4639      	mov	r1, r7
   b6720:	4630      	mov	r0, r6
   b6722:	f000 f8ab 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b6726:	2800      	cmp	r0, #0
   b6728:	d0f6      	beq.n	b6718 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b672a:	2301      	movs	r3, #1
   b672c:	f8c4 8000 	str.w	r8, [r4]
   b6730:	7125      	strb	r5, [r4, #4]
   b6732:	71a3      	strb	r3, [r4, #6]
   b6734:	e7f0      	b.n	b6718 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6736 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6736:	b538      	push	{r3, r4, r5, lr}
   b6738:	4615      	mov	r5, r2
   b673a:	461c      	mov	r4, r3
   b673c:	f000 f89e 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b6740:	b120      	cbz	r0, b674c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6742:	2308      	movs	r3, #8
   b6744:	60e3      	str	r3, [r4, #12]
   b6746:	2306      	movs	r3, #6
   b6748:	6025      	str	r5, [r4, #0]
   b674a:	7123      	strb	r3, [r4, #4]
   b674c:	bd38      	pop	{r3, r4, r5, pc}

000b674e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b674e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6750:	4605      	mov	r5, r0
   b6752:	460c      	mov	r4, r1
   b6754:	9201      	str	r2, [sp, #4]
   b6756:	461e      	mov	r6, r3
   b6758:	f000 f890 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b675c:	b950      	cbnz	r0, b6774 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b675e:	2e03      	cmp	r6, #3
   b6760:	d808      	bhi.n	b6774 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6762:	6823      	ldr	r3, [r4, #0]
   b6764:	9a01      	ldr	r2, [sp, #4]
   b6766:	695b      	ldr	r3, [r3, #20]
   b6768:	4629      	mov	r1, r5
   b676a:	4620      	mov	r0, r4
   b676c:	b002      	add	sp, #8
   b676e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6772:	4718      	bx	r3
   b6774:	b002      	add	sp, #8
   b6776:	bd70      	pop	{r4, r5, r6, pc}

000b6778 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6778:	b510      	push	{r4, lr}
   b677a:	4b03      	ldr	r3, [pc, #12]	; (b6788 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b677c:	6003      	str	r3, [r0, #0]
   b677e:	4604      	mov	r4, r0
   b6780:	f7ff ffa6 	bl	b66d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6784:	4620      	mov	r0, r4
   b6786:	bd10      	pop	{r4, pc}
   b6788:	000b7388 	.word	0x000b7388

000b678c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b678c:	b510      	push	{r4, lr}
   b678e:	4604      	mov	r4, r0
   b6790:	f7ff fff2 	bl	b6778 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6794:	4620      	mov	r0, r4
   b6796:	210c      	movs	r1, #12
   b6798:	f7fd fc7f 	bl	b409a <_ZdlPvj>
   b679c:	4620      	mov	r0, r4
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b67a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b67a2:	9f08      	ldr	r7, [sp, #32]
   b67a4:	4297      	cmp	r7, r2
   b67a6:	4605      	mov	r5, r0
   b67a8:	460e      	mov	r6, r1
   b67aa:	4614      	mov	r4, r2
   b67ac:	d00a      	beq.n	b67c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b67ae:	68a8      	ldr	r0, [r5, #8]
   b67b0:	6802      	ldr	r2, [r0, #0]
   b67b2:	9708      	str	r7, [sp, #32]
   b67b4:	6a15      	ldr	r5, [r2, #32]
   b67b6:	4631      	mov	r1, r6
   b67b8:	4622      	mov	r2, r4
   b67ba:	46ac      	mov	ip, r5
   b67bc:	b003      	add	sp, #12
   b67be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b67c2:	4760      	bx	ip
   b67c4:	4619      	mov	r1, r3
   b67c6:	9301      	str	r3, [sp, #4]
   b67c8:	f000 f858 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b67cc:	9b01      	ldr	r3, [sp, #4]
   b67ce:	2800      	cmp	r0, #0
   b67d0:	d0ed      	beq.n	b67ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b67d2:	2006      	movs	r0, #6
   b67d4:	b003      	add	sp, #12
   b67d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b67d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b67d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67dc:	460d      	mov	r5, r1
   b67de:	4619      	mov	r1, r3
   b67e0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b67e4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b67e8:	4681      	mov	r9, r0
   b67ea:	4617      	mov	r7, r2
   b67ec:	4698      	mov	r8, r3
   b67ee:	f000 f845 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b67f2:	b190      	cbz	r0, b681a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b67f4:	2d00      	cmp	r5, #0
   b67f6:	6034      	str	r4, [r6, #0]
   b67f8:	7137      	strb	r7, [r6, #4]
   b67fa:	db09      	blt.n	b6810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b67fc:	1961      	adds	r1, r4, r5
   b67fe:	458a      	cmp	sl, r1
   b6800:	bf0c      	ite	eq
   b6802:	2106      	moveq	r1, #6
   b6804:	2101      	movne	r1, #1
   b6806:	71b1      	strb	r1, [r6, #6]
   b6808:	2000      	movs	r0, #0
   b680a:	b001      	add	sp, #4
   b680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6810:	3502      	adds	r5, #2
   b6812:	d1f9      	bne.n	b6808 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6814:	2301      	movs	r3, #1
   b6816:	71b3      	strb	r3, [r6, #6]
   b6818:	e7f6      	b.n	b6808 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b681a:	4554      	cmp	r4, sl
   b681c:	d106      	bne.n	b682c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b681e:	4659      	mov	r1, fp
   b6820:	4648      	mov	r0, r9
   b6822:	f000 f82b 	bl	b687c <_ZNKSt9type_infoeqERKS_>
   b6826:	b108      	cbz	r0, b682c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6828:	7177      	strb	r7, [r6, #5]
   b682a:	e7ed      	b.n	b6808 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b682c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6830:	6803      	ldr	r3, [r0, #0]
   b6832:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6836:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b683a:	69dc      	ldr	r4, [r3, #28]
   b683c:	463a      	mov	r2, r7
   b683e:	4643      	mov	r3, r8
   b6840:	4629      	mov	r1, r5
   b6842:	46a4      	mov	ip, r4
   b6844:	b001      	add	sp, #4
   b6846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b684a:	4760      	bx	ip

000b684c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b684c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6850:	4607      	mov	r7, r0
   b6852:	460c      	mov	r4, r1
   b6854:	4615      	mov	r5, r2
   b6856:	461e      	mov	r6, r3
   b6858:	f7ff ff6d 	bl	b6736 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b685c:	b948      	cbnz	r0, b6872 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b685e:	68b8      	ldr	r0, [r7, #8]
   b6860:	6803      	ldr	r3, [r0, #0]
   b6862:	699f      	ldr	r7, [r3, #24]
   b6864:	462a      	mov	r2, r5
   b6866:	4633      	mov	r3, r6
   b6868:	4621      	mov	r1, r4
   b686a:	46bc      	mov	ip, r7
   b686c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6870:	4760      	bx	ip
   b6872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6876 <_ZNSt9type_infoD1Ev>:
   b6876:	4770      	bx	lr

000b6878 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6878:	2000      	movs	r0, #0
   b687a:	4770      	bx	lr

000b687c <_ZNKSt9type_infoeqERKS_>:
   b687c:	4281      	cmp	r1, r0
   b687e:	b508      	push	{r3, lr}
   b6880:	d00e      	beq.n	b68a0 <_ZNKSt9type_infoeqERKS_+0x24>
   b6882:	6840      	ldr	r0, [r0, #4]
   b6884:	7803      	ldrb	r3, [r0, #0]
   b6886:	2b2a      	cmp	r3, #42	; 0x2a
   b6888:	d00c      	beq.n	b68a4 <_ZNKSt9type_infoeqERKS_+0x28>
   b688a:	6849      	ldr	r1, [r1, #4]
   b688c:	780b      	ldrb	r3, [r1, #0]
   b688e:	2b2a      	cmp	r3, #42	; 0x2a
   b6890:	bf08      	it	eq
   b6892:	3101      	addeq	r1, #1
   b6894:	f000 f852 	bl	b693c <strcmp>
   b6898:	fab0 f080 	clz	r0, r0
   b689c:	0940      	lsrs	r0, r0, #5
   b689e:	bd08      	pop	{r3, pc}
   b68a0:	2001      	movs	r0, #1
   b68a2:	e7fc      	b.n	b689e <_ZNKSt9type_infoeqERKS_+0x22>
   b68a4:	2000      	movs	r0, #0
   b68a6:	e7fa      	b.n	b689e <_ZNKSt9type_infoeqERKS_+0x22>

000b68a8 <atexit>:
   b68a8:	2300      	movs	r3, #0
   b68aa:	4601      	mov	r1, r0
   b68ac:	461a      	mov	r2, r3
   b68ae:	4618      	mov	r0, r3
   b68b0:	f000 b856 	b.w	b6960 <__register_exitproc>

000b68b4 <memcpy>:
   b68b4:	440a      	add	r2, r1
   b68b6:	4291      	cmp	r1, r2
   b68b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b68bc:	d100      	bne.n	b68c0 <memcpy+0xc>
   b68be:	4770      	bx	lr
   b68c0:	b510      	push	{r4, lr}
   b68c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b68c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b68ca:	4291      	cmp	r1, r2
   b68cc:	d1f9      	bne.n	b68c2 <memcpy+0xe>
   b68ce:	bd10      	pop	{r4, pc}

000b68d0 <memset>:
   b68d0:	4402      	add	r2, r0
   b68d2:	4603      	mov	r3, r0
   b68d4:	4293      	cmp	r3, r2
   b68d6:	d100      	bne.n	b68da <memset+0xa>
   b68d8:	4770      	bx	lr
   b68da:	f803 1b01 	strb.w	r1, [r3], #1
   b68de:	e7f9      	b.n	b68d4 <memset+0x4>

000b68e0 <srand>:
   b68e0:	b538      	push	{r3, r4, r5, lr}
   b68e2:	4b10      	ldr	r3, [pc, #64]	; (b6924 <srand+0x44>)
   b68e4:	681d      	ldr	r5, [r3, #0]
   b68e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b68e8:	4604      	mov	r4, r0
   b68ea:	b9b3      	cbnz	r3, b691a <srand+0x3a>
   b68ec:	2018      	movs	r0, #24
   b68ee:	f7fe fe17 	bl	b5520 <malloc>
   b68f2:	4602      	mov	r2, r0
   b68f4:	63a8      	str	r0, [r5, #56]	; 0x38
   b68f6:	b920      	cbnz	r0, b6902 <srand+0x22>
   b68f8:	4b0b      	ldr	r3, [pc, #44]	; (b6928 <srand+0x48>)
   b68fa:	480c      	ldr	r0, [pc, #48]	; (b692c <srand+0x4c>)
   b68fc:	2142      	movs	r1, #66	; 0x42
   b68fe:	f7fe fe37 	bl	b5570 <__assert_func>
   b6902:	490b      	ldr	r1, [pc, #44]	; (b6930 <srand+0x50>)
   b6904:	4b0b      	ldr	r3, [pc, #44]	; (b6934 <srand+0x54>)
   b6906:	e9c0 1300 	strd	r1, r3, [r0]
   b690a:	4b0b      	ldr	r3, [pc, #44]	; (b6938 <srand+0x58>)
   b690c:	6083      	str	r3, [r0, #8]
   b690e:	230b      	movs	r3, #11
   b6910:	8183      	strh	r3, [r0, #12]
   b6912:	2100      	movs	r1, #0
   b6914:	2001      	movs	r0, #1
   b6916:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b691a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b691c:	2200      	movs	r2, #0
   b691e:	611c      	str	r4, [r3, #16]
   b6920:	615a      	str	r2, [r3, #20]
   b6922:	bd38      	pop	{r3, r4, r5, pc}
   b6924:	2003e4b8 	.word	0x2003e4b8
   b6928:	000b73c1 	.word	0x000b73c1
   b692c:	000b73d8 	.word	0x000b73d8
   b6930:	abcd330e 	.word	0xabcd330e
   b6934:	e66d1234 	.word	0xe66d1234
   b6938:	0005deec 	.word	0x0005deec

000b693c <strcmp>:
   b693c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6940:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6944:	2a01      	cmp	r2, #1
   b6946:	bf28      	it	cs
   b6948:	429a      	cmpcs	r2, r3
   b694a:	d0f7      	beq.n	b693c <strcmp>
   b694c:	1ad0      	subs	r0, r2, r3
   b694e:	4770      	bx	lr

000b6950 <strlen>:
   b6950:	4603      	mov	r3, r0
   b6952:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6956:	2a00      	cmp	r2, #0
   b6958:	d1fb      	bne.n	b6952 <strlen+0x2>
   b695a:	1a18      	subs	r0, r3, r0
   b695c:	3801      	subs	r0, #1
   b695e:	4770      	bx	lr

000b6960 <__register_exitproc>:
   b6960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6964:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6a20 <__register_exitproc+0xc0>
   b6968:	4606      	mov	r6, r0
   b696a:	f8d8 0000 	ldr.w	r0, [r8]
   b696e:	461f      	mov	r7, r3
   b6970:	460d      	mov	r5, r1
   b6972:	4691      	mov	r9, r2
   b6974:	f000 f856 	bl	b6a24 <__retarget_lock_acquire_recursive>
   b6978:	4b25      	ldr	r3, [pc, #148]	; (b6a10 <__register_exitproc+0xb0>)
   b697a:	681c      	ldr	r4, [r3, #0]
   b697c:	b934      	cbnz	r4, b698c <__register_exitproc+0x2c>
   b697e:	4c25      	ldr	r4, [pc, #148]	; (b6a14 <__register_exitproc+0xb4>)
   b6980:	601c      	str	r4, [r3, #0]
   b6982:	4b25      	ldr	r3, [pc, #148]	; (b6a18 <__register_exitproc+0xb8>)
   b6984:	b113      	cbz	r3, b698c <__register_exitproc+0x2c>
   b6986:	681b      	ldr	r3, [r3, #0]
   b6988:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b698c:	6863      	ldr	r3, [r4, #4]
   b698e:	2b1f      	cmp	r3, #31
   b6990:	dd07      	ble.n	b69a2 <__register_exitproc+0x42>
   b6992:	f8d8 0000 	ldr.w	r0, [r8]
   b6996:	f000 f847 	bl	b6a28 <__retarget_lock_release_recursive>
   b699a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b69a2:	b34e      	cbz	r6, b69f8 <__register_exitproc+0x98>
   b69a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b69a8:	b988      	cbnz	r0, b69ce <__register_exitproc+0x6e>
   b69aa:	4b1c      	ldr	r3, [pc, #112]	; (b6a1c <__register_exitproc+0xbc>)
   b69ac:	b923      	cbnz	r3, b69b8 <__register_exitproc+0x58>
   b69ae:	f8d8 0000 	ldr.w	r0, [r8]
   b69b2:	f000 f838 	bl	b6a26 <__retarget_lock_release>
   b69b6:	e7f0      	b.n	b699a <__register_exitproc+0x3a>
   b69b8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b69bc:	f7fe fdb0 	bl	b5520 <malloc>
   b69c0:	2800      	cmp	r0, #0
   b69c2:	d0f4      	beq.n	b69ae <__register_exitproc+0x4e>
   b69c4:	2300      	movs	r3, #0
   b69c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b69ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b69ce:	6863      	ldr	r3, [r4, #4]
   b69d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b69d4:	2201      	movs	r2, #1
   b69d6:	409a      	lsls	r2, r3
   b69d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b69dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b69e0:	4313      	orrs	r3, r2
   b69e2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b69e6:	2e02      	cmp	r6, #2
   b69e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b69ec:	bf02      	ittt	eq
   b69ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b69f2:	4313      	orreq	r3, r2
   b69f4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b69f8:	6863      	ldr	r3, [r4, #4]
   b69fa:	f8d8 0000 	ldr.w	r0, [r8]
   b69fe:	1c5a      	adds	r2, r3, #1
   b6a00:	3302      	adds	r3, #2
   b6a02:	6062      	str	r2, [r4, #4]
   b6a04:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6a08:	f000 f80e 	bl	b6a28 <__retarget_lock_release_recursive>
   b6a0c:	2000      	movs	r0, #0
   b6a0e:	e7c6      	b.n	b699e <__register_exitproc+0x3e>
   b6a10:	2003e7e8 	.word	0x2003e7e8
   b6a14:	2003e75c 	.word	0x2003e75c
   b6a18:	00000000 	.word	0x00000000
   b6a1c:	000b5521 	.word	0x000b5521
   b6a20:	2003e51c 	.word	0x2003e51c

000b6a24 <__retarget_lock_acquire_recursive>:
   b6a24:	4770      	bx	lr

000b6a26 <__retarget_lock_release>:
   b6a26:	4770      	bx	lr

000b6a28 <__retarget_lock_release_recursive>:
   b6a28:	4770      	bx	lr

000b6a2a <link_code_end>:
	...

000b6a2c <dynalib_user>:
   b6a2c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6a3c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6a4c:	7620 7269 7574 6c61 4100 7373 7265 6974      virtual.Asserti
   b6a5c:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b6a6c:	3c20 2820 3233 2b20 3120 2936 4e00 206f      < (32 + 16).No 
   b6a7c:	6843 6e61 6567 2d20 4320 6e61 6563 6c6c     Change - Cancell
   b6a8c:	6e69 2067 4d43 0a44 7b00 6f22 226e 743a     ing CMD..{"on":t
   b6a9c:	7572 2c65 7322 7461 3a22 2c00 6222 6972     rue,"sat":.,"bri
   b6aac:	3a22 2c00 6822 6575 3a22 7b00 6f22 226e     ":.,"hue":.{"on"
   b6abc:	663a 6c61 6573 007d 6553 646e 6e69 2067     :false}.Sending 
   b6acc:	6f43 6d6d 6e61 2064 6f74 4820 6575 5000     Command to Hue.P
   b6adc:	5455 2f20 7061 2f69 2f00 696c 6867 7374     UT /api/./lights
   b6aec:	002f 732f 6174 6574 4820 5454 2f50 2e31     /./state HTTP/1.
   b6afc:	0031 656b 7065 612d 696c 6576 4800 736f     1.keep-alive.Hos
   b6b0c:	3a74 0020 6f43 746e 6e65 2d74 654c 676e     t: .Content-Leng
   b6b1c:	6874 203a 4300 6e6f 6574 746e 542d 7079     th: .Content-Typ
   b6b2c:	3a65 7420 7865 2f74 6c70 6961 3b6e 6863     e: text/plain;ch
   b6b3c:	7261 6573 3d74 5455 2d46 0038 7246 6d6f     arset=UTF-8.From
   b6b4c:	4820 6575 0000 0000                          Hue....

000b6b54 <CSWTCH.88>:
   b6b54:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b6b64:	0050 0000                                   P...

000b6b68 <_ZL4font>:
   b6b68:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6b78:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6b88:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6b98:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6ba8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b6bb8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b6bc8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b6bd8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b6be8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6bf8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6c08:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6c18:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6c28:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6c38:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6c48:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6c58:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6c68:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6c78:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6c88:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6c98:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6ca8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b6cb8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b6cc8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b6cd8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b6ce8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6cf8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6d08:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6d18:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6d28:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6d38:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6d48:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6d58:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6d68:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6d78:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6d88:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6d98:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6da8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6db8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6dc8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6dd8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6de8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6df8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b6e08:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6e18:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6e28:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6e38:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6e48:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6e58:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6e68:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6e78:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6e88:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6e98:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6ea8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6eb8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6ec8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6ed8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b6ee8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b6ef8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b6f08:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6f18:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6f28:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6f38:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6f48:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6f58:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6f68:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6f78:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6f88:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6f98:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6fa8:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b6fb8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b6fc8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b6fd8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b6fe8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b6ff8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b7008:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7018:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7028:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7038:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b7048:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b7058:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b7064 <_ZTV12Adafruit_GFX>:
	...
   b7074:	4ce5 000b 5a15 000b 40a1 000b 49fd 000b     .L...Z...@...I..
   b7084:	4b23 000b 4b3f 000b 4abb 000b 4b59 000b     #K..?K...J..YK..
   b7094:	4b8f 000b 4bab 000b                         .K...K..

000b709c <_ZTV16Adafruit_SSD1306>:
	...
   b70a4:	503d 000b 50cd 000b 4ce5 000b 5a15 000b     =P...P...L...Z..
   b70b4:	5041 000b 49fd 000b 4ec9 000b 4d59 000b     AP...I...N..YM..
   b70c4:	4abb 000b 4b59 000b 4b8f 000b 4bab 000b     .J..YK...K...K..

000b70d4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b70dc <_ZTVN5spark13EthernetClassE>:
	...
   b70e4:	5613 000b 5609 000b 55ff 000b 55f5 000b     .V...V...U...U..
   b70f4:	55e9 000b 55dd 000b 58f1 000b 58f9 000b     .U...U...X...X..
   b7104:	55d1 000b 55c9 000b 55bf 000b 55b5 000b     .U...U...U...U..
   b7114:	5929 000b                                   )Y..

000b7118 <_ZTV7TwoWire>:
	...
   b7120:	5631 000b 567b 000b 5653 000b 5633 000b     1V..{V..SV..3V..
   b7130:	565b 000b 5663 000b 566b 000b 5673 000b     [V..cV..kV..sV..

000b7140 <_ZTV9IPAddress>:
	...
   b7148:	5795 000b 5785 000b 5787 000b 7061 0070     .W...W...W..app.

000b7158 <_ZTVN5spark12NetworkClassE>:
	...
   b7160:	58b1 000b 58bb 000b 58c5 000b 58cf 000b     .X...X...X...X..
   b7170:	58d9 000b 58e5 000b 58f1 000b 58f9 000b     .X...X...X...X..
   b7180:	5901 000b 590d 000b 5915 000b 591f 000b     .Y...Y...Y...Y..
   b7190:	5929 000b 6977 6972 676e 7200 6365 2076     )Y..wiring.recv 
   b71a0:	7265 6f72 2072 203d 6425 0000               error = %d..

000b71ac <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b71b4:	5c21 000b 5c45 000b 612f 000b 5c53 000b     !\..E\../a..S\..
   b71c4:	5c25 000b                                   %\..

000b71c8 <_ZTV9TCPClient>:
	...
   b71d0:	4305 000b 4339 000b 5b9d 000b 5bb7 000b     .C..9C...[...[..
   b71e0:	5fc5 000b 5be1 000b 5e3b 000b 5c15 000b     ._...[..;^...\..
   b71f0:	5ecd 000b 5d0d 000b 5e69 000b 6079 000b     .^...]..i^..y`..
   b7200:	5e09 000b 5c17 000b 5bc9 000b 5c59 000b     .^...\...[..Y\..
   b7210:	5ced 000b 5925 252d 2d6d 6425 2554 3a48     .\..%Y-%m-%dT%H:
   b7220:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7230 <_ZTV11USARTSerial>:
	...
   b7238:	6149 000b 61b5 000b 618d 000b 5a15 000b     Ia...a...a...Z..
   b7248:	615d 000b 6179 000b 616b 000b 6187 000b     ]a..ya..ka...a..
   b7258:	614b 000b 614f 000b                         Ka..Oa..

000b7260 <_ZTV9USBSerial>:
	...
   b7268:	61f3 000b 625b 000b 6231 000b 5a15 000b     .a..[b..1b...Z..
   b7278:	6223 000b 61f5 000b 6205 000b 6255 000b     #b...a...b..Ub..
   b7288:	6215 000b 61ed 000b                         .b...a..

000b7290 <_ZTVN5spark9WiFiClassE>:
	...
   b7298:	6353 000b 6349 000b 633f 000b 62f5 000b     Sc..Ic..?c...b..
   b72a8:	6333 000b 6327 000b 58f1 000b 58f9 000b     3c..'c...X...X..
   b72b8:	631b 000b 6313 000b 6309 000b 62ff 000b     .c...c...c...b..
   b72c8:	5929 000b                                   )Y..

000b72cc <_ZSt7nothrow>:
	...

000b72cd <_ZTSSt19_Sp_make_shared_tag>:
   b72cd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b72dd:	6572 5f64 6174 0067 0000                     red_tag....

000b72e8 <_ZTISt19_Sp_make_shared_tag>:
   b72e8:	7328 000b 72cd 000b                         (s...r..

000b72f0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b72f0:	7388 000b 72fc 000b 73ac 000b               .s...r...s..

000b72fc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b72fc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b730c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b731c:	0045 0000                                   E...

000b7320 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7320:	0000 0000 72f0 000b 66d1 000b 66e5 000b     .....r...f...f..
   b7330:	6879 000b 6879 000b 674f 000b 6691 000b     yh..yh..Og...f..
   b7340:	6737 000b 66f9 000b 66c3 000b               7g...f...f..

000b734c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b734c:	7388 000b 7358 000b 72f0 000b               .s..Xs...r..

000b7358 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7358:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7368:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7378:	666e 456f 0000 0000                         nfoE....

000b7380 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7380:	0000 0000 734c 000b 6779 000b 678d 000b     ....Ls..yg...g..
   b7390:	6879 000b 6879 000b 674f 000b 6691 000b     yh..yh..Og...f..
   b73a0:	684d 000b 67d9 000b 67a1 000b               Mh...g...g..

000b73ac <_ZTISt9type_info>:
   b73ac:	7328 000b 73b4 000b                         (s...s..

000b73b4 <_ZTSSt9type_info>:
   b73b4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b73c4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b73d4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b73e4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b73f4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b7404:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b7414:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b7424:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b7431 <link_const_variable_data_end>:
   b7431:	00          	.byte	0x00
	...

000b7434 <link_constructors_location>:
   b7434:	000b451d 	.word	0x000b451d
   b7438:	000b49ed 	.word	0x000b49ed
   b743c:	000b55a5 	.word	0x000b55a5
   b7440:	000b561d 	.word	0x000b561d
   b7444:	000b58a1 	.word	0x000b58a1
   b7448:	000b5a01 	.word	0x000b5a01
   b744c:	000b5aa9 	.word	0x000b5aa9
   b7450:	000b5b79 	.word	0x000b5b79
   b7454:	000b6135 	.word	0x000b6135
   b7458:	000b635d 	.word	0x000b635d

000b745c <link_constructors_end>:
   b745c:	00000000 	.word	0x00000000
