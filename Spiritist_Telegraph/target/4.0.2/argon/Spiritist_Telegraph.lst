
/Users/adrianpijoan/Documents/IoT/SmartRoom/Spiritist_Telegraph/target/4.0.2/argon/Spiritist_Telegraph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c80  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9ca0  000b9ca0  00009ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9cc4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000618  2003deb8  000b9cc8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000320  2003e4d0  2003e4d0  0002e4d0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba2e0  000ba2e0  0002a2e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba308  000ba308  0002a308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00135f89  00000000  00000000  0002a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000161f3  00000000  00000000  00160295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000403ed  00000000  00000000  00176488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003240  00000000  00000000  001b6875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000afb0  00000000  00000000  001b9ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f24d  00000000  00000000  001c4a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004ba71  00000000  00000000  00203cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a397  00000000  00000000  0024f723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009060  00000000  00000000  00389abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fd5b 	bl	b8aec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fd63 	bl	b8b08 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003deb8 	.word	0x2003deb8
   b404c:	000b9cc8 	.word	0x000b9cc8
   b4050:	2003e4d0 	.word	0x2003e4d0
   b4054:	2003e4d0 	.word	0x2003e4d0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fec9 	bl	b7df8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9c74 	.word	0x000b9c74
   b4080:	000b9c9c 	.word	0x000b9c9c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc3c 	b.w	b4900 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 ff5d 	bl	b4f48 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 be69 	b.w	b7d68 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bcb1 	b.w	b69fc <malloc>

000b409a <_Znaj>:
   b409a:	f002 bcaf 	b.w	b69fc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bcb5 	b.w	b6a0c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fc02 	bl	b68b4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b64d5 	.word	0x000b64d5
   b40b8:	000b8c88 	.word	0x000b8c88

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40cc:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40ce:	b510      	push	{r4, lr}
   b40d0:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40d2:	d90d      	bls.n	b40f0 <nrf_gpio_pin_read+0x24>
   b40d4:	4a09      	ldr	r2, [pc, #36]	; (b40fc <nrf_gpio_pin_read+0x30>)
   b40d6:	490a      	ldr	r1, [pc, #40]	; (b4100 <nrf_gpio_pin_read+0x34>)
   b40d8:	200a      	movs	r0, #10
   b40da:	f002 fbeb 	bl	b68b4 <panic_>
        return NRF_P1;
   b40de:	4b09      	ldr	r3, [pc, #36]	; (b4104 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40e0:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40e4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40e8:	40e0      	lsrs	r0, r4
}
   b40ea:	f000 0001 	and.w	r0, r0, #1
   b40ee:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40f0:	281f      	cmp	r0, #31
   b40f2:	d8f4      	bhi.n	b40de <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40f8:	e7f4      	b.n	b40e4 <nrf_gpio_pin_read+0x18>
   b40fa:	bf00      	nop
   b40fc:	000b64d5 	.word	0x000b64d5
   b4100:	000b8c9d 	.word	0x000b8c9d
   b4104:	50000300 	.word	0x50000300

000b4108 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b4108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b410c:	f8df 812c 	ldr.w	r8, [pc, #300]	; b423c <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b4110:	6887      	ldr	r7, [r0, #8]
   b4112:	f898 3000 	ldrb.w	r3, [r8]
   b4116:	4d48      	ldr	r5, [pc, #288]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x130>)
   b4118:	f3bf 8f5b 	dmb	ish
   b411c:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b4120:	4604      	mov	r4, r0
   b4122:	d109      	bne.n	b4138 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4124:	4640      	mov	r0, r8
   b4126:	f7ff ffc9 	bl	b40bc <__cxa_guard_acquire>
   b412a:	b128      	cbz	r0, b4138 <_ZN7Encoder16interruptHandlerEv+0x30>
   b412c:	f002 f9ea 	bl	b6504 <HAL_Pin_Map>
   b4130:	6028      	str	r0, [r5, #0]
   b4132:	4640      	mov	r0, r8
   b4134:	f7ff ffc7 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4138:	b2bf      	uxth	r7, r7
   b413a:	682b      	ldr	r3, [r5, #0]
   b413c:	013f      	lsls	r7, r7, #4
   b413e:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4140:	f898 3000 	ldrb.w	r3, [r8]
   b4144:	f3bf 8f5b 	dmb	ish
   b4148:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b414a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b414e:	d409      	bmi.n	b4164 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4150:	483a      	ldr	r0, [pc, #232]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4152:	f7ff ffb3 	bl	b40bc <__cxa_guard_acquire>
   b4156:	b128      	cbz	r0, b4164 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4158:	f002 f9d4 	bl	b6504 <HAL_Pin_Map>
   b415c:	6028      	str	r0, [r5, #0]
   b415e:	4837      	ldr	r0, [pc, #220]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4160:	f7ff ffb1 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4164:	682b      	ldr	r3, [r5, #0]
   b4166:	443b      	add	r3, r7
   b4168:	785e      	ldrb	r6, [r3, #1]
   b416a:	f006 061f 	and.w	r6, r6, #31
   b416e:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b4172:	4630      	mov	r0, r6
   b4174:	f7ff ffaa 	bl	b40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4178:	4630      	mov	r0, r6
   b417a:	f7ff ffa7 	bl	b40cc <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b417e:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4180:	f898 3000 	ldrb.w	r3, [r8]
   b4184:	f3bf 8f5b 	dmb	ish
   b4188:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b418a:	b2c6      	uxtb	r6, r0
   b418c:	d409      	bmi.n	b41a2 <_ZN7Encoder16interruptHandlerEv+0x9a>
   b418e:	482b      	ldr	r0, [pc, #172]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4190:	f7ff ff94 	bl	b40bc <__cxa_guard_acquire>
   b4194:	b128      	cbz	r0, b41a2 <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4196:	f002 f9b5 	bl	b6504 <HAL_Pin_Map>
   b419a:	6028      	str	r0, [r5, #0]
   b419c:	4827      	ldr	r0, [pc, #156]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b419e:	f7ff ff92 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41a2:	b2bf      	uxth	r7, r7
   b41a4:	682b      	ldr	r3, [r5, #0]
   b41a6:	013f      	lsls	r7, r7, #4
   b41a8:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41ac:	f898 3000 	ldrb.w	r3, [r8]
   b41b0:	f3bf 8f5b 	dmb	ish
   b41b4:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b6:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41ba:	d409      	bmi.n	b41d0 <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41bc:	481f      	ldr	r0, [pc, #124]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41be:	f7ff ff7d 	bl	b40bc <__cxa_guard_acquire>
   b41c2:	b128      	cbz	r0, b41d0 <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41c4:	f002 f99e 	bl	b6504 <HAL_Pin_Map>
   b41c8:	6028      	str	r0, [r5, #0]
   b41ca:	481c      	ldr	r0, [pc, #112]	; (b423c <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41cc:	f7ff ff7b 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41d0:	682b      	ldr	r3, [r5, #0]
   b41d2:	441f      	add	r7, r3
   b41d4:	787d      	ldrb	r5, [r7, #1]
   b41d6:	f005 051f 	and.w	r5, r5, #31
   b41da:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41de:	4628      	mov	r0, r5
   b41e0:	f7ff ff74 	bl	b40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41e4:	4628      	mov	r0, r5
   b41e6:	f7ff ff71 	bl	b40cc <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41ea:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41ec:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41ee:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41f2:	b10e      	cbz	r6, b41f8 <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41f4:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41f8:	b108      	cbz	r0, b41fe <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41fa:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41fe:	089a      	lsrs	r2, r3, #2
   b4200:	3b01      	subs	r3, #1
   b4202:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b4204:	2b0d      	cmp	r3, #13
   b4206:	d80b      	bhi.n	b4220 <_ZN7Encoder16interruptHandlerEv+0x118>
   b4208:	e8df f003 	tbb	[pc, r3]
   b420c:	0c0f0c07 	.word	0x0c0f0c07
   b4210:	0707120a 	.word	0x0707120a
   b4214:	0f0c0a12 	.word	0x0f0c0a12
   b4218:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b421a:	6963      	ldr	r3, [r4, #20]
   b421c:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b421e:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b4220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4224:	6963      	ldr	r3, [r4, #20]
   b4226:	3b01      	subs	r3, #1
   b4228:	e7f9      	b.n	b421e <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b422a:	6963      	ldr	r3, [r4, #20]
   b422c:	3302      	adds	r3, #2
   b422e:	e7f6      	b.n	b421e <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b4230:	6963      	ldr	r3, [r4, #20]
   b4232:	3b02      	subs	r3, #2
   b4234:	e7f3      	b.n	b421e <_ZN7Encoder16interruptHandlerEv+0x116>
   b4236:	bf00      	nop
   b4238:	2003e4d4 	.word	0x2003e4d4
   b423c:	2003e4d0 	.word	0x2003e4d0

000b4240 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4240:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4242:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4244:	4606      	mov	r6, r0
   b4246:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4248:	da0b      	bge.n	b4262 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b424a:	2a0a      	cmp	r2, #10
   b424c:	d109      	bne.n	b4262 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b424e:	212d      	movs	r1, #45	; 0x2d
   b4250:	f002 fed4 	bl	b6ffc <_ZN5Print5printEc>
            val = -n;
   b4254:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4256:	b2ea      	uxtb	r2, r5
   b4258:	4630      	mov	r0, r6
    }
}
   b425a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b425e:	f002 bee6 	b.w	b702e <_ZN5Print11printNumberEmh>
            val = n;
   b4262:	4621      	mov	r1, r4
   b4264:	e7f7      	b.n	b4256 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4266 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4266:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4268:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b426a:	685a      	ldr	r2, [r3, #4]
   b426c:	6899      	ldr	r1, [r3, #8]
   b426e:	681b      	ldr	r3, [r3, #0]
   b4270:	1054      	asrs	r4, r2, #1
   b4272:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4276:	07d2      	lsls	r2, r2, #31
   b4278:	bf48      	it	mi
   b427a:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b427c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4280:	bf48      	it	mi
   b4282:	58d3      	ldrmi	r3, [r2, r3]
   b4284:	4718      	bx	r3

000b4286 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4286:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4288:	b538      	push	{r3, r4, r5, lr}
   b428a:	4604      	mov	r4, r0
	switch (__op)
   b428c:	d102      	bne.n	b4294 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b428e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4290:	6023      	str	r3, [r4, #0]
	}
   b4292:	e003      	b.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4294:	2a02      	cmp	r2, #2
   b4296:	d003      	beq.n	b42a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4298:	2a03      	cmp	r2, #3
   b429a:	d00d      	beq.n	b42b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b429c:	2000      	movs	r0, #0
   b429e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b42a0:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b42a2:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b42a4:	f7ff fef7 	bl	b4096 <_Znwj>
   b42a8:	4603      	mov	r3, r0
   b42aa:	2800      	cmp	r0, #0
   b42ac:	d0f0      	beq.n	b4290 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b42ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b42b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b42b6:	e7eb      	b.n	b4290 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b42b8:	6800      	ldr	r0, [r0, #0]
   b42ba:	2800      	cmp	r0, #0
   b42bc:	d0ee      	beq.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b42be:	210c      	movs	r1, #12
   b42c0:	f7ff feed 	bl	b409e <_ZdlPvj>
   b42c4:	e7ea      	b.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b42c8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b42c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42ca:	b08d      	sub	sp, #52	; 0x34
   b42cc:	ad02      	add	r5, sp, #8
   b42ce:	e885 0006 	stmia.w	r5, {r1, r2}
   b42d2:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42d8:	ac05      	add	r4, sp, #20
   b42da:	e884 0005 	stmia.w	r4, {r0, r2}
   b42de:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42e0:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42e2:	2300      	movs	r3, #0
   b42e4:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42e6:	f7ff fed6 	bl	b4096 <_Znwj>
   b42ea:	4602      	mov	r2, r0
   b42ec:	b120      	cbz	r0, b42f8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42ee:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42f2:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42f6:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42f8:	4b0b      	ldr	r3, [pc, #44]	; (b4328 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42fa:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42fc:	4b0b      	ldr	r3, [pc, #44]	; (b432c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42fe:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b4300:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4304:	9208      	str	r2, [sp, #32]
   b4306:	9300      	str	r3, [sp, #0]
   b4308:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b430c:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b4310:	a908      	add	r1, sp, #32
   b4312:	4630      	mov	r0, r6
   b4314:	f002 fcc8 	bl	b6ca8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b4318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b431a:	b11b      	cbz	r3, b4324 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b431c:	a908      	add	r1, sp, #32
   b431e:	2203      	movs	r2, #3
   b4320:	4608      	mov	r0, r1
   b4322:	4798      	blx	r3
}
   b4324:	b00d      	add	sp, #52	; 0x34
   b4326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4328:	000b4267 	.word	0x000b4267
   b432c:	000b4287 	.word	0x000b4287

000b4330 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4330:	b40e      	push	{r1, r2, r3}
   b4332:	b503      	push	{r0, r1, lr}
   b4334:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4336:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4338:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b433c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b433e:	f002 fe94 	bl	b706a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4342:	b002      	add	sp, #8
   b4344:	f85d eb04 	ldr.w	lr, [sp], #4
   b4348:	b003      	add	sp, #12
   b434a:	4770      	bx	lr

000b434c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b434c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b434e:	6984      	ldr	r4, [r0, #24]
   b4350:	4b0a      	ldr	r3, [pc, #40]	; (b437c <_ZN9TCPClientD1Ev+0x30>)
   b4352:	6003      	str	r3, [r0, #0]
   b4354:	4605      	mov	r5, r0
   b4356:	b17c      	cbz	r4, b4378 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4358:	6863      	ldr	r3, [r4, #4]
   b435a:	3b01      	subs	r3, #1
   b435c:	6063      	str	r3, [r4, #4]
   b435e:	b95b      	cbnz	r3, b4378 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4360:	6823      	ldr	r3, [r4, #0]
   b4362:	4620      	mov	r0, r4
   b4364:	689b      	ldr	r3, [r3, #8]
   b4366:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4368:	68a3      	ldr	r3, [r4, #8]
   b436a:	3b01      	subs	r3, #1
   b436c:	60a3      	str	r3, [r4, #8]
   b436e:	b91b      	cbnz	r3, b4378 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4370:	6823      	ldr	r3, [r4, #0]
   b4372:	4620      	mov	r0, r4
   b4374:	68db      	ldr	r3, [r3, #12]
   b4376:	4798      	blx	r3
   b4378:	4628      	mov	r0, r5
   b437a:	bd38      	pop	{r3, r4, r5, pc}
   b437c:	000b9a10 	.word	0x000b9a10

000b4380 <_ZN9TCPClientD0Ev>:
   b4380:	b510      	push	{r4, lr}
   b4382:	4604      	mov	r4, r0
   b4384:	f7ff ffe2 	bl	b434c <_ZN9TCPClientD1Ev>
   b4388:	4620      	mov	r0, r4
   b438a:	211c      	movs	r1, #28
   b438c:	f7ff fe87 	bl	b409e <_ZdlPvj>
   b4390:	4620      	mov	r0, r4
   b4392:	bd10      	pop	{r4, pc}

000b4394 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4398:	b08c      	sub	sp, #48	; 0x30
   b439a:	4605      	mov	r5, r0
   b439c:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b439e:	4668      	mov	r0, sp
   b43a0:	4977      	ldr	r1, [pc, #476]	; (b4580 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b43a2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b43a6:	4614      	mov	r4, r2
   b43a8:	461e      	mov	r6, r3
  String command = "";  
   b43aa:	f002 ffca 	bl	b7342 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b43ae:	f8df e228 	ldr.w	lr, [pc, #552]	; b45d8 <_Z6setHueibiii+0x244>
   b43b2:	4974      	ldr	r1, [pc, #464]	; (b4584 <_Z6setHueibiii+0x1f0>)
   b43b4:	f8de 3000 	ldr.w	r3, [lr]
   b43b8:	4873      	ldr	r0, [pc, #460]	; (b4588 <_Z6setHueibiii+0x1f4>)
   b43ba:	4a74      	ldr	r2, [pc, #464]	; (b458c <_Z6setHueibiii+0x1f8>)
   b43bc:	f8df c21c 	ldr.w	ip, [pc, #540]	; b45dc <_Z6setHueibiii+0x248>
   b43c0:	42ab      	cmp	r3, r5
   b43c2:	d119      	bne.n	b43f8 <_Z6setHueibiii+0x64>
   b43c4:	680b      	ldr	r3, [r1, #0]
   b43c6:	42bb      	cmp	r3, r7
   b43c8:	d116      	bne.n	b43f8 <_Z6setHueibiii+0x64>
   b43ca:	6803      	ldr	r3, [r0, #0]
   b43cc:	42a3      	cmp	r3, r4
   b43ce:	d113      	bne.n	b43f8 <_Z6setHueibiii+0x64>
   b43d0:	6813      	ldr	r3, [r2, #0]
   b43d2:	42b3      	cmp	r3, r6
   b43d4:	d110      	bne.n	b43f8 <_Z6setHueibiii+0x64>
   b43d6:	f8dc 3000 	ldr.w	r3, [ip]
   b43da:	4543      	cmp	r3, r8
   b43dc:	d10c      	bne.n	b43f8 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b43de:	f003 fbf1 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b43e2:	496b      	ldr	r1, [pc, #428]	; (b4590 <_Z6setHueibiii+0x1fc>)
   b43e4:	f7ff ffa4 	bl	b4330 <_ZN5Print6printfEPKcz>
    return false;
   b43e8:	2400      	movs	r4, #0
  String command = "";  
   b43ea:	4668      	mov	r0, sp
   b43ec:	f002 ff5e 	bl	b72ac <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b43f0:	4620      	mov	r0, r4
   b43f2:	b00c      	add	sp, #48	; 0x30
   b43f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b43f8:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b43fc:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b43fe:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b4400:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b4402:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b4406:	2f00      	cmp	r7, #0
   b4408:	f000 80b5 	beq.w	b4576 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b440c:	4961      	ldr	r1, [pc, #388]	; (b4594 <_Z6setHueibiii+0x200>)
   b440e:	4668      	mov	r0, sp
   b4410:	f002 ffc5 	bl	b739e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4414:	4669      	mov	r1, sp
   b4416:	a808      	add	r0, sp, #32
   b4418:	f002 ffb6 	bl	b7388 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b441c:	220a      	movs	r2, #10
   b441e:	4641      	mov	r1, r8
   b4420:	a804      	add	r0, sp, #16
   b4422:	f002 ffce 	bl	b73c2 <_ZN6StringC1Eih>
   b4426:	a904      	add	r1, sp, #16
   b4428:	a808      	add	r0, sp, #32
   b442a:	f003 f812 	bl	b7452 <_ZplRK15StringSumHelperRK6String>
   b442e:	495a      	ldr	r1, [pc, #360]	; (b4598 <_Z6setHueibiii+0x204>)
   b4430:	f003 f81b 	bl	b746a <_ZplRK15StringSumHelperPKc>
   b4434:	4601      	mov	r1, r0
   b4436:	4668      	mov	r0, sp
   b4438:	f002 ff97 	bl	b736a <_ZN6StringaSERKS_>
   b443c:	a804      	add	r0, sp, #16
   b443e:	f002 ff35 	bl	b72ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4442:	a808      	add	r0, sp, #32
   b4444:	f002 ff32 	bl	b72ac <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4448:	4669      	mov	r1, sp
   b444a:	a808      	add	r0, sp, #32
   b444c:	f002 ff9c 	bl	b7388 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4450:	220a      	movs	r2, #10
   b4452:	4631      	mov	r1, r6
   b4454:	a804      	add	r0, sp, #16
   b4456:	f002 ffb4 	bl	b73c2 <_ZN6StringC1Eih>
   b445a:	a904      	add	r1, sp, #16
   b445c:	a808      	add	r0, sp, #32
   b445e:	f002 fff8 	bl	b7452 <_ZplRK15StringSumHelperRK6String>
   b4462:	494e      	ldr	r1, [pc, #312]	; (b459c <_Z6setHueibiii+0x208>)
   b4464:	f003 f801 	bl	b746a <_ZplRK15StringSumHelperPKc>
   b4468:	4601      	mov	r1, r0
   b446a:	4668      	mov	r0, sp
   b446c:	f002 ff7d 	bl	b736a <_ZN6StringaSERKS_>
   b4470:	a804      	add	r0, sp, #16
   b4472:	f002 ff1b 	bl	b72ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4476:	a808      	add	r0, sp, #32
   b4478:	f002 ff18 	bl	b72ac <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b447c:	4669      	mov	r1, sp
   b447e:	a808      	add	r0, sp, #32
   b4480:	f002 ff82 	bl	b7388 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4484:	220a      	movs	r2, #10
   b4486:	4621      	mov	r1, r4
   b4488:	a804      	add	r0, sp, #16
   b448a:	f002 ff9a 	bl	b73c2 <_ZN6StringC1Eih>
   b448e:	a904      	add	r1, sp, #16
   b4490:	a808      	add	r0, sp, #32
   b4492:	f002 ffde 	bl	b7452 <_ZplRK15StringSumHelperRK6String>
   b4496:	4942      	ldr	r1, [pc, #264]	; (b45a0 <_Z6setHueibiii+0x20c>)
   b4498:	f002 ffe7 	bl	b746a <_ZplRK15StringSumHelperPKc>
   b449c:	4601      	mov	r1, r0
   b449e:	4668      	mov	r0, sp
   b44a0:	f002 ff63 	bl	b736a <_ZN6StringaSERKS_>
   b44a4:	a804      	add	r0, sp, #16
   b44a6:	f002 ff01 	bl	b72ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44aa:	a808      	add	r0, sp, #32
   b44ac:	f002 fefe 	bl	b72ac <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b44b0:	493c      	ldr	r1, [pc, #240]	; (b45a4 <_Z6setHueibiii+0x210>)
   b44b2:	483d      	ldr	r0, [pc, #244]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44b4:	2300      	movs	r3, #0
   b44b6:	2250      	movs	r2, #80	; 0x50
   b44b8:	f003 f8b6 	bl	b7628 <_ZN9TCPClient7connectEPKctm>
   b44bc:	4604      	mov	r4, r0
   b44be:	2800      	cmp	r0, #0
   b44c0:	d093      	beq.n	b43ea <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b44c2:	f003 fb7f 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b44c6:	4939      	ldr	r1, [pc, #228]	; (b45ac <_Z6setHueibiii+0x218>)
   b44c8:	f002 fda7 	bl	b701a <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b44cc:	f003 fb7a 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b44d0:	9900      	ldr	r1, [sp, #0]
   b44d2:	f002 fda2 	bl	b701a <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b44d6:	4936      	ldr	r1, [pc, #216]	; (b45b0 <_Z6setHueibiii+0x21c>)
   b44d8:	4833      	ldr	r0, [pc, #204]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44da:	f002 fd8b 	bl	b6ff4 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b44de:	4935      	ldr	r1, [pc, #212]	; (b45b4 <_Z6setHueibiii+0x220>)
   b44e0:	4831      	ldr	r0, [pc, #196]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44e2:	f002 fd87 	bl	b6ff4 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b44e6:	4934      	ldr	r1, [pc, #208]	; (b45b8 <_Z6setHueibiii+0x224>)
   b44e8:	482f      	ldr	r0, [pc, #188]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44ea:	f002 fd83 	bl	b6ff4 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b44ee:	220a      	movs	r2, #10
   b44f0:	482d      	ldr	r0, [pc, #180]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44f2:	4629      	mov	r1, r5
   b44f4:	f7ff fea4 	bl	b4240 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b44f8:	4930      	ldr	r1, [pc, #192]	; (b45bc <_Z6setHueibiii+0x228>)
   b44fa:	482b      	ldr	r0, [pc, #172]	; (b45a8 <_Z6setHueibiii+0x214>)
   b44fc:	f002 fd8d 	bl	b701a <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b4500:	492f      	ldr	r1, [pc, #188]	; (b45c0 <_Z6setHueibiii+0x22c>)
   b4502:	4829      	ldr	r0, [pc, #164]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4504:	f002 fd89 	bl	b701a <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b4508:	492e      	ldr	r1, [pc, #184]	; (b45c4 <_Z6setHueibiii+0x230>)
   b450a:	4827      	ldr	r0, [pc, #156]	; (b45a8 <_Z6setHueibiii+0x214>)
   b450c:	f002 fd72 	bl	b6ff4 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b4510:	4924      	ldr	r1, [pc, #144]	; (b45a4 <_Z6setHueibiii+0x210>)
   b4512:	4825      	ldr	r0, [pc, #148]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4514:	f002 fd81 	bl	b701a <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b4518:	492b      	ldr	r1, [pc, #172]	; (b45c8 <_Z6setHueibiii+0x234>)
   b451a:	4823      	ldr	r0, [pc, #140]	; (b45a8 <_Z6setHueibiii+0x214>)
   b451c:	f002 fd6a 	bl	b6ff4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4520:	220a      	movs	r2, #10
   b4522:	9902      	ldr	r1, [sp, #8]
   b4524:	4820      	ldr	r0, [pc, #128]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4526:	f002 fd82 	bl	b702e <_ZN5Print11printNumberEmh>
        n += println();
   b452a:	481f      	ldr	r0, [pc, #124]	; (b45a8 <_Z6setHueibiii+0x214>)
   b452c:	f002 fd69 	bl	b7002 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b4530:	4926      	ldr	r1, [pc, #152]	; (b45cc <_Z6setHueibiii+0x238>)
   b4532:	481d      	ldr	r0, [pc, #116]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4534:	f002 fd71 	bl	b701a <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b4538:	481b      	ldr	r0, [pc, #108]	; (b45a8 <_Z6setHueibiii+0x214>)
   b453a:	f002 fd62 	bl	b7002 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b453e:	9900      	ldr	r1, [sp, #0]
   b4540:	4819      	ldr	r0, [pc, #100]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4542:	f002 fd6a 	bl	b701a <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4546:	f003 fb3d 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b454a:	4921      	ldr	r1, [pc, #132]	; (b45d0 <_Z6setHueibiii+0x23c>)
   b454c:	f002 fd65 	bl	b701a <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4550:	f003 fb38 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4554:	4914      	ldr	r1, [pc, #80]	; (b45a8 <_Z6setHueibiii+0x214>)
   b4556:	4604      	mov	r4, r0
   b4558:	a808      	add	r0, sp, #32
   b455a:	f002 fe93 	bl	b7284 <_ZN6Stream10readStringEv>
   b455e:	9908      	ldr	r1, [sp, #32]
   b4560:	4620      	mov	r0, r4
   b4562:	f002 fd5a 	bl	b701a <_ZN5Print7printlnEPKc>
   b4566:	a808      	add	r0, sp, #32
   b4568:	f002 fea0 	bl	b72ac <_ZN6StringD1Ev>
    HueClient.stop();
   b456c:	480e      	ldr	r0, [pc, #56]	; (b45a8 <_Z6setHueibiii+0x214>)
   b456e:	f003 fa11 	bl	b7994 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4572:	2401      	movs	r4, #1
   b4574:	e739      	b.n	b43ea <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4576:	4917      	ldr	r1, [pc, #92]	; (b45d4 <_Z6setHueibiii+0x240>)
   b4578:	4668      	mov	r0, sp
   b457a:	f002 ff10 	bl	b739e <_ZN6StringaSEPKc>
   b457e:	e797      	b.n	b44b0 <_Z6setHueibiii+0x11c>
   b4580:	000b8f78 	.word	0x000b8f78
   b4584:	2003e550 	.word	0x2003e550
   b4588:	2003e558 	.word	0x2003e558
   b458c:	2003e548 	.word	0x2003e548
   b4590:	000b8cc1 	.word	0x000b8cc1
   b4594:	000b8cdd 	.word	0x000b8cdd
   b4598:	000b8cef 	.word	0x000b8cef
   b459c:	000b8cf7 	.word	0x000b8cf7
   b45a0:	000b8d0a 	.word	0x000b8d0a
   b45a4:	000b9143 	.word	0x000b9143
   b45a8:	2003e4d8 	.word	0x2003e4d8
   b45ac:	000b8d0c 	.word	0x000b8d0c
   b45b0:	000b8d23 	.word	0x000b8d23
   b45b4:	000b911a 	.word	0x000b911a
   b45b8:	000b8d2d 	.word	0x000b8d2d
   b45bc:	000b8d36 	.word	0x000b8d36
   b45c0:	000b8f5f 	.word	0x000b8f5f
   b45c4:	000b8d46 	.word	0x000b8d46
   b45c8:	000b8d4d 	.word	0x000b8d4d
   b45cc:	000b8d5e 	.word	0x000b8d5e
   b45d0:	000b8d85 	.word	0x000b8d85
   b45d4:	000b8cff 	.word	0x000b8cff
   b45d8:	2003e54c 	.word	0x2003e54c
   b45dc:	2003e554 	.word	0x2003e554

000b45e0 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b45e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b45e2:	4925      	ldr	r1, [pc, #148]	; (b4678 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b45e4:	4604      	mov	r4, r0
  String data1;
   b45e6:	4668      	mov	r0, sp
   b45e8:	f002 feab 	bl	b7342 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b45ec:	f003 faea 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b45f0:	4622      	mov	r2, r4
   b45f2:	4922      	ldr	r1, [pc, #136]	; (b467c <_Z8switchONi+0x9c>)
   b45f4:	f7ff fe9c 	bl	b4330 <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b45f8:	4921      	ldr	r1, [pc, #132]	; (b4680 <_Z8switchONi+0xa0>)
   b45fa:	4668      	mov	r0, sp
   b45fc:	f002 ff0b 	bl	b7416 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4600:	4a20      	ldr	r2, [pc, #128]	; (b4684 <_Z8switchONi+0xa4>)
   b4602:	4921      	ldr	r1, [pc, #132]	; (b4688 <_Z8switchONi+0xa8>)
   b4604:	8812      	ldrh	r2, [r2, #0]
   b4606:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b460a:	4820      	ldr	r0, [pc, #128]	; (b468c <_Z8switchONi+0xac>)
   b460c:	2300      	movs	r3, #0
   b460e:	f003 f80b 	bl	b7628 <_ZN9TCPClient7connectEPKctm>
   b4612:	b328      	cbz	r0, b4660 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4614:	491e      	ldr	r1, [pc, #120]	; (b4690 <_Z8switchONi+0xb0>)
   b4616:	481d      	ldr	r0, [pc, #116]	; (b468c <_Z8switchONi+0xac>)
   b4618:	f002 fcff 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b461c:	491d      	ldr	r1, [pc, #116]	; (b4694 <_Z8switchONi+0xb4>)
   b461e:	481b      	ldr	r0, [pc, #108]	; (b468c <_Z8switchONi+0xac>)
   b4620:	f002 fcfb 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b4624:	491c      	ldr	r1, [pc, #112]	; (b4698 <_Z8switchONi+0xb8>)
   b4626:	4819      	ldr	r0, [pc, #100]	; (b468c <_Z8switchONi+0xac>)
   b4628:	f002 fcf7 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b462c:	491b      	ldr	r1, [pc, #108]	; (b469c <_Z8switchONi+0xbc>)
   b462e:	4817      	ldr	r0, [pc, #92]	; (b468c <_Z8switchONi+0xac>)
   b4630:	f002 fcf3 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4634:	491a      	ldr	r1, [pc, #104]	; (b46a0 <_Z8switchONi+0xc0>)
   b4636:	4815      	ldr	r0, [pc, #84]	; (b468c <_Z8switchONi+0xac>)
   b4638:	f002 fcdc 	bl	b6ff4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b463c:	9902      	ldr	r1, [sp, #8]
   b463e:	4813      	ldr	r0, [pc, #76]	; (b468c <_Z8switchONi+0xac>)
   b4640:	220a      	movs	r2, #10
   b4642:	f002 fcf4 	bl	b702e <_ZN5Print11printNumberEmh>
        n += println();
   b4646:	4811      	ldr	r0, [pc, #68]	; (b468c <_Z8switchONi+0xac>)
   b4648:	f002 fcdb 	bl	b7002 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b464c:	480f      	ldr	r0, [pc, #60]	; (b468c <_Z8switchONi+0xac>)
   b464e:	f002 fcd8 	bl	b7002 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4652:	9900      	ldr	r1, [sp, #0]
   b4654:	480d      	ldr	r0, [pc, #52]	; (b468c <_Z8switchONi+0xac>)
   b4656:	f002 fccd 	bl	b6ff4 <_ZN5Print5printEPKc>
        WemoClient.println();
   b465a:	480c      	ldr	r0, [pc, #48]	; (b468c <_Z8switchONi+0xac>)
   b465c:	f002 fcd1 	bl	b7002 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4660:	480a      	ldr	r0, [pc, #40]	; (b468c <_Z8switchONi+0xac>)
   b4662:	f003 f85f 	bl	b7724 <_ZN9TCPClient9connectedEv>
   b4666:	b110      	cbz	r0, b466e <_Z8switchONi+0x8e>
     WemoClient.stop();
   b4668:	4808      	ldr	r0, [pc, #32]	; (b468c <_Z8switchONi+0xac>)
   b466a:	f003 f993 	bl	b7994 <_ZN9TCPClient4stopEv>
  String data1;
   b466e:	4668      	mov	r0, sp
   b4670:	f002 fe1c 	bl	b72ac <_ZN6StringD1Ev>
  }
}
   b4674:	b004      	add	sp, #16
   b4676:	bd10      	pop	{r4, pc}
   b4678:	000b8f78 	.word	0x000b8f78
   b467c:	000b8d8e 	.word	0x000b8d8e
   b4680:	000b8d9c 	.word	0x000b8d9c
   b4684:	2003e050 	.word	0x2003e050
   b4688:	2003e03c 	.word	0x2003e03c
   b468c:	2003e520 	.word	0x2003e520
   b4690:	000b8ec8 	.word	0x000b8ec8
   b4694:	000b8ef0 	.word	0x000b8ef0
   b4698:	000b8f16 	.word	0x000b8f16
   b469c:	000b8f53 	.word	0x000b8f53
   b46a0:	000b8d4d 	.word	0x000b8d4d

000b46a4 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b46a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b46a6:	4925      	ldr	r1, [pc, #148]	; (b473c <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b46a8:	4604      	mov	r4, r0
  String data1;
   b46aa:	4668      	mov	r0, sp
   b46ac:	f002 fe49 	bl	b7342 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b46b0:	f003 fa88 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b46b4:	4622      	mov	r2, r4
   b46b6:	4922      	ldr	r1, [pc, #136]	; (b4740 <_Z9switchOFFi+0x9c>)
   b46b8:	f7ff fe3a 	bl	b4330 <_ZN5Print6printfEPKcz>
   b46bc:	4921      	ldr	r1, [pc, #132]	; (b4744 <_Z9switchOFFi+0xa0>)
   b46be:	4668      	mov	r0, sp
   b46c0:	f002 fea9 	bl	b7416 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b46c4:	4a20      	ldr	r2, [pc, #128]	; (b4748 <_Z9switchOFFi+0xa4>)
   b46c6:	4921      	ldr	r1, [pc, #132]	; (b474c <_Z9switchOFFi+0xa8>)
   b46c8:	8812      	ldrh	r2, [r2, #0]
   b46ca:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b46ce:	4820      	ldr	r0, [pc, #128]	; (b4750 <_Z9switchOFFi+0xac>)
   b46d0:	2300      	movs	r3, #0
   b46d2:	f002 ffa9 	bl	b7628 <_ZN9TCPClient7connectEPKctm>
   b46d6:	b328      	cbz	r0, b4724 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b46d8:	491e      	ldr	r1, [pc, #120]	; (b4754 <_Z9switchOFFi+0xb0>)
   b46da:	481d      	ldr	r0, [pc, #116]	; (b4750 <_Z9switchOFFi+0xac>)
   b46dc:	f002 fc9d 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b46e0:	491d      	ldr	r1, [pc, #116]	; (b4758 <_Z9switchOFFi+0xb4>)
   b46e2:	481b      	ldr	r0, [pc, #108]	; (b4750 <_Z9switchOFFi+0xac>)
   b46e4:	f002 fc99 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b46e8:	491c      	ldr	r1, [pc, #112]	; (b475c <_Z9switchOFFi+0xb8>)
   b46ea:	4819      	ldr	r0, [pc, #100]	; (b4750 <_Z9switchOFFi+0xac>)
   b46ec:	f002 fc95 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b46f0:	491b      	ldr	r1, [pc, #108]	; (b4760 <_Z9switchOFFi+0xbc>)
   b46f2:	4817      	ldr	r0, [pc, #92]	; (b4750 <_Z9switchOFFi+0xac>)
   b46f4:	f002 fc91 	bl	b701a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b46f8:	491a      	ldr	r1, [pc, #104]	; (b4764 <_Z9switchOFFi+0xc0>)
   b46fa:	4815      	ldr	r0, [pc, #84]	; (b4750 <_Z9switchOFFi+0xac>)
   b46fc:	f002 fc7a 	bl	b6ff4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4700:	9902      	ldr	r1, [sp, #8]
   b4702:	4813      	ldr	r0, [pc, #76]	; (b4750 <_Z9switchOFFi+0xac>)
   b4704:	220a      	movs	r2, #10
   b4706:	f002 fc92 	bl	b702e <_ZN5Print11printNumberEmh>
        n += println();
   b470a:	4811      	ldr	r0, [pc, #68]	; (b4750 <_Z9switchOFFi+0xac>)
   b470c:	f002 fc79 	bl	b7002 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4710:	480f      	ldr	r0, [pc, #60]	; (b4750 <_Z9switchOFFi+0xac>)
   b4712:	f002 fc76 	bl	b7002 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4716:	9900      	ldr	r1, [sp, #0]
   b4718:	480d      	ldr	r0, [pc, #52]	; (b4750 <_Z9switchOFFi+0xac>)
   b471a:	f002 fc6b 	bl	b6ff4 <_ZN5Print5printEPKc>
        WemoClient.println();
   b471e:	480c      	ldr	r0, [pc, #48]	; (b4750 <_Z9switchOFFi+0xac>)
   b4720:	f002 fc6f 	bl	b7002 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b4724:	480a      	ldr	r0, [pc, #40]	; (b4750 <_Z9switchOFFi+0xac>)
   b4726:	f002 fffd 	bl	b7724 <_ZN9TCPClient9connectedEv>
   b472a:	b110      	cbz	r0, b4732 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b472c:	4808      	ldr	r0, [pc, #32]	; (b4750 <_Z9switchOFFi+0xac>)
   b472e:	f003 f931 	bl	b7994 <_ZN9TCPClient4stopEv>
  String data1;
   b4732:	4668      	mov	r0, sp
   b4734:	f002 fdba 	bl	b72ac <_ZN6StringD1Ev>
  }
}
   b4738:	b004      	add	sp, #16
   b473a:	bd10      	pop	{r4, pc}
   b473c:	000b8f78 	.word	0x000b8f78
   b4740:	000b8f6a 	.word	0x000b8f6a
   b4744:	000b8f79 	.word	0x000b8f79
   b4748:	2003e050 	.word	0x2003e050
   b474c:	2003e03c 	.word	0x2003e03c
   b4750:	2003e520 	.word	0x2003e520
   b4754:	000b8ec8 	.word	0x000b8ec8
   b4758:	000b8ef0 	.word	0x000b8ef0
   b475c:	000b8f16 	.word	0x000b8f16
   b4760:	000b8f53 	.word	0x000b8f53
   b4764:	000b8d4d 	.word	0x000b8d4d

000b4768 <_ZN8IoTTimer12isTimerReadyEv>:
    void startTimer(unsigned int msec) {
      _timerStart = millis();
      _timerTarget = msec;       
    }

    bool isTimerReady() {
   b4768:	b510      	push	{r4, lr}
   b476a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b476c:	f001 fec2 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      return ((millis() - _timerStart) >= _timerTarget);
   b4770:	6823      	ldr	r3, [r4, #0]
   b4772:	1ac0      	subs	r0, r0, r3
   b4774:	6863      	ldr	r3, [r4, #4]
    }
   b4776:	4298      	cmp	r0, r3
   b4778:	bf34      	ite	cc
   b477a:	2000      	movcc	r0, #0
   b477c:	2001      	movcs	r0, #1
   b477e:	bd10      	pop	{r4, pc}

000b4780 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b4780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4784:	460f      	mov	r7, r1
   b4786:	4604      	mov	r4, r0
   b4788:	4616      	mov	r6, r2
   b478a:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b478c:	2102      	movs	r1, #2
   b478e:	4638      	mov	r0, r7
   b4790:	f003 fba2 	bl	b7ed8 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b4794:	2102      	movs	r1, #2
   b4796:	4630      	mov	r0, r6
   b4798:	f003 fb9e 	bl	b7ed8 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b479c:	f8df b158 	ldr.w	fp, [pc, #344]	; b48f8 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b47a0:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b47a2:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b47a4:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b47a8:	6023      	str	r3, [r4, #0]
		position = 0;
   b47aa:	6163      	str	r3, [r4, #20]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b47ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b47b0:	f001 fe90 	bl	b64d4 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b47b4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b47b8:	f89b 3000 	ldrb.w	r3, [fp]
   b47bc:	4d4d      	ldr	r5, [pc, #308]	; (b48f4 <_ZN7EncoderC1Ett+0x174>)
   b47be:	f3bf 8f5b 	dmb	ish
   b47c2:	f013 0f01 	tst.w	r3, #1
   b47c6:	d109      	bne.n	b47dc <_ZN7EncoderC1Ett+0x5c>
   b47c8:	4658      	mov	r0, fp
   b47ca:	f7ff fc77 	bl	b40bc <__cxa_guard_acquire>
   b47ce:	b128      	cbz	r0, b47dc <_ZN7EncoderC1Ett+0x5c>
   b47d0:	f001 fe98 	bl	b6504 <HAL_Pin_Map>
   b47d4:	6028      	str	r0, [r5, #0]
   b47d6:	4658      	mov	r0, fp
   b47d8:	f7ff fc75 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b47dc:	fa1f fa8a 	uxth.w	sl, sl
   b47e0:	682b      	ldr	r3, [r5, #0]
   b47e2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b47e6:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b47ea:	f89b 3000 	ldrb.w	r3, [fp]
   b47ee:	f3bf 8f5b 	dmb	ish
   b47f2:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b47f4:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b47f8:	d409      	bmi.n	b480e <_ZN7EncoderC1Ett+0x8e>
   b47fa:	483f      	ldr	r0, [pc, #252]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b47fc:	f7ff fc5e 	bl	b40bc <__cxa_guard_acquire>
   b4800:	b128      	cbz	r0, b480e <_ZN7EncoderC1Ett+0x8e>
   b4802:	f001 fe7f 	bl	b6504 <HAL_Pin_Map>
   b4806:	6028      	str	r0, [r5, #0]
   b4808:	483b      	ldr	r0, [pc, #236]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b480a:	f7ff fc5c 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b480e:	682b      	ldr	r3, [r5, #0]
   b4810:	4453      	add	r3, sl
   b4812:	f893 8001 	ldrb.w	r8, [r3, #1]
   b4816:	f008 081f 	and.w	r8, r8, #31
   b481a:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b481e:	4640      	mov	r0, r8
   b4820:	f7ff fc54 	bl	b40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4824:	4640      	mov	r0, r8
   b4826:	f7ff fc51 	bl	b40cc <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b482a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b482e:	f89b 3000 	ldrb.w	r3, [fp]
   b4832:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b4836:	f1b0 0800 	subs.w	r8, r0, #0
   b483a:	bf18      	it	ne
   b483c:	f04f 0801 	movne.w	r8, #1
   b4840:	07da      	lsls	r2, r3, #31
   b4842:	d409      	bmi.n	b4858 <_ZN7EncoderC1Ett+0xd8>
   b4844:	482c      	ldr	r0, [pc, #176]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b4846:	f7ff fc39 	bl	b40bc <__cxa_guard_acquire>
   b484a:	b128      	cbz	r0, b4858 <_ZN7EncoderC1Ett+0xd8>
   b484c:	f001 fe5a 	bl	b6504 <HAL_Pin_Map>
   b4850:	6028      	str	r0, [r5, #0]
   b4852:	4829      	ldr	r0, [pc, #164]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b4854:	f7ff fc37 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4858:	fa1f fa8a 	uxth.w	sl, sl
   b485c:	682b      	ldr	r3, [r5, #0]
   b485e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b4862:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4866:	f89b 3000 	ldrb.w	r3, [fp]
   b486a:	f3bf 8f5b 	dmb	ish
   b486e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4870:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4874:	d409      	bmi.n	b488a <_ZN7EncoderC1Ett+0x10a>
   b4876:	4820      	ldr	r0, [pc, #128]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b4878:	f7ff fc20 	bl	b40bc <__cxa_guard_acquire>
   b487c:	b128      	cbz	r0, b488a <_ZN7EncoderC1Ett+0x10a>
   b487e:	f001 fe41 	bl	b6504 <HAL_Pin_Map>
   b4882:	6028      	str	r0, [r5, #0]
   b4884:	481c      	ldr	r0, [pc, #112]	; (b48f8 <_ZN7EncoderC1Ett+0x178>)
   b4886:	f7ff fc1e 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b488a:	682b      	ldr	r3, [r5, #0]
   b488c:	449a      	add	sl, r3
   b488e:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b4892:	f005 051f 	and.w	r5, r5, #31
   b4896:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b489a:	4628      	mov	r0, r5
   b489c:	f7ff fc16 	bl	b40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b48a0:	4628      	mov	r0, r5
   b48a2:	f7ff fc13 	bl	b40cc <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b48a6:	b108      	cbz	r0, b48ac <_ZN7EncoderC1Ett+0x12c>
   b48a8:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b48ac:	f8df 904c 	ldr.w	r9, [pc, #76]	; b48fc <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b48b0:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b48b4:	2500      	movs	r5, #0
   b48b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b48ba:	4623      	mov	r3, r4
   b48bc:	462a      	mov	r2, r5
   b48be:	4649      	mov	r1, r9
   b48c0:	4638      	mov	r0, r7
   b48c2:	e9cd 5800 	strd	r5, r8, [sp]
   b48c6:	9502      	str	r5, [sp, #8]
   b48c8:	f8cd 9010 	str.w	r9, [sp, #16]
   b48cc:	9505      	str	r5, [sp, #20]
   b48ce:	f7ff fcfb 	bl	b42c8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b48d2:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b48d6:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b48da:	9500      	str	r5, [sp, #0]
   b48dc:	aa08      	add	r2, sp, #32
   b48de:	4630      	mov	r0, r6
   b48e0:	e912 0006 	ldmdb	r2, {r1, r2}
   b48e4:	4623      	mov	r3, r4
   b48e6:	f7ff fcef 	bl	b42c8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b48ea:	4620      	mov	r0, r4
   b48ec:	b009      	add	sp, #36	; 0x24
   b48ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b48f2:	bf00      	nop
   b48f4:	2003e4d4 	.word	0x2003e4d4
   b48f8:	2003e4d0 	.word	0x2003e4d0
   b48fc:	000b4109 	.word	0x000b4109

000b4900 <setup>:
void emf();
void emfFlash();

SYSTEM_MODE(MANUAL);

void setup() {
   b4900:	b530      	push	{r4, r5, lr}
   b4902:	b099      	sub	sp, #100	; 0x64
  Serial.begin(9600);
   b4904:	f003 f95e 	bl	b7bc4 <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4908:	4d2f      	ldr	r5, [pc, #188]	; (b49c8 <setup+0xc8>)
   b490a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b490e:	f003 f94d 	bl	b7bac <_ZN9USBSerial5beginEl>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4912:	2300      	movs	r3, #0
   b4914:	461a      	mov	r2, r3
   b4916:	4619      	mov	r1, r3
   b4918:	6868      	ldr	r0, [r5, #4]
   b491a:	f002 f827 	bl	b696c <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b491e:	2238      	movs	r2, #56	; 0x38
   b4920:	2100      	movs	r1, #0
   b4922:	a80a      	add	r0, sp, #40	; 0x28
   b4924:	f004 f8f0 	bl	b8b08 <memset>
        creds.size = sizeof(creds);
   b4928:	234c      	movs	r3, #76	; 0x4c
   b492a:	9305      	str	r3, [sp, #20]
        creds.ssid = ssid;
   b492c:	4b27      	ldr	r3, [pc, #156]	; (b49cc <setup+0xcc>)
   b492e:	9306      	str	r3, [sp, #24]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4930:	2400      	movs	r4, #0
   b4932:	230a      	movs	r3, #10
   b4934:	e9cd 3407 	strd	r3, r4, [sp, #28]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4938:	aa05      	add	r2, sp, #20
   b493a:	4623      	mov	r3, r4
   b493c:	4621      	mov	r1, r4
   b493e:	6868      	ldr	r0, [r5, #4]
        creds.password_len = passwordLen;
   b4940:	9409      	str	r4, [sp, #36]	; 0x24
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4942:	f002 f833 	bl	b69ac <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4946:	4623      	mov	r3, r4
   b4948:	6868      	ldr	r0, [r5, #4]
   b494a:	4622      	mov	r2, r4
   b494c:	4621      	mov	r1, r4
   b494e:	f001 ffed 	bl	b692c <network_connect>
  WiFi.on();
  WiFi.setCredentials("IoTNetwork");
  WiFi.connect();

  spiritDisplay.begin(SSD1306_SWITCHCAPVCC, OLEDADDRESS);
   b4952:	223c      	movs	r2, #60	; 0x3c
   b4954:	481e      	ldr	r0, [pc, #120]	; (b49d0 <setup+0xd0>)
   b4956:	2102      	movs	r1, #2
   b4958:	f001 fa5a 	bl	b5e10 <_ZN16Adafruit_SSD13065beginEhh>
  spiritDisplay.setRotation(0);
   b495c:	4621      	mov	r1, r4
   b495e:	481c      	ldr	r0, [pc, #112]	; (b49d0 <setup+0xd0>)
   b4960:	f000 ff9d 	bl	b589e <_ZN12Adafruit_GFX11setRotationEh>
  spiritDisplay.clearDisplay();
   b4964:	481a      	ldr	r0, [pc, #104]	; (b49d0 <setup+0xd0>)
   b4966:	f001 f987 	bl	b5c78 <_ZN16Adafruit_SSD130612clearDisplayEv>
  spiritDisplay.drawBitmap(32,0,ghost_bmp,64,64,WHITE);
   b496a:	2501      	movs	r5, #1
   b496c:	2340      	movs	r3, #64	; 0x40
   b496e:	4622      	mov	r2, r4
   b4970:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b4974:	9300      	str	r3, [sp, #0]
   b4976:	2120      	movs	r1, #32
   b4978:	4b16      	ldr	r3, [pc, #88]	; (b49d4 <setup+0xd4>)
   b497a:	4815      	ldr	r0, [pc, #84]	; (b49d0 <setup+0xd0>)
   b497c:	f000 fe7e 	bl	b567c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  spiritDisplay.display();
   b4980:	4813      	ldr	r0, [pc, #76]	; (b49d0 <setup+0xd0>)
   b4982:	f001 f9d5 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>

  spiritBmp.begin(BMPADDRESS);
   b4986:	2176      	movs	r1, #118	; 0x76
   b4988:	4813      	ldr	r0, [pc, #76]	; (b49d8 <setup+0xd8>)
   b498a:	f000 fd33 	bl	b53f4 <_ZN15Adafruit_BMP2805beginEh>

  candlePixel.begin();
   b498e:	4813      	ldr	r0, [pc, #76]	; (b49dc <setup+0xdc>)
   b4990:	f001 fb33 	bl	b5ffa <_ZN17Adafruit_NeoPixel5beginEv>
  candlePixel.show();
   b4994:	4811      	ldr	r0, [pc, #68]	; (b49dc <setup+0xdc>)
   b4996:	f001 fb69 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>

  pinMode(ENCSWITCH, INPUT_PULLUP);
   b499a:	2102      	movs	r1, #2
   b499c:	2006      	movs	r0, #6
   b499e:	f003 fa9b 	bl	b7ed8 <pinMode>
  pinMode(ENCLEDG, OUTPUT);
   b49a2:	4629      	mov	r1, r5
   b49a4:	2005      	movs	r0, #5
   b49a6:	f003 fa97 	bl	b7ed8 <pinMode>
  pinMode(ENCLEDR, OUTPUT);
   b49aa:	4629      	mov	r1, r5
   b49ac:	2004      	movs	r0, #4
   b49ae:	f003 fa93 	bl	b7ed8 <pinMode>
  pinMode(SWITCHPIN, INPUT_PULLUP);
   b49b2:	2102      	movs	r1, #2
   b49b4:	2007      	movs	r0, #7
   b49b6:	f003 fa8f 	bl	b7ed8 <pinMode>
  pinMode(EMFPIN, INPUT);
   b49ba:	4621      	mov	r1, r4
   b49bc:	2012      	movs	r0, #18

}
   b49be:	b019      	add	sp, #100	; 0x64
   b49c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  pinMode(EMFPIN, INPUT);
   b49c4:	f003 ba88 	b.w	b7ed8 <pinMode>
   b49c8:	2003e718 	.word	0x2003e718
   b49cc:	000b90a5 	.word	0x000b90a5
   b49d0:	2003e5e0 	.word	0x2003e5e0
   b49d4:	000b914f 	.word	0x000b914f
   b49d8:	2003e5ac 	.word	0x2003e5ac
   b49dc:	2003e568 	.word	0x2003e568

000b49e0 <_Z13candleFlickerv>:

}


//this function flickers a neopixel inside of a 3D printed candle
void candleFlicker(){
   b49e0:	b538      	push	{r3, r4, r5, lr}

  static int candleFlickerState = 0;

  candlePixel.setPixelColor(0, 0xFFA500);
   b49e2:	4a35      	ldr	r2, [pc, #212]	; (b4ab8 <_Z13candleFlickerv+0xd8>)
   b49e4:	4835      	ldr	r0, [pc, #212]	; (b4abc <_Z13candleFlickerv+0xdc>)
  candlePixel.setPixelColor(1, 0xFFA500);

  if(candleFlickerState == 0){
   b49e6:	4c36      	ldr	r4, [pc, #216]	; (b4ac0 <_Z13candleFlickerv+0xe0>)
  candlePixel.setPixelColor(0, 0xFFA500);
   b49e8:	2100      	movs	r1, #0
   b49ea:	f001 fceb 	bl	b63c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  candlePixel.setPixelColor(1, 0xFFA500);
   b49ee:	4a32      	ldr	r2, [pc, #200]	; (b4ab8 <_Z13candleFlickerv+0xd8>)
   b49f0:	4832      	ldr	r0, [pc, #200]	; (b4abc <_Z13candleFlickerv+0xdc>)
   b49f2:	2101      	movs	r1, #1
   b49f4:	f001 fce6 	bl	b63c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  if(candleFlickerState == 0){
   b49f8:	6823      	ldr	r3, [r4, #0]
   b49fa:	2b00      	cmp	r3, #0
   b49fc:	d14f      	bne.n	b4a9e <_Z13candleFlickerv+0xbe>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b49fe:	f001 fd79 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      _timerStart = millis();
   b4a02:	4b30      	ldr	r3, [pc, #192]	; (b4ac4 <_Z13candleFlickerv+0xe4>)
      _timerTarget = msec;       
   b4a04:	2264      	movs	r2, #100	; 0x64
      _timerStart = millis();
   b4a06:	6018      	str	r0, [r3, #0]
    candleFlickerTimer.startTimer(100);
    candlePixel.setBrightness(32);
   b4a08:	2120      	movs	r1, #32
   b4a0a:	482c      	ldr	r0, [pc, #176]	; (b4abc <_Z13candleFlickerv+0xdc>)
      _timerTarget = msec;       
   b4a0c:	605a      	str	r2, [r3, #4]
   b4a0e:	f001 fd1c 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4a12:	482a      	ldr	r0, [pc, #168]	; (b4abc <_Z13candleFlickerv+0xdc>)
   b4a14:	f001 fb2a 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
    candleFlickerState = 1;
   b4a18:	2301      	movs	r3, #1
   b4a1a:	6023      	str	r3, [r4, #0]
  }

  if(candleFlickerState == 1 && candleFlickerTimer.isTimerReady()){
   b4a1c:	4d29      	ldr	r5, [pc, #164]	; (b4ac4 <_Z13candleFlickerv+0xe4>)
   b4a1e:	4628      	mov	r0, r5
   b4a20:	f7ff fea2 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4a24:	2800      	cmp	r0, #0
   b4a26:	d03c      	beq.n	b4aa2 <_Z13candleFlickerv+0xc2>
   b4a28:	f001 fd64 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
   b4a2c:	2332      	movs	r3, #50	; 0x32
      _timerStart = millis();
   b4a2e:	6028      	str	r0, [r5, #0]
    candleFlickerTimer.startTimer(50);
    candlePixel.setBrightness(150);
   b4a30:	2196      	movs	r1, #150	; 0x96
   b4a32:	4822      	ldr	r0, [pc, #136]	; (b4abc <_Z13candleFlickerv+0xdc>)
      _timerTarget = msec;       
   b4a34:	606b      	str	r3, [r5, #4]
   b4a36:	f001 fd08 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4a3a:	4820      	ldr	r0, [pc, #128]	; (b4abc <_Z13candleFlickerv+0xdc>)
   b4a3c:	f001 fb16 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
    candleFlickerState = 2;
   b4a40:	2302      	movs	r3, #2
   b4a42:	6023      	str	r3, [r4, #0]
  }

  if(candleFlickerState == 2 && candleFlickerTimer.isTimerReady()){
   b4a44:	4d1f      	ldr	r5, [pc, #124]	; (b4ac4 <_Z13candleFlickerv+0xe4>)
   b4a46:	4628      	mov	r0, r5
   b4a48:	f7ff fe8e 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4a4c:	b360      	cbz	r0, b4aa8 <_Z13candleFlickerv+0xc8>
   b4a4e:	f001 fd51 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
   b4a52:	2396      	movs	r3, #150	; 0x96
      _timerStart = millis();
   b4a54:	6028      	str	r0, [r5, #0]
    candleFlickerTimer.startTimer(150);
    candlePixel.setBrightness(75);
   b4a56:	214b      	movs	r1, #75	; 0x4b
   b4a58:	4818      	ldr	r0, [pc, #96]	; (b4abc <_Z13candleFlickerv+0xdc>)
      _timerTarget = msec;       
   b4a5a:	606b      	str	r3, [r5, #4]
   b4a5c:	f001 fcf5 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4a60:	4816      	ldr	r0, [pc, #88]	; (b4abc <_Z13candleFlickerv+0xdc>)
   b4a62:	f001 fb03 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
    candleFlickerState = 3;
   b4a66:	2303      	movs	r3, #3
   b4a68:	6023      	str	r3, [r4, #0]
  }

  if(candleFlickerState == 3 && candleFlickerTimer.isTimerReady()){
   b4a6a:	4d16      	ldr	r5, [pc, #88]	; (b4ac4 <_Z13candleFlickerv+0xe4>)
   b4a6c:	4628      	mov	r0, r5
   b4a6e:	f7ff fe7b 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4a72:	b1e0      	cbz	r0, b4aae <_Z13candleFlickerv+0xce>
   b4a74:	f001 fd3e 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
   b4a78:	2364      	movs	r3, #100	; 0x64
      _timerStart = millis();
   b4a7a:	6028      	str	r0, [r5, #0]
    candleFlickerTimer.startTimer(100);
    candlePixel.setBrightness(160);
   b4a7c:	21a0      	movs	r1, #160	; 0xa0
   b4a7e:	480f      	ldr	r0, [pc, #60]	; (b4abc <_Z13candleFlickerv+0xdc>)
      _timerTarget = msec;       
   b4a80:	606b      	str	r3, [r5, #4]
   b4a82:	f001 fce2 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4a86:	480d      	ldr	r0, [pc, #52]	; (b4abc <_Z13candleFlickerv+0xdc>)
   b4a88:	f001 faf0 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
    candleFlickerState = 4;
   b4a8c:	2304      	movs	r3, #4
   b4a8e:	6023      	str	r3, [r4, #0]
  }

  if(candleFlickerState == 4 && candleFlickerTimer.isTimerReady()){
   b4a90:	480c      	ldr	r0, [pc, #48]	; (b4ac4 <_Z13candleFlickerv+0xe4>)
   b4a92:	f7ff fe69 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4a96:	b168      	cbz	r0, b4ab4 <_Z13candleFlickerv+0xd4>
    candleFlickerState = 0;
   b4a98:	2300      	movs	r3, #0
   b4a9a:	6023      	str	r3, [r4, #0]
  }
}
   b4a9c:	e00a      	b.n	b4ab4 <_Z13candleFlickerv+0xd4>
  if(candleFlickerState == 1 && candleFlickerTimer.isTimerReady()){
   b4a9e:	2b01      	cmp	r3, #1
   b4aa0:	d0bc      	beq.n	b4a1c <_Z13candleFlickerv+0x3c>
  if(candleFlickerState == 2 && candleFlickerTimer.isTimerReady()){
   b4aa2:	6823      	ldr	r3, [r4, #0]
   b4aa4:	2b02      	cmp	r3, #2
   b4aa6:	d0cd      	beq.n	b4a44 <_Z13candleFlickerv+0x64>
  if(candleFlickerState == 3 && candleFlickerTimer.isTimerReady()){
   b4aa8:	6823      	ldr	r3, [r4, #0]
   b4aaa:	2b03      	cmp	r3, #3
   b4aac:	d0dd      	beq.n	b4a6a <_Z13candleFlickerv+0x8a>
  if(candleFlickerState == 4 && candleFlickerTimer.isTimerReady()){
   b4aae:	6823      	ldr	r3, [r4, #0]
   b4ab0:	2b04      	cmp	r3, #4
   b4ab2:	d0ed      	beq.n	b4a90 <_Z13candleFlickerv+0xb0>
}
   b4ab4:	bd38      	pop	{r3, r4, r5, pc}
   b4ab6:	bf00      	nop
   b4ab8:	00ffa500 	.word	0x00ffa500
   b4abc:	2003e568 	.word	0x2003e568
   b4ac0:	2003e53c 	.word	0x2003e53c
   b4ac4:	2003e560 	.word	0x2003e560

000b4ac8 <_Z8ouijaIoti>:
    ouijaToggle = false;
  }
}

//this function uses the Ouija Board reading to alter the states of hue lights and wemo outlets in the IoT Classroom
void ouijaIot(int _ouijaChar){
   b4ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}

  int i;

  if(_ouijaChar == 0){ //HELLO
   b4aca:	b970      	cbnz	r0, b4aea <_Z8ouijaIoti+0x22>
    for(i=1; i<7; i++){
      setHue(i, true, HueOrange, 250, 250);
   b4acc:	4d41      	ldr	r5, [pc, #260]	; (b4bd4 <_Z8ouijaIoti+0x10c>)
    for(i=1; i<7; i++){
   b4ace:	2401      	movs	r4, #1
      setHue(i, true, HueOrange, 250, 250);
   b4ad0:	26fa      	movs	r6, #250	; 0xfa
   b4ad2:	9600      	str	r6, [sp, #0]
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	682a      	ldr	r2, [r5, #0]
   b4ad8:	23fa      	movs	r3, #250	; 0xfa
   b4ada:	2101      	movs	r1, #1
    for(i=1; i<7; i++){
   b4adc:	3401      	adds	r4, #1
      setHue(i, true, HueOrange, 250, 250);
   b4ade:	f7ff fc59 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4ae2:	2c07      	cmp	r4, #7
   b4ae4:	d1f5      	bne.n	b4ad2 <_Z8ouijaIoti+0xa>
    for(i=1; i<7; i++){
      setHue(i, false, 0, 0, 0);
    }
  }

}
   b4ae6:	b002      	add	sp, #8
   b4ae8:	bd70      	pop	{r4, r5, r6, pc}
  if(_ouijaChar == 11){ //YES for Outlets ON
   b4aea:	280b      	cmp	r0, #11
   b4aec:	d10f      	bne.n	b4b0e <_Z8ouijaIoti+0x46>
      switchON(i);
   b4aee:	2000      	movs	r0, #0
   b4af0:	f7ff fd76 	bl	b45e0 <_Z8switchONi>
   b4af4:	2001      	movs	r0, #1
   b4af6:	f7ff fd73 	bl	b45e0 <_Z8switchONi>
   b4afa:	2002      	movs	r0, #2
   b4afc:	f7ff fd70 	bl	b45e0 <_Z8switchONi>
   b4b00:	2003      	movs	r0, #3
   b4b02:	f7ff fd6d 	bl	b45e0 <_Z8switchONi>
   b4b06:	2004      	movs	r0, #4
   b4b08:	f7ff fd6a 	bl	b45e0 <_Z8switchONi>
  if(_ouijaChar == 29){ //R for RED
   b4b0c:	e7eb      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
  if(_ouijaChar == 13){ //B for BLUE
   b4b0e:	280d      	cmp	r0, #13
   b4b10:	d10d      	bne.n	b4b2e <_Z8ouijaIoti+0x66>
      setHue(i, true, HueBlue, 250, 250);
   b4b12:	4d31      	ldr	r5, [pc, #196]	; (b4bd8 <_Z8ouijaIoti+0x110>)
    for(i=1; i<7; i++){
   b4b14:	2401      	movs	r4, #1
      setHue(i, true, HueBlue, 250, 250);
   b4b16:	26fa      	movs	r6, #250	; 0xfa
   b4b18:	9600      	str	r6, [sp, #0]
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	682a      	ldr	r2, [r5, #0]
   b4b1e:	23fa      	movs	r3, #250	; 0xfa
   b4b20:	2101      	movs	r1, #1
    for(i=1; i<7; i++){
   b4b22:	3401      	adds	r4, #1
      setHue(i, true, HueBlue, 250, 250);
   b4b24:	f7ff fc36 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4b28:	2c07      	cmp	r4, #7
   b4b2a:	d1f5      	bne.n	b4b18 <_Z8ouijaIoti+0x50>
   b4b2c:	e7db      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
  if(_ouijaChar == 18){ //G for GREEN
   b4b2e:	2812      	cmp	r0, #18
   b4b30:	d10d      	bne.n	b4b4e <_Z8ouijaIoti+0x86>
      setHue(i, true, HueGreen, 250, 250);
   b4b32:	4d2a      	ldr	r5, [pc, #168]	; (b4bdc <_Z8ouijaIoti+0x114>)
    for(i=1; i<7; i++){
   b4b34:	2401      	movs	r4, #1
      setHue(i, true, HueGreen, 250, 250);
   b4b36:	26fa      	movs	r6, #250	; 0xfa
   b4b38:	9600      	str	r6, [sp, #0]
   b4b3a:	4620      	mov	r0, r4
   b4b3c:	682a      	ldr	r2, [r5, #0]
   b4b3e:	23fa      	movs	r3, #250	; 0xfa
   b4b40:	2101      	movs	r1, #1
    for(i=1; i<7; i++){
   b4b42:	3401      	adds	r4, #1
      setHue(i, true, HueGreen, 250, 250);
   b4b44:	f7ff fc26 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4b48:	2c07      	cmp	r4, #7
   b4b4a:	d1f5      	bne.n	b4b38 <_Z8ouijaIoti+0x70>
   b4b4c:	e7cb      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
  if(_ouijaChar == 29){ //R for RED
   b4b4e:	281d      	cmp	r0, #29
   b4b50:	d10d      	bne.n	b4b6e <_Z8ouijaIoti+0xa6>
      setHue(i, true, HueRed, 250, 250);
   b4b52:	4d23      	ldr	r5, [pc, #140]	; (b4be0 <_Z8ouijaIoti+0x118>)
    for(i=1; i<7; i++){
   b4b54:	2401      	movs	r4, #1
      setHue(i, true, HueRed, 250, 250);
   b4b56:	26fa      	movs	r6, #250	; 0xfa
   b4b58:	9600      	str	r6, [sp, #0]
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	682a      	ldr	r2, [r5, #0]
   b4b5e:	23fa      	movs	r3, #250	; 0xfa
   b4b60:	2101      	movs	r1, #1
    for(i=1; i<7; i++){
   b4b62:	3401      	adds	r4, #1
      setHue(i, true, HueRed, 250, 250);
   b4b64:	f7ff fc16 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4b68:	2c07      	cmp	r4, #7
   b4b6a:	d1f5      	bne.n	b4b58 <_Z8ouijaIoti+0x90>
   b4b6c:	e7bb      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
  if(_ouijaChar == 31){ //NO for Outlets OFF
   b4b6e:	281f      	cmp	r0, #31
   b4b70:	d111      	bne.n	b4b96 <_Z8ouijaIoti+0xce>
      switchOFF(i);
   b4b72:	2000      	movs	r0, #0
   b4b74:	f7ff fd96 	bl	b46a4 <_Z9switchOFFi>
   b4b78:	2001      	movs	r0, #1
   b4b7a:	f7ff fd93 	bl	b46a4 <_Z9switchOFFi>
   b4b7e:	2002      	movs	r0, #2
   b4b80:	f7ff fd90 	bl	b46a4 <_Z9switchOFFi>
   b4b84:	2003      	movs	r0, #3
   b4b86:	f7ff fd8d 	bl	b46a4 <_Z9switchOFFi>
   b4b8a:	2004      	movs	r0, #4
}
   b4b8c:	b002      	add	sp, #8
   b4b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      switchOFF(i);
   b4b92:	f7ff bd87 	b.w	b46a4 <_Z9switchOFFi>
  if(_ouijaChar == 34){ //V for VIOLET
   b4b96:	2822      	cmp	r0, #34	; 0x22
   b4b98:	d10d      	bne.n	b4bb6 <_Z8ouijaIoti+0xee>
      setHue(i, true, HueViolet, 250, 250);
   b4b9a:	4d12      	ldr	r5, [pc, #72]	; (b4be4 <_Z8ouijaIoti+0x11c>)
    for(i=1; i<7; i++){
   b4b9c:	2401      	movs	r4, #1
      setHue(i, true, HueViolet, 250, 250);
   b4b9e:	26fa      	movs	r6, #250	; 0xfa
   b4ba0:	9600      	str	r6, [sp, #0]
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	682a      	ldr	r2, [r5, #0]
   b4ba6:	23fa      	movs	r3, #250	; 0xfa
   b4ba8:	2101      	movs	r1, #1
    for(i=1; i<7; i++){
   b4baa:	3401      	adds	r4, #1
      setHue(i, true, HueViolet, 250, 250);
   b4bac:	f7ff fbf2 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4bb0:	2c07      	cmp	r4, #7
   b4bb2:	d1f5      	bne.n	b4ba0 <_Z8ouijaIoti+0xd8>
   b4bb4:	e797      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
  if (_ouijaChar == 39){ //GOOD BYE
   b4bb6:	2827      	cmp	r0, #39	; 0x27
   b4bb8:	d195      	bne.n	b4ae6 <_Z8ouijaIoti+0x1e>
    for(i=1; i<7; i++){
   b4bba:	2401      	movs	r4, #1
      setHue(i, false, 0, 0, 0);
   b4bbc:	2500      	movs	r5, #0
   b4bbe:	2300      	movs	r3, #0
   b4bc0:	4620      	mov	r0, r4
   b4bc2:	9500      	str	r5, [sp, #0]
   b4bc4:	461a      	mov	r2, r3
   b4bc6:	4619      	mov	r1, r3
    for(i=1; i<7; i++){
   b4bc8:	3401      	adds	r4, #1
      setHue(i, false, 0, 0, 0);
   b4bca:	f7ff fbe3 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7; i++){
   b4bce:	2c07      	cmp	r4, #7
   b4bd0:	d1f5      	bne.n	b4bbe <_Z8ouijaIoti+0xf6>
   b4bd2:	e788      	b.n	b4ae6 <_Z8ouijaIoti+0x1e>
   b4bd4:	2003dec4 	.word	0x2003dec4
   b4bd8:	2003deb8 	.word	0x2003deb8
   b4bdc:	2003debc 	.word	0x2003debc
   b4be0:	2003e510 	.word	0x2003e510
   b4be4:	2003dec8 	.word	0x2003dec8

000b4be8 <_Z5ouijav>:
void ouija(){
   b4be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		int32_t ret = position;
   b4bea:	4d2d      	ldr	r5, [pc, #180]	; (b4ca0 <_Z5ouijav+0xb8>)
		noInterrupts();
   b4bec:	f002 f88e 	bl	b6d0c <_Z12noInterruptsv>
		int32_t ret = position;
   b4bf0:	696c      	ldr	r4, [r5, #20]
		interrupts();
   b4bf2:	f002 f88d 	bl	b6d10 <_Z10interruptsv>
  if(encPosition < 0){ 
   b4bf6:	2c00      	cmp	r4, #0
   b4bf8:	da4c      	bge.n	b4c94 <_Z5ouijav+0xac>
		noInterrupts();
   b4bfa:	f002 f887 	bl	b6d0c <_Z12noInterruptsv>
		position = p;
   b4bfe:	2460      	movs	r4, #96	; 0x60
   b4c00:	616c      	str	r4, [r5, #20]
		interrupts();
   b4c02:	f002 f885 	bl	b6d10 <_Z10interruptsv>
  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4c06:	2327      	movs	r3, #39	; 0x27
   b4c08:	9300      	str	r3, [sp, #0]
   b4c0a:	2300      	movs	r3, #0
   b4c0c:	4619      	mov	r1, r3
   b4c0e:	4620      	mov	r0, r4
  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b4c10:	4d24      	ldr	r5, [pc, #144]	; (b4ca4 <_Z5ouijav+0xbc>)
   b4c12:	4e25      	ldr	r6, [pc, #148]	; (b4ca8 <_Z5ouijav+0xc0>)
  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4c14:	2260      	movs	r2, #96	; 0x60
   b4c16:	f001 ff31 	bl	b6a7c <_Z3mapiiiii>
  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b4c1a:	682b      	ldr	r3, [r5, #0]
   b4c1c:	4283      	cmp	r3, r0
  ouijaChar = map(encPosition,0,96,0,39); //map encoder position to ouijaBoard array
   b4c1e:	4604      	mov	r4, r0
  if(ouijaChar != previousOuijaChar){ //check to see if planchette has moved to a new position
   b4c20:	d008      	beq.n	b4c34 <_Z5ouijav+0x4c>
   b4c22:	f001 fc67 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      _timerStart = millis();
   b4c26:	4b21      	ldr	r3, [pc, #132]	; (b4cac <_Z5ouijav+0xc4>)
      _timerTarget = msec;       
   b4c28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
      _timerStart = millis();
   b4c2c:	6018      	str	r0, [r3, #0]
      _timerTarget = msec;       
   b4c2e:	605a      	str	r2, [r3, #4]
    ouijaToggle = true;
   b4c30:	2301      	movs	r3, #1
   b4c32:	7033      	strb	r3, [r6, #0]
  if(ouijaToggle && ouijaTimer.isTimerReady()){  //if it sees a new position and it has held that position for more than 0.5 seconds, do something
   b4c34:	7833      	ldrb	r3, [r6, #0]
  previousOuijaChar = ouijaChar;
   b4c36:	602c      	str	r4, [r5, #0]
  if(ouijaToggle && ouijaTimer.isTimerReady()){  //if it sees a new position and it has held that position for more than 0.5 seconds, do something
   b4c38:	b353      	cbz	r3, b4c90 <_Z5ouijav+0xa8>
   b4c3a:	481c      	ldr	r0, [pc, #112]	; (b4cac <_Z5ouijav+0xc4>)
   b4c3c:	f7ff fd94 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4c40:	b330      	cbz	r0, b4c90 <_Z5ouijav+0xa8>
    Serial.printf("%s\n", ouijaBoard[ouijaChar]);
   b4c42:	4d1b      	ldr	r5, [pc, #108]	; (b4cb0 <_Z5ouijav+0xc8>)
   b4c44:	f002 ffbe 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4c48:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   b4c4c:	441d      	add	r5, r3
   b4c4e:	462a      	mov	r2, r5
   b4c50:	4918      	ldr	r1, [pc, #96]	; (b4cb4 <_Z5ouijav+0xcc>)
   b4c52:	f7ff fb6d 	bl	b4330 <_ZN5Print6printfEPKcz>
    spiritDisplay.clearDisplay();
   b4c56:	4818      	ldr	r0, [pc, #96]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c58:	f001 f80e 	bl	b5c78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    spiritDisplay.setTextSize(2);
   b4c5c:	4816      	ldr	r0, [pc, #88]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c5e:	2102      	movs	r1, #2
   b4c60:	f000 fe13 	bl	b588a <_ZN12Adafruit_GFX11setTextSizeEh>
    spiritDisplay.setTextColor(WHITE);
   b4c64:	4814      	ldr	r0, [pc, #80]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c66:	2101      	movs	r1, #1
   b4c68:	f000 fe14 	bl	b5894 <_ZN12Adafruit_GFX12setTextColorEt>
    spiritDisplay.setCursor(32,20);
   b4c6c:	4812      	ldr	r0, [pc, #72]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c6e:	2214      	movs	r2, #20
   b4c70:	2120      	movs	r1, #32
   b4c72:	f000 fe07 	bl	b5884 <_ZN12Adafruit_GFX9setCursorEss>
    spiritDisplay.printf("%s", ouijaBoard[ouijaChar]);
   b4c76:	4911      	ldr	r1, [pc, #68]	; (b4cbc <_Z5ouijav+0xd4>)
   b4c78:	480f      	ldr	r0, [pc, #60]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c7a:	462a      	mov	r2, r5
   b4c7c:	f7ff fb58 	bl	b4330 <_ZN5Print6printfEPKcz>
    spiritDisplay.display();
   b4c80:	480d      	ldr	r0, [pc, #52]	; (b4cb8 <_Z5ouijav+0xd0>)
   b4c82:	f001 f855 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>
    ouijaIot(ouijaChar);//do something with the ouija character...in this case interact with the IoT classroom, but change this out next time you use this code
   b4c86:	4620      	mov	r0, r4
   b4c88:	f7ff ff1e 	bl	b4ac8 <_Z8ouijaIoti>
    ouijaToggle = false;
   b4c8c:	2300      	movs	r3, #0
   b4c8e:	7033      	strb	r3, [r6, #0]
}
   b4c90:	b002      	add	sp, #8
   b4c92:	bd70      	pop	{r4, r5, r6, pc}
  if(encPosition > 96){
   b4c94:	2c60      	cmp	r4, #96	; 0x60
   b4c96:	ddb6      	ble.n	b4c06 <_Z5ouijav+0x1e>
		noInterrupts();
   b4c98:	f002 f838 	bl	b6d0c <_Z12noInterruptsv>
		position = p;
   b4c9c:	2400      	movs	r4, #0
   b4c9e:	e7af      	b.n	b4c00 <_Z5ouijav+0x18>
   b4ca0:	2003e604 	.word	0x2003e604
   b4ca4:	2003e544 	.word	0x2003e544
   b4ca8:	2003e541 	.word	0x2003e541
   b4cac:	2003e5a0 	.word	0x2003e5a0
   b4cb0:	2003ded1 	.word	0x2003ded1
   b4cb4:	000b90b0 	.word	0x000b90b0
   b4cb8:	2003e5e0 	.word	0x2003e5e0
   b4cbc:	000b90b4 	.word	0x000b90b4

000b4cc0 <_Z8tempDropv>:

//This function looks for a temperature drop
void tempDrop(){
   b4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}

  int i;
  static bool tempToggle;
  //if the temp drops by at least 5 degrees F within a matter of 10 seconds, do something
  currentTemp = (1.8 * spiritBmp.readTemperature())+32;//Read the BMP
   b4cc2:	4843      	ldr	r0, [pc, #268]	; (b4dd0 <_Z8tempDropv+0x110>)
   b4cc4:	4c43      	ldr	r4, [pc, #268]	; (b4dd4 <_Z8tempDropv+0x114>)
  spiritDisplay.setCursor(5,54);
  spiritDisplay.printf("T: (%i%c)", currentTemp, 0xF8); //print temp regardless of whether or not the temp drops
  spiritDisplay.display();
  spiritDisplay.fillRect(0,54,40,10,BLACK);

  if(currentTemp != previousTemp && tempToggle == false){
   b4cc6:	4e44      	ldr	r6, [pc, #272]	; (b4dd8 <_Z8tempDropv+0x118>)
   b4cc8:	4d44      	ldr	r5, [pc, #272]	; (b4ddc <_Z8tempDropv+0x11c>)
void tempDrop(){
   b4cca:	b085      	sub	sp, #20
  currentTemp = (1.8 * spiritBmp.readTemperature())+32;//Read the BMP
   b4ccc:	f000 fb64 	bl	b5398 <_ZN15Adafruit_BMP28015readTemperatureEv>
   b4cd0:	ee10 0a10 	vmov	r0, s0
   b4cd4:	f003 fc72 	bl	b85bc <__aeabi_f2d>
   b4cd8:	a33b      	add	r3, pc, #236	; (adr r3, b4dc8 <_Z8tempDropv+0x108>)
   b4cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cde:	f003 fcc5 	bl	b866c <__aeabi_dmul>
   b4ce2:	4b3f      	ldr	r3, [pc, #252]	; (b4de0 <_Z8tempDropv+0x120>)
   b4ce4:	2200      	movs	r2, #0
   b4ce6:	f003 fb0b 	bl	b8300 <__adddf3>
   b4cea:	f003 fed1 	bl	b8a90 <__aeabi_d2iz>
  spiritDisplay.setTextSize(1);
   b4cee:	2101      	movs	r1, #1
  currentTemp = (1.8 * spiritBmp.readTemperature())+32;//Read the BMP
   b4cf0:	6020      	str	r0, [r4, #0]
  spiritDisplay.setTextSize(1);
   b4cf2:	483c      	ldr	r0, [pc, #240]	; (b4de4 <_Z8tempDropv+0x124>)
   b4cf4:	f000 fdc9 	bl	b588a <_ZN12Adafruit_GFX11setTextSizeEh>
  spiritDisplay.setTextColor(WHITE);
   b4cf8:	483a      	ldr	r0, [pc, #232]	; (b4de4 <_Z8tempDropv+0x124>)
   b4cfa:	2101      	movs	r1, #1
   b4cfc:	f000 fdca 	bl	b5894 <_ZN12Adafruit_GFX12setTextColorEt>
  spiritDisplay.setCursor(5,54);
   b4d00:	4838      	ldr	r0, [pc, #224]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d02:	2236      	movs	r2, #54	; 0x36
   b4d04:	2105      	movs	r1, #5
   b4d06:	f000 fdbd 	bl	b5884 <_ZN12Adafruit_GFX9setCursorEss>
  spiritDisplay.printf("T: (%i%c)", currentTemp, 0xF8); //print temp regardless of whether or not the temp drops
   b4d0a:	6822      	ldr	r2, [r4, #0]
   b4d0c:	4936      	ldr	r1, [pc, #216]	; (b4de8 <_Z8tempDropv+0x128>)
   b4d0e:	4835      	ldr	r0, [pc, #212]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d10:	23f8      	movs	r3, #248	; 0xf8
   b4d12:	f7ff fb0d 	bl	b4330 <_ZN5Print6printfEPKcz>
  spiritDisplay.display();
   b4d16:	4833      	ldr	r0, [pc, #204]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d18:	f001 f80a 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>
  spiritDisplay.fillRect(0,54,40,10,BLACK);
   b4d1c:	230a      	movs	r3, #10
   b4d1e:	2100      	movs	r1, #0
   b4d20:	e9cd 3100 	strd	r3, r1, [sp]
   b4d24:	2236      	movs	r2, #54	; 0x36
   b4d26:	2328      	movs	r3, #40	; 0x28
   b4d28:	482e      	ldr	r0, [pc, #184]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d2a:	f000 fc69 	bl	b5600 <_ZN12Adafruit_GFX8fillRectEsssst>
  if(currentTemp != previousTemp && tempToggle == false){
   b4d2e:	6822      	ldr	r2, [r4, #0]
   b4d30:	6833      	ldr	r3, [r6, #0]
   b4d32:	429a      	cmp	r2, r3
   b4d34:	d00c      	beq.n	b4d50 <_Z8tempDropv+0x90>
   b4d36:	782b      	ldrb	r3, [r5, #0]
   b4d38:	b953      	cbnz	r3, b4d50 <_Z8tempDropv+0x90>
   b4d3a:	f001 fbdb 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      _timerStart = millis();
   b4d3e:	4b2b      	ldr	r3, [pc, #172]	; (b4dec <_Z8tempDropv+0x12c>)
      _timerTarget = msec;       
   b4d40:	f242 7210 	movw	r2, #10000	; 0x2710
      _timerStart = millis();
   b4d44:	6018      	str	r0, [r3, #0]
      _timerTarget = msec;       
   b4d46:	605a      	str	r2, [r3, #4]
    tempTimer.startTimer(10000);
    previousTemp = currentTemp;
   b4d48:	6823      	ldr	r3, [r4, #0]
   b4d4a:	6033      	str	r3, [r6, #0]
    tempToggle = true;
   b4d4c:	2301      	movs	r3, #1
   b4d4e:	702b      	strb	r3, [r5, #0]
  }

  if(currentTemp <= (previousTemp - 5) && tempToggle && tempTimer.isTimerReady()){
   b4d50:	6833      	ldr	r3, [r6, #0]
   b4d52:	6822      	ldr	r2, [r4, #0]
   b4d54:	3b04      	subs	r3, #4
   b4d56:	4293      	cmp	r3, r2
   b4d58:	dd2a      	ble.n	b4db0 <_Z8tempDropv+0xf0>
   b4d5a:	782b      	ldrb	r3, [r5, #0]
   b4d5c:	b37b      	cbz	r3, b4dbe <_Z8tempDropv+0xfe>
   b4d5e:	4823      	ldr	r0, [pc, #140]	; (b4dec <_Z8tempDropv+0x12c>)
   b4d60:	f7ff fd02 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4d64:	b320      	cbz	r0, b4db0 <_Z8tempDropv+0xf0>
    //once cold spot is detected, turn lights blue and gradually dim them
    Serial.printf("TEMP DROP DETECTED\n");
   b4d66:	f002 ff2d 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4d6a:	4921      	ldr	r1, [pc, #132]	; (b4df0 <_Z8tempDropv+0x130>)
    spiritDisplay.clearDisplay();
    spiritDisplay.drawBitmap(32,0,ghost_bmp,64,64,WHITE);
    spiritDisplay.display();
    for(i=1; i<7;i++){
      setHue(i, true, HueBlue, 50, 250);
   b4d6c:	4e21      	ldr	r6, [pc, #132]	; (b4df4 <_Z8tempDropv+0x134>)
    Serial.printf("TEMP DROP DETECTED\n");
   b4d6e:	f7ff fadf 	bl	b4330 <_ZN5Print6printfEPKcz>
    spiritDisplay.clearDisplay();
   b4d72:	481c      	ldr	r0, [pc, #112]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d74:	f000 ff80 	bl	b5c78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    spiritDisplay.drawBitmap(32,0,ghost_bmp,64,64,WHITE);
   b4d78:	2401      	movs	r4, #1
   b4d7a:	2340      	movs	r3, #64	; 0x40
   b4d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b4d80:	4818      	ldr	r0, [pc, #96]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d82:	9300      	str	r3, [sp, #0]
   b4d84:	2200      	movs	r2, #0
   b4d86:	4b1c      	ldr	r3, [pc, #112]	; (b4df8 <_Z8tempDropv+0x138>)
   b4d88:	2120      	movs	r1, #32
   b4d8a:	f000 fc77 	bl	b567c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
    spiritDisplay.display();
   b4d8e:	4815      	ldr	r0, [pc, #84]	; (b4de4 <_Z8tempDropv+0x124>)
   b4d90:	f000 ffce 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>
      setHue(i, true, HueBlue, 50, 250);
   b4d94:	27fa      	movs	r7, #250	; 0xfa
   b4d96:	9700      	str	r7, [sp, #0]
   b4d98:	4620      	mov	r0, r4
   b4d9a:	6832      	ldr	r2, [r6, #0]
   b4d9c:	2332      	movs	r3, #50	; 0x32
   b4d9e:	2101      	movs	r1, #1
    for(i=1; i<7;i++){
   b4da0:	3401      	adds	r4, #1
      setHue(i, true, HueBlue, 50, 250);
   b4da2:	f7ff faf7 	bl	b4394 <_Z6setHueibiii>
    for(i=1; i<7;i++){
   b4da6:	2c07      	cmp	r4, #7
   b4da8:	d1f5      	bne.n	b4d96 <_Z8tempDropv+0xd6>
    }
    tempToggle = false;
  }

  if(tempToggle && tempTimer.isTimerReady()){
    tempToggle = false;
   b4daa:	2300      	movs	r3, #0
   b4dac:	702b      	strb	r3, [r5, #0]
  }

}
   b4dae:	e006      	b.n	b4dbe <_Z8tempDropv+0xfe>
  if(tempToggle && tempTimer.isTimerReady()){
   b4db0:	782b      	ldrb	r3, [r5, #0]
   b4db2:	b123      	cbz	r3, b4dbe <_Z8tempDropv+0xfe>
   b4db4:	480d      	ldr	r0, [pc, #52]	; (b4dec <_Z8tempDropv+0x12c>)
   b4db6:	f7ff fcd7 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4dba:	2800      	cmp	r0, #0
   b4dbc:	d1f5      	bne.n	b4daa <_Z8tempDropv+0xea>
}
   b4dbe:	b005      	add	sp, #20
   b4dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4dc2:	bf00      	nop
   b4dc4:	f3af 8000 	nop.w
   b4dc8:	cccccccd 	.word	0xcccccccd
   b4dcc:	3ffccccc 	.word	0x3ffccccc
   b4dd0:	2003e5ac 	.word	0x2003e5ac
   b4dd4:	2003e57c 	.word	0x2003e57c
   b4dd8:	2003e5a8 	.word	0x2003e5a8
   b4ddc:	2003e55c 	.word	0x2003e55c
   b4de0:	40400000 	.word	0x40400000
   b4de4:	2003e5e0 	.word	0x2003e5e0
   b4de8:	000b90b7 	.word	0x000b90b7
   b4dec:	2003e61c 	.word	0x2003e61c
   b4df0:	000b90c1 	.word	0x000b90c1
   b4df4:	2003deb8 	.word	0x2003deb8
   b4df8:	000b914f 	.word	0x000b914f

000b4dfc <_Z8emfFlashv>:
  }

}

//This function changes states of Hue Lights and Wemo Outlets in the IoT Classroom based on readings from the EMF meter
void emfFlash(){ //flash Hue lights and Wemos on and off once every half second
   b4dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}

  int i;
  static bool emfFlashToggle = true;

  if(emfFlashToggle){
   b4dfe:	4d1a      	ldr	r5, [pc, #104]	; (b4e68 <_Z8emfFlashv+0x6c>)
   b4e00:	782b      	ldrb	r3, [r5, #0]
   b4e02:	b143      	cbz	r3, b4e16 <_Z8emfFlashv+0x1a>
   b4e04:	f001 fb76 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      _timerStart = millis();
   b4e08:	4b18      	ldr	r3, [pc, #96]	; (b4e6c <_Z8emfFlashv+0x70>)
      _timerTarget = msec;       
   b4e0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
      _timerStart = millis();
   b4e0e:	6018      	str	r0, [r3, #0]
      _timerTarget = msec;       
   b4e10:	605a      	str	r2, [r3, #4]
    emfFlashTimer.startTimer(500);
    emfFlashToggle = false;
   b4e12:	2300      	movs	r3, #0
   b4e14:	702b      	strb	r3, [r5, #0]
  }

  if(emfFlashTimer.isTimerReady()){
   b4e16:	4815      	ldr	r0, [pc, #84]	; (b4e6c <_Z8emfFlashv+0x70>)
   b4e18:	f7ff fca6 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4e1c:	b190      	cbz	r0, b4e44 <_Z8emfFlashv+0x48>

    for(i=0; i<6; i++){
   b4e1e:	2400      	movs	r4, #0
      switchOFF(i);
      setHue(i+1, false, 0, 0, 0);
   b4e20:	4626      	mov	r6, r4
      switchOFF(i);
   b4e22:	4620      	mov	r0, r4
   b4e24:	f7ff fc3e 	bl	b46a4 <_Z9switchOFFi>
      setHue(i+1, false, 0, 0, 0);
   b4e28:	3401      	adds	r4, #1
   b4e2a:	2300      	movs	r3, #0
   b4e2c:	9600      	str	r6, [sp, #0]
   b4e2e:	461a      	mov	r2, r3
   b4e30:	4619      	mov	r1, r3
   b4e32:	4620      	mov	r0, r4
   b4e34:	f7ff faae 	bl	b4394 <_Z6setHueibiii>
    for(i=0; i<6; i++){
   b4e38:	2c06      	cmp	r4, #6
   b4e3a:	d1f2      	bne.n	b4e22 <_Z8emfFlashv+0x26>
    }
    emfFlashToggle = true;
   b4e3c:	2301      	movs	r3, #1
   b4e3e:	702b      	strb	r3, [r5, #0]
      switchON(i);
      setHue(i+1, true, HueOrange, 250, 250);
    }
  }

}
   b4e40:	b002      	add	sp, #8
   b4e42:	bd70      	pop	{r4, r5, r6, pc}
      setHue(i+1, true, HueOrange, 250, 250);
   b4e44:	4d0a      	ldr	r5, [pc, #40]	; (b4e70 <_Z8emfFlashv+0x74>)
    for(i=0; i<6; i++){
   b4e46:	4604      	mov	r4, r0
      setHue(i+1, true, HueOrange, 250, 250);
   b4e48:	26fa      	movs	r6, #250	; 0xfa
      switchON(i);
   b4e4a:	4620      	mov	r0, r4
   b4e4c:	f7ff fbc8 	bl	b45e0 <_Z8switchONi>
      setHue(i+1, true, HueOrange, 250, 250);
   b4e50:	3401      	adds	r4, #1
   b4e52:	9600      	str	r6, [sp, #0]
   b4e54:	682a      	ldr	r2, [r5, #0]
   b4e56:	23fa      	movs	r3, #250	; 0xfa
   b4e58:	2101      	movs	r1, #1
   b4e5a:	4620      	mov	r0, r4
   b4e5c:	f7ff fa9a 	bl	b4394 <_Z6setHueibiii>
    for(i=0; i<6; i++){
   b4e60:	2c06      	cmp	r4, #6
   b4e62:	d1f2      	bne.n	b4e4a <_Z8emfFlashv+0x4e>
   b4e64:	e7ec      	b.n	b4e40 <_Z8emfFlashv+0x44>
   b4e66:	bf00      	nop
   b4e68:	2003ded0 	.word	0x2003ded0
   b4e6c:	2003e580 	.word	0x2003e580
   b4e70:	2003dec4 	.word	0x2003dec4

000b4e74 <_Z3emfv>:
void emf(){
   b4e74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  int emfLevel = analogRead(EMFPIN);
   b4e76:	2012      	movs	r0, #18
   b4e78:	f003 f86b 	bl	b7f52 <analogRead>
   b4e7c:	4604      	mov	r4, r0
  Serial.printf("%i\n", emfLevel);
   b4e7e:	f002 fea1 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b4e82:	492a      	ldr	r1, [pc, #168]	; (b4f2c <_Z3emfv+0xb8>)
   b4e84:	4d2a      	ldr	r5, [pc, #168]	; (b4f30 <_Z3emfv+0xbc>)
   b4e86:	4622      	mov	r2, r4
   b4e88:	f7ff fa52 	bl	b4330 <_ZN5Print6printfEPKcz>
  if(emfLevel > 2000 && emfToggle == false){
   b4e8c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4e90:	dd47      	ble.n	b4f22 <_Z3emfv+0xae>
   b4e92:	782e      	ldrb	r6, [r5, #0]
   b4e94:	bb16      	cbnz	r6, b4edc <_Z3emfv+0x68>
    candlePixel.clear();
   b4e96:	4827      	ldr	r0, [pc, #156]	; (b4f34 <_Z3emfv+0xc0>)
   b4e98:	f001 fafe 	bl	b6498 <_ZN17Adafruit_NeoPixel5clearEv>
    candlePixel.setBrightness(150);
   b4e9c:	2196      	movs	r1, #150	; 0x96
   b4e9e:	4825      	ldr	r0, [pc, #148]	; (b4f34 <_Z3emfv+0xc0>)
   b4ea0:	f001 fad3 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4ea4:	4823      	ldr	r0, [pc, #140]	; (b4f34 <_Z3emfv+0xc0>)
   b4ea6:	f001 f8e1 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
   b4eaa:	f001 fb23 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
      _timerStart = millis();
   b4eae:	4b22      	ldr	r3, [pc, #136]	; (b4f38 <_Z3emfv+0xc4>)
      _timerTarget = msec;       
   b4eb0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
      _timerStart = millis();
   b4eb4:	6018      	str	r0, [r3, #0]
    spiritDisplay.clearDisplay();
   b4eb6:	4821      	ldr	r0, [pc, #132]	; (b4f3c <_Z3emfv+0xc8>)
      _timerTarget = msec;       
   b4eb8:	605a      	str	r2, [r3, #4]
    spiritDisplay.drawBitmap(32,0,ghost_bmp,64,64,WHITE);
   b4eba:	2401      	movs	r4, #1
    spiritDisplay.clearDisplay();
   b4ebc:	f000 fedc 	bl	b5c78 <_ZN16Adafruit_SSD130612clearDisplayEv>
    spiritDisplay.drawBitmap(32,0,ghost_bmp,64,64,WHITE);
   b4ec0:	2340      	movs	r3, #64	; 0x40
   b4ec2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b4ec6:	481d      	ldr	r0, [pc, #116]	; (b4f3c <_Z3emfv+0xc8>)
   b4ec8:	9300      	str	r3, [sp, #0]
   b4eca:	4632      	mov	r2, r6
   b4ecc:	4b1c      	ldr	r3, [pc, #112]	; (b4f40 <_Z3emfv+0xcc>)
   b4ece:	2120      	movs	r1, #32
   b4ed0:	f000 fbd4 	bl	b567c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
    spiritDisplay.display();
   b4ed4:	4819      	ldr	r0, [pc, #100]	; (b4f3c <_Z3emfv+0xc8>)
   b4ed6:	f000 ff2b 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>
    emfToggle = true;
   b4eda:	702c      	strb	r4, [r5, #0]
    emfFlash();
   b4edc:	f7ff ff8e 	bl	b4dfc <_Z8emfFlashv>
  if(emfToggle && emfTimer.isTimerReady()){
   b4ee0:	782b      	ldrb	r3, [r5, #0]
   b4ee2:	b30b      	cbz	r3, b4f28 <_Z3emfv+0xb4>
   b4ee4:	4814      	ldr	r0, [pc, #80]	; (b4f38 <_Z3emfv+0xc4>)
   b4ee6:	f7ff fc3f 	bl	b4768 <_ZN8IoTTimer12isTimerReadyEv>
   b4eea:	b1e8      	cbz	r0, b4f28 <_Z3emfv+0xb4>
    candlePixel.clear();
   b4eec:	4811      	ldr	r0, [pc, #68]	; (b4f34 <_Z3emfv+0xc0>)
   b4eee:	f001 fad3 	bl	b6498 <_ZN17Adafruit_NeoPixel5clearEv>
    candlePixel.setBrightness(0);
   b4ef2:	4810      	ldr	r0, [pc, #64]	; (b4f34 <_Z3emfv+0xc0>)
   b4ef4:	2100      	movs	r1, #0
   b4ef6:	f001 faa8 	bl	b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    candlePixel.show();
   b4efa:	480e      	ldr	r0, [pc, #56]	; (b4f34 <_Z3emfv+0xc0>)
   b4efc:	f001 f8b6 	bl	b606c <_ZN17Adafruit_NeoPixel4showEv>
    for(i=0;i<6;i++){
   b4f00:	2400      	movs	r4, #0
      setHue(i+1, false, 0, 0, 0);
   b4f02:	4626      	mov	r6, r4
      switchOFF(i);
   b4f04:	4620      	mov	r0, r4
   b4f06:	f7ff fbcd 	bl	b46a4 <_Z9switchOFFi>
      setHue(i+1, false, 0, 0, 0);
   b4f0a:	3401      	adds	r4, #1
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	9600      	str	r6, [sp, #0]
   b4f10:	461a      	mov	r2, r3
   b4f12:	4619      	mov	r1, r3
   b4f14:	4620      	mov	r0, r4
   b4f16:	f7ff fa3d 	bl	b4394 <_Z6setHueibiii>
    for(i=0;i<6;i++){
   b4f1a:	2c06      	cmp	r4, #6
      emfToggle = false;
   b4f1c:	702e      	strb	r6, [r5, #0]
    for(i=0;i<6;i++){
   b4f1e:	d1f1      	bne.n	b4f04 <_Z3emfv+0x90>
   b4f20:	e002      	b.n	b4f28 <_Z3emfv+0xb4>
  if(emfToggle){
   b4f22:	782b      	ldrb	r3, [r5, #0]
   b4f24:	2b00      	cmp	r3, #0
   b4f26:	d1d9      	bne.n	b4edc <_Z3emfv+0x68>
}
   b4f28:	b004      	add	sp, #16
   b4f2a:	bd70      	pop	{r4, r5, r6, pc}
   b4f2c:	000b90d5 	.word	0x000b90d5
   b4f30:	2003e540 	.word	0x2003e540
   b4f34:	2003e568 	.word	0x2003e568
   b4f38:	2003e588 	.word	0x2003e588
   b4f3c:	2003e5e0 	.word	0x2003e5e0
   b4f40:	000b914f 	.word	0x000b914f
   b4f44:	00000000 	.word	0x00000000

000b4f48 <loop>:
void loop() {
   b4f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  digitalWrite(ENCLEDG, 255);
   b4f4a:	21ff      	movs	r1, #255	; 0xff
   b4f4c:	2005      	movs	r0, #5
   b4f4e:	f002 ffd4 	bl	b7efa <digitalWrite>
  if(digitalRead(SWITCHPIN)){
   b4f52:	2007      	movs	r0, #7
   b4f54:	f002 ffea 	bl	b7f2c <digitalRead>
   b4f58:	4604      	mov	r4, r0
   b4f5a:	b160      	cbz	r0, b4f76 <loop+0x2e>
    digitalWrite(ENCLEDR, 126);
   b4f5c:	217e      	movs	r1, #126	; 0x7e
   b4f5e:	2004      	movs	r0, #4
   b4f60:	f002 ffcb 	bl	b7efa <digitalWrite>
    tempDrop();
   b4f64:	f7ff feac 	bl	b4cc0 <_Z8tempDropv>
    ouija();
   b4f68:	f7ff fe3e 	bl	b4be8 <_Z5ouijav>
}
   b4f6c:	b003      	add	sp, #12
   b4f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    emf();
   b4f72:	f7ff bf7f 	b.w	b4e74 <_Z3emfv>
    digitalWrite(ENCLEDR, 0);
   b4f76:	4601      	mov	r1, r0
   b4f78:	2004      	movs	r0, #4
   b4f7a:	f002 ffbe 	bl	b7efa <digitalWrite>
    currentTemp = (1.8 * spiritBmp.readTemperature())+32;
   b4f7e:	4820      	ldr	r0, [pc, #128]	; (b5000 <loop+0xb8>)
   b4f80:	4d20      	ldr	r5, [pc, #128]	; (b5004 <loop+0xbc>)
   b4f82:	f000 fa09 	bl	b5398 <_ZN15Adafruit_BMP28015readTemperatureEv>
   b4f86:	ee10 0a10 	vmov	r0, s0
   b4f8a:	f003 fb17 	bl	b85bc <__aeabi_f2d>
   b4f8e:	a31a      	add	r3, pc, #104	; (adr r3, b4ff8 <loop+0xb0>)
   b4f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f94:	f003 fb6a 	bl	b866c <__aeabi_dmul>
   b4f98:	4b1b      	ldr	r3, [pc, #108]	; (b5008 <loop+0xc0>)
   b4f9a:	2200      	movs	r2, #0
   b4f9c:	f003 f9b0 	bl	b8300 <__adddf3>
   b4fa0:	f003 fd76 	bl	b8a90 <__aeabi_d2iz>
    spiritDisplay.setTextSize(1);
   b4fa4:	2101      	movs	r1, #1
    currentTemp = (1.8 * spiritBmp.readTemperature())+32;
   b4fa6:	6028      	str	r0, [r5, #0]
    spiritDisplay.setTextSize(1);
   b4fa8:	4818      	ldr	r0, [pc, #96]	; (b500c <loop+0xc4>)
   b4faa:	f000 fc6e 	bl	b588a <_ZN12Adafruit_GFX11setTextSizeEh>
    spiritDisplay.setTextColor(WHITE);
   b4fae:	4817      	ldr	r0, [pc, #92]	; (b500c <loop+0xc4>)
   b4fb0:	2101      	movs	r1, #1
   b4fb2:	f000 fc6f 	bl	b5894 <_ZN12Adafruit_GFX12setTextColorEt>
    spiritDisplay.setCursor(5,54);
   b4fb6:	4815      	ldr	r0, [pc, #84]	; (b500c <loop+0xc4>)
   b4fb8:	2236      	movs	r2, #54	; 0x36
   b4fba:	2105      	movs	r1, #5
   b4fbc:	f000 fc62 	bl	b5884 <_ZN12Adafruit_GFX9setCursorEss>
    spiritDisplay.printf("T: (%i%c)", currentTemp, 0xF8);
   b4fc0:	682a      	ldr	r2, [r5, #0]
   b4fc2:	4913      	ldr	r1, [pc, #76]	; (b5010 <loop+0xc8>)
   b4fc4:	4811      	ldr	r0, [pc, #68]	; (b500c <loop+0xc4>)
   b4fc6:	23f8      	movs	r3, #248	; 0xf8
   b4fc8:	f7ff f9b2 	bl	b4330 <_ZN5Print6printfEPKcz>
    spiritDisplay.display();
   b4fcc:	480f      	ldr	r0, [pc, #60]	; (b500c <loop+0xc4>)
   b4fce:	f000 feaf 	bl	b5d30 <_ZN16Adafruit_SSD13067displayEv>
    spiritDisplay.fillRect(0,54,40,10,BLACK);
   b4fd2:	230a      	movs	r3, #10
   b4fd4:	480d      	ldr	r0, [pc, #52]	; (b500c <loop+0xc4>)
   b4fd6:	9300      	str	r3, [sp, #0]
   b4fd8:	2236      	movs	r2, #54	; 0x36
   b4fda:	2328      	movs	r3, #40	; 0x28
   b4fdc:	4621      	mov	r1, r4
   b4fde:	9401      	str	r4, [sp, #4]
   b4fe0:	f000 fb0e 	bl	b5600 <_ZN12Adafruit_GFX8fillRectEsssst>
    ouija();
   b4fe4:	f7ff fe00 	bl	b4be8 <_Z5ouijav>
}
   b4fe8:	b003      	add	sp, #12
   b4fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    candleFlicker();
   b4fee:	f7ff bcf7 	b.w	b49e0 <_Z13candleFlickerv>
   b4ff2:	bf00      	nop
   b4ff4:	f3af 8000 	nop.w
   b4ff8:	cccccccd 	.word	0xcccccccd
   b4ffc:	3ffccccc 	.word	0x3ffccccc
   b5000:	2003e5ac 	.word	0x2003e5ac
   b5004:	2003e57c 	.word	0x2003e57c
   b5008:	40400000 	.word	0x40400000
   b500c:	2003e5e0 	.word	0x2003e5e0
   b5010:	000b90b7 	.word	0x000b90b7

000b5014 <_GLOBAL__sub_I_hueOn>:
}
   b5014:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b5016:	491f      	ldr	r1, [pc, #124]	; (b5094 <_GLOBAL__sub_I_hueOn+0x80>)
   b5018:	481f      	ldr	r0, [pc, #124]	; (b5098 <_GLOBAL__sub_I_hueOn+0x84>)
   b501a:	f002 f992 	bl	b7342 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b501e:	4a1f      	ldr	r2, [pc, #124]	; (b509c <_GLOBAL__sub_I_hueOn+0x88>)
   b5020:	4b1f      	ldr	r3, [pc, #124]	; (b50a0 <_GLOBAL__sub_I_hueOn+0x8c>)
   b5022:	6812      	ldr	r2, [r2, #0]
   b5024:	601a      	str	r2, [r3, #0]
   b5026:	4a1f      	ldr	r2, [pc, #124]	; (b50a4 <_GLOBAL__sub_I_hueOn+0x90>)
TCPClient HueClient;
   b5028:	481f      	ldr	r0, [pc, #124]	; (b50a8 <_GLOBAL__sub_I_hueOn+0x94>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b502a:	6812      	ldr	r2, [r2, #0]
   b502c:	605a      	str	r2, [r3, #4]
   b502e:	4a1f      	ldr	r2, [pc, #124]	; (b50ac <_GLOBAL__sub_I_hueOn+0x98>)
   b5030:	6812      	ldr	r2, [r2, #0]
   b5032:	609a      	str	r2, [r3, #8]
   b5034:	4a1e      	ldr	r2, [pc, #120]	; (b50b0 <_GLOBAL__sub_I_hueOn+0x9c>)
   b5036:	6812      	ldr	r2, [r2, #0]
   b5038:	60da      	str	r2, [r3, #12]
   b503a:	4a1e      	ldr	r2, [pc, #120]	; (b50b4 <_GLOBAL__sub_I_hueOn+0xa0>)
   b503c:	6812      	ldr	r2, [r2, #0]
   b503e:	611a      	str	r2, [r3, #16]
   b5040:	4a1d      	ldr	r2, [pc, #116]	; (b50b8 <_GLOBAL__sub_I_hueOn+0xa4>)
   b5042:	6812      	ldr	r2, [r2, #0]
   b5044:	615a      	str	r2, [r3, #20]
   b5046:	4a1d      	ldr	r2, [pc, #116]	; (b50bc <_GLOBAL__sub_I_hueOn+0xa8>)
   b5048:	6812      	ldr	r2, [r2, #0]
   b504a:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b504c:	f002 fcec 	bl	b7a28 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b5050:	481b      	ldr	r0, [pc, #108]	; (b50c0 <_GLOBAL__sub_I_hueOn+0xac>)
   b5052:	f002 fce9 	bl	b7a28 <_ZN9TCPClientC1Ev>
Encoder spiritEncoder(ENCPINB, ENCPINA);
   b5056:	2210      	movs	r2, #16
   b5058:	210f      	movs	r1, #15
   b505a:	481a      	ldr	r0, [pc, #104]	; (b50c4 <_GLOBAL__sub_I_hueOn+0xb0>)
   b505c:	f7ff fb90 	bl	b4780 <_ZN7EncoderC1Ett>
Adafruit_NeoPixel candlePixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b5060:	2302      	movs	r3, #2
   b5062:	461a      	mov	r2, r3
   b5064:	4619      	mov	r1, r3
   b5066:	4818      	ldr	r0, [pc, #96]	; (b50c8 <_GLOBAL__sub_I_hueOn+0xb4>)
   b5068:	f000 ffee 	bl	b6048 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_BMP280 spiritBmp;
   b506c:	4817      	ldr	r0, [pc, #92]	; (b50cc <_GLOBAL__sub_I_hueOn+0xb8>)
   b506e:	f000 f833 	bl	b50d8 <_ZN15Adafruit_BMP280C1Ev>
Adafruit_SSD1306 spiritDisplay(OLED_RESET);
   b5072:	4817      	ldr	r0, [pc, #92]	; (b50d0 <_GLOBAL__sub_I_hueOn+0xbc>)
   b5074:	2103      	movs	r1, #3
   b5076:	f000 fde9 	bl	b5c4c <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b507a:	4b16      	ldr	r3, [pc, #88]	; (b50d4 <_GLOBAL__sub_I_hueOn+0xc0>)
   b507c:	2200      	movs	r2, #0
   b507e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5082:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5086:	609a      	str	r2, [r3, #8]
}
   b5088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b508c:	2003      	movs	r0, #3
   b508e:	f001 bc21 	b.w	b68d4 <set_system_mode>
   b5092:	bf00      	nop
   b5094:	000b8f78 	.word	0x000b8f78
   b5098:	2003e590 	.word	0x2003e590
   b509c:	2003e510 	.word	0x2003e510
   b50a0:	2003e4f4 	.word	0x2003e4f4
   b50a4:	2003dec4 	.word	0x2003dec4
   b50a8:	2003e4d8 	.word	0x2003e4d8
   b50ac:	2003decc 	.word	0x2003decc
   b50b0:	2003debc 	.word	0x2003debc
   b50b4:	2003deb8 	.word	0x2003deb8
   b50b8:	2003dec0 	.word	0x2003dec0
   b50bc:	2003dec8 	.word	0x2003dec8
   b50c0:	2003e520 	.word	0x2003e520
   b50c4:	2003e604 	.word	0x2003e604
   b50c8:	2003e568 	.word	0x2003e568
   b50cc:	2003e5ac 	.word	0x2003e5ac
   b50d0:	2003e5e0 	.word	0x2003e5e0
   b50d4:	2003e514 	.word	0x2003e514

000b50d8 <_ZN15Adafruit_BMP280C1Ev>:
 PRIVATE FUNCTIONS
 ***************************************************************************/


Adafruit_BMP280::Adafruit_BMP280()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b50d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b50dc:	60c3      	str	r3, [r0, #12]
{ }
   b50de:	4770      	bx	lr

000b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b50e0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b50e2:	4c0b      	ldr	r4, [pc, #44]	; (b5110 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b50e4:	7821      	ldrb	r1, [r4, #0]
   b50e6:	f3bf 8f5b 	dmb	ish
   b50ea:	f011 0101 	ands.w	r1, r1, #1
   b50ee:	d10b      	bne.n	b5108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b50f0:	4620      	mov	r0, r4
   b50f2:	9101      	str	r1, [sp, #4]
   b50f4:	f7fe ffe2 	bl	b40bc <__cxa_guard_acquire>
   b50f8:	9901      	ldr	r1, [sp, #4]
   b50fa:	b128      	cbz	r0, b5108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b50fc:	4805      	ldr	r0, [pc, #20]	; (b5114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b50fe:	f001 fff1 	bl	b70e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5102:	4620      	mov	r0, r4
   b5104:	f7fe ffdf 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b5108:	4802      	ldr	r0, [pc, #8]	; (b5114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b510a:	b002      	add	sp, #8
   b510c:	bd10      	pop	{r4, pc}
   b510e:	bf00      	nop
   b5110:	2003e624 	.word	0x2003e624
   b5114:	2003e628 	.word	0x2003e628

000b5118 <_ZN15Adafruit_BMP2807spixferEh>:
  readCoefficients();
  write8(BMP280_REGISTER_CONTROL, 0x3F);
  return true;
}

uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   b5118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b511c:	f990 300f 	ldrsb.w	r3, [r0, #15]
   b5120:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   b5122:	4605      	mov	r5, r0
   b5124:	460f      	mov	r7, r1
  if (_sck == -1)
   b5126:	d106      	bne.n	b5136 <_ZN15Adafruit_BMP2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5128:	f7ff ffda 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b512c:	4639      	mov	r1, r7
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
   b512e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5132:	f002 b88b 	b.w	b724c <_ZN8SPIClass8transferEh>
  Serial.println("Software SPI");
   b5136:	f002 fd45 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b513a:	4915      	ldr	r1, [pc, #84]	; (b5190 <_ZN15Adafruit_BMP2807spixferEh+0x78>)
   b513c:	f001 ff6d 	bl	b701a <_ZN5Print7printlnEPKc>
  uint8_t reply = 0;
   b5140:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5142:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5144:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b5148:	f995 000f 	ldrsb.w	r0, [r5, #15]
   b514c:	2100      	movs	r1, #0
   b514e:	b280      	uxth	r0, r0
   b5150:	f002 fed3 	bl	b7efa <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5154:	f995 000d 	ldrsb.w	r0, [r5, #13]
   b5158:	fa08 f106 	lsl.w	r1, r8, r6
   b515c:	4039      	ands	r1, r7
   b515e:	b280      	uxth	r0, r0
   b5160:	f002 fecb 	bl	b7efa <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5164:	f995 000f 	ldrsb.w	r0, [r5, #15]
   b5168:	2101      	movs	r1, #1
   b516a:	b280      	uxth	r0, r0
   b516c:	f002 fec5 	bl	b7efa <digitalWrite>
    if (digitalRead(_miso))
   b5170:	f995 000e 	ldrsb.w	r0, [r5, #14]
    reply <<= 1;
   b5174:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5176:	b280      	uxth	r0, r0
    reply <<= 1;
   b5178:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b517a:	f002 fed7 	bl	b7f2c <digitalRead>
   b517e:	b108      	cbz	r0, b5184 <_ZN15Adafruit_BMP2807spixferEh+0x6c>
      reply |= 1;
   b5180:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5184:	3e01      	subs	r6, #1
   b5186:	d2df      	bcs.n	b5148 <_ZN15Adafruit_BMP2807spixferEh+0x30>
}
   b5188:	4620      	mov	r0, r4
   b518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b518e:	bf00      	nop
   b5190:	000b934f 	.word	0x000b934f

000b5194 <_ZN15Adafruit_BMP2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void Adafruit_BMP280::write8(byte reg, byte value)
{
   b5194:	b570      	push	{r4, r5, r6, lr}
   b5196:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5198:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b519c:	1c43      	adds	r3, r0, #1
{
   b519e:	460e      	mov	r6, r1
   b51a0:	4615      	mov	r5, r2
  if (_cs == -1) {
   b51a2:	d116      	bne.n	b51d2 <_ZN15Adafruit_BMP2806write8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b51a4:	f002 ff2a 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b51a8:	7821      	ldrb	r1, [r4, #0]
   b51aa:	f001 fd41 	bl	b6c30 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b51ae:	f002 ff25 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b51b2:	6803      	ldr	r3, [r0, #0]
   b51b4:	4631      	mov	r1, r6
   b51b6:	689b      	ldr	r3, [r3, #8]
   b51b8:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b51ba:	f002 ff1f 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b51be:	6803      	ldr	r3, [r0, #0]
   b51c0:	4629      	mov	r1, r5
   b51c2:	689b      	ldr	r3, [r3, #8]
   b51c4:	4798      	blx	r3
    Wire.endTransmission();
   b51c6:	f002 ff19 	bl	b7ffc <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
  }
}
   b51ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b51ce:	f001 bd3a 	b.w	b6c46 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(_cs, LOW);
   b51d2:	2100      	movs	r1, #0
   b51d4:	b280      	uxth	r0, r0
   b51d6:	f002 fe90 	bl	b7efa <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b51da:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b51de:	4620      	mov	r0, r4
   b51e0:	f7ff ff9a 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
   b51e4:	4629      	mov	r1, r5
   b51e6:	4620      	mov	r0, r4
   b51e8:	f7ff ff96 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
   b51ec:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b51f0:	2101      	movs	r1, #1
}
   b51f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b51f6:	b280      	uxth	r0, r0
   b51f8:	f002 be7f 	b.w	b7efa <digitalWrite>

000b51fc <_ZN15Adafruit_BMP2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C/SPI
*/
/**************************************************************************/
uint8_t Adafruit_BMP280::read8(byte reg)
{
   b51fc:	b538      	push	{r3, r4, r5, lr}
   b51fe:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
   b5200:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b5204:	1c43      	adds	r3, r0, #1
{
   b5206:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5208:	d120      	bne.n	b524c <_ZN15Adafruit_BMP2805read8Eh+0x50>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b520a:	f002 fef7 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b520e:	7821      	ldrb	r1, [r4, #0]
   b5210:	f001 fd0e 	bl	b6c30 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5214:	f002 fef2 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5218:	6803      	ldr	r3, [r0, #0]
   b521a:	4629      	mov	r1, r5
   b521c:	689b      	ldr	r3, [r3, #8]
   b521e:	4798      	blx	r3
    Wire.endTransmission();
   b5220:	f002 feec 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5224:	f001 fd0f 	bl	b6c46 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   b5228:	f002 fee8 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b522c:	7821      	ldrb	r1, [r4, #0]
   b522e:	2201      	movs	r2, #1
   b5230:	f001 fcfb 	bl	b6c2a <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5234:	f002 fee2 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5238:	6803      	ldr	r3, [r0, #0]
   b523a:	695b      	ldr	r3, [r3, #20]
   b523c:	4798      	blx	r3
   b523e:	b2c5      	uxtb	r5, r0
    Wire.endTransmission();
   b5240:	f002 fedc 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5244:	f001 fcff 	bl	b6c46 <_ZN7TwoWire15endTransmissionEv>
    value = spixfer(0);
    digitalWrite(_cs, HIGH);

  }
  return value;
}
   b5248:	4628      	mov	r0, r5
   b524a:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, LOW);
   b524c:	2100      	movs	r1, #0
   b524e:	b280      	uxth	r0, r0
   b5250:	f002 fe53 	bl	b7efa <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5254:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5258:	4620      	mov	r0, r4
   b525a:	f7ff ff5d 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
   b525e:	2100      	movs	r1, #0
   b5260:	4620      	mov	r0, r4
   b5262:	f7ff ff59 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
   b5266:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5268:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b526c:	2101      	movs	r1, #1
   b526e:	b280      	uxth	r0, r0
   b5270:	f002 fe43 	bl	b7efa <digitalWrite>
   b5274:	e7e8      	b.n	b5248 <_ZN15Adafruit_BMP2805read8Eh+0x4c>

000b5276 <_ZN15Adafruit_BMP2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C/SPI
*/
/**************************************************************************/
uint16_t Adafruit_BMP280::read16(byte reg)
{
   b5276:	b538      	push	{r3, r4, r5, lr}
   b5278:	4605      	mov	r5, r0
  uint16_t value;

  if (_cs == -1) {
   b527a:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b527e:	1c43      	adds	r3, r0, #1
{
   b5280:	460c      	mov	r4, r1
  if (_cs == -1) {
   b5282:	d128      	bne.n	b52d6 <_ZN15Adafruit_BMP2806read16Eh+0x60>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5284:	f002 feba 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5288:	7829      	ldrb	r1, [r5, #0]
   b528a:	f001 fcd1 	bl	b6c30 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b528e:	f002 feb5 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5292:	6803      	ldr	r3, [r0, #0]
   b5294:	4621      	mov	r1, r4
   b5296:	689b      	ldr	r3, [r3, #8]
   b5298:	4798      	blx	r3
    Wire.endTransmission();
   b529a:	f002 feaf 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b529e:	f001 fcd2 	bl	b6c46 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   b52a2:	f002 feab 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b52a6:	7829      	ldrb	r1, [r5, #0]
   b52a8:	2202      	movs	r2, #2
   b52aa:	f001 fcbe 	bl	b6c2a <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
   b52ae:	f002 fea5 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b52b2:	6803      	ldr	r3, [r0, #0]
   b52b4:	695b      	ldr	r3, [r3, #20]
   b52b6:	4798      	blx	r3
   b52b8:	4604      	mov	r4, r0
   b52ba:	f002 fe9f 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b52be:	6803      	ldr	r3, [r0, #0]
   b52c0:	695b      	ldr	r3, [r3, #20]
   b52c2:	4798      	blx	r3
   b52c4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   b52c8:	b284      	uxth	r4, r0
    Wire.endTransmission();
   b52ca:	f002 fe97 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b52ce:	f001 fcba 	bl	b6c46 <_ZN7TwoWire15endTransmissionEv>
    value = (spixfer(0) << 8) | spixfer(0);
    digitalWrite(_cs, HIGH);
  }

  return value;
}
   b52d2:	4620      	mov	r0, r4
   b52d4:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, LOW);
   b52d6:	2100      	movs	r1, #0
   b52d8:	b280      	uxth	r0, r0
   b52da:	f002 fe0e 	bl	b7efa <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b52de:	f044 0180 	orr.w	r1, r4, #128	; 0x80
   b52e2:	4628      	mov	r0, r5
   b52e4:	f7ff ff18 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   b52e8:	2100      	movs	r1, #0
   b52ea:	4628      	mov	r0, r5
   b52ec:	f7ff ff14 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
   b52f0:	2100      	movs	r1, #0
   b52f2:	4604      	mov	r4, r0
   b52f4:	4628      	mov	r0, r5
   b52f6:	f7ff ff0f 	bl	b5118 <_ZN15Adafruit_BMP2807spixferEh>
   b52fa:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    digitalWrite(_cs, HIGH);
   b52fe:	f995 000c 	ldrsb.w	r0, [r5, #12]
   b5302:	2101      	movs	r1, #1
   b5304:	b280      	uxth	r0, r0
    value = (spixfer(0) << 8) | spixfer(0);
   b5306:	b2a4      	uxth	r4, r4
    digitalWrite(_cs, HIGH);
   b5308:	f002 fdf7 	bl	b7efa <digitalWrite>
   b530c:	e7e1      	b.n	b52d2 <_ZN15Adafruit_BMP2806read16Eh+0x5c>

000b530e <_ZN15Adafruit_BMP2809read16_LEEh>:

uint16_t Adafruit_BMP280::read16_LE(byte reg) {
   b530e:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
   b5310:	f7ff ffb1 	bl	b5276 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
   b5314:	ba40      	rev16	r0, r0
}
   b5316:	b280      	uxth	r0, r0
   b5318:	bd08      	pop	{r3, pc}

000b531a <_ZN15Adafruit_BMP28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BMP280::readCoefficients(void)
{
   b531a:	b510      	push	{r4, lr}
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b531c:	2188      	movs	r1, #136	; 0x88
{
   b531e:	4604      	mov	r4, r0
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b5320:	f7ff fff5 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   b5324:	218a      	movs	r1, #138	; 0x8a
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b5326:	8220      	strh	r0, [r4, #16]
  return (int16_t)read16_LE(reg);
   b5328:	4620      	mov	r0, r4
   b532a:	f7ff fff0 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b532e:	218c      	movs	r1, #140	; 0x8c
    _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
   b5330:	8260      	strh	r0, [r4, #18]
  return (int16_t)read16_LE(reg);
   b5332:	4620      	mov	r0, r4
   b5334:	f7ff ffeb 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
    _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);

    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b5338:	218e      	movs	r1, #142	; 0x8e
    _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
   b533a:	82a0      	strh	r0, [r4, #20]
    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b533c:	4620      	mov	r0, r4
   b533e:	f7ff ffe6 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   b5342:	2190      	movs	r1, #144	; 0x90
    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b5344:	82e0      	strh	r0, [r4, #22]
  return (int16_t)read16_LE(reg);
   b5346:	4620      	mov	r0, r4
   b5348:	f7ff ffe1 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b534c:	2192      	movs	r1, #146	; 0x92
    _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
   b534e:	8320      	strh	r0, [r4, #24]
  return (int16_t)read16_LE(reg);
   b5350:	4620      	mov	r0, r4
   b5352:	f7ff ffdc 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b5356:	2194      	movs	r1, #148	; 0x94
    _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
   b5358:	8360      	strh	r0, [r4, #26]
  return (int16_t)read16_LE(reg);
   b535a:	4620      	mov	r0, r4
   b535c:	f7ff ffd7 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b5360:	2196      	movs	r1, #150	; 0x96
    _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
   b5362:	83a0      	strh	r0, [r4, #28]
  return (int16_t)read16_LE(reg);
   b5364:	4620      	mov	r0, r4
   b5366:	f7ff ffd2 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b536a:	2198      	movs	r1, #152	; 0x98
    _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
   b536c:	83e0      	strh	r0, [r4, #30]
  return (int16_t)read16_LE(reg);
   b536e:	4620      	mov	r0, r4
   b5370:	f7ff ffcd 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b5374:	219a      	movs	r1, #154	; 0x9a
    _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
   b5376:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
   b5378:	4620      	mov	r0, r4
   b537a:	f7ff ffc8 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b537e:	219c      	movs	r1, #156	; 0x9c
    _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
   b5380:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
   b5382:	4620      	mov	r0, r4
   b5384:	f7ff ffc3 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
   b5388:	219e      	movs	r1, #158	; 0x9e
    _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
   b538a:	84a0      	strh	r0, [r4, #36]	; 0x24
  return (int16_t)read16_LE(reg);
   b538c:	4620      	mov	r0, r4
   b538e:	f7ff ffbe 	bl	b530e <_ZN15Adafruit_BMP2809read16_LEEh>
    _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
   b5392:	84e0      	strh	r0, [r4, #38]	; 0x26
}
   b5394:	bd10      	pop	{r4, pc}
	...

000b5398 <_ZN15Adafruit_BMP28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float Adafruit_BMP280::readTemperature(void)
{
   b5398:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BMP280_REGISTER_TEMPDATA);
   b539a:	21fa      	movs	r1, #250	; 0xfa
{
   b539c:	4604      	mov	r4, r0
  int32_t adc_T = read16(BMP280_REGISTER_TEMPDATA);
   b539e:	f7ff ff6a 	bl	b5276 <_ZN15Adafruit_BMP2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b53a2:	21fc      	movs	r1, #252	; 0xfc
  adc_T <<= 8;
   b53a4:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b53a6:	4620      	mov	r0, r4
   b53a8:	f7ff ff28 	bl	b51fc <_ZN15Adafruit_BMP2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1 <<1))) *
   b53ac:	8a23      	ldrh	r3, [r4, #16]
	   ((int32_t)_bmp280_calib.dig_T2)) >> 11;
   b53ae:	f9b4 1012 	ldrsh.w	r1, [r4, #18]

  t_fine = var1 + var2;

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;
}
   b53b2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; b53f0 <_ZN15Adafruit_BMP28015readTemperatureEv+0x58>
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b53b6:	4328      	orrs	r0, r5
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b53b8:	ebc3 2220 	rsb	r2, r3, r0, asr #8
  var1  = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1 <<1))) *
   b53bc:	005b      	lsls	r3, r3, #1
   b53be:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
   b53c2:	4359      	muls	r1, r3
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b53c4:	fb02 f302 	mul.w	r3, r2, r2
	   ((int32_t)_bmp280_calib.dig_T3)) >> 14;
   b53c8:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
	     ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) *
   b53cc:	131b      	asrs	r3, r3, #12
   b53ce:	4353      	muls	r3, r2
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b53d0:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
   b53d2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b53d6:	60a3      	str	r3, [r4, #8]
  float T  = (t_fine * 5 + 128) >> 8;
   b53d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b53dc:	3380      	adds	r3, #128	; 0x80
   b53de:	121b      	asrs	r3, r3, #8
   b53e0:	ee07 3a90 	vmov	s15, r3
   b53e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
   b53e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b53ec:	bd38      	pop	{r3, r4, r5, pc}
   b53ee:	bf00      	nop
   b53f0:	42c80000 	.word	0x42c80000

000b53f4 <_ZN15Adafruit_BMP2805beginEh>:
bool Adafruit_BMP280::begin(uint8_t a) {
   b53f4:	b510      	push	{r4, lr}
   b53f6:	4604      	mov	r4, r0
  _i2caddr = a;
   b53f8:	7001      	strb	r1, [r0, #0]
  if (_cs == -1) {
   b53fa:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b53fe:	1c43      	adds	r3, r0, #1
   b5400:	d118      	bne.n	b5434 <_ZN15Adafruit_BMP2805beginEh+0x40>
    Serial.println("Begin I2C");
   b5402:	f002 fbdf 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b5406:	4924      	ldr	r1, [pc, #144]	; (b5498 <_ZN15Adafruit_BMP2805beginEh+0xa4>)
   b5408:	f001 fe07 	bl	b701a <_ZN5Print7printlnEPKc>
    Wire.begin();
   b540c:	f002 fdf6 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5410:	f001 fbdc 	bl	b6bcc <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != 0x58)
   b5414:	21d0      	movs	r1, #208	; 0xd0
   b5416:	4620      	mov	r0, r4
   b5418:	f7ff fef0 	bl	b51fc <_ZN15Adafruit_BMP2805read8Eh>
   b541c:	2858      	cmp	r0, #88	; 0x58
   b541e:	d139      	bne.n	b5494 <_ZN15Adafruit_BMP2805beginEh+0xa0>
  readCoefficients();
   b5420:	4620      	mov	r0, r4
   b5422:	f7ff ff7a 	bl	b531a <_ZN15Adafruit_BMP28016readCoefficientsEv>
  write8(BMP280_REGISTER_CONTROL, 0x3F);
   b5426:	4620      	mov	r0, r4
   b5428:	223f      	movs	r2, #63	; 0x3f
   b542a:	21f4      	movs	r1, #244	; 0xf4
   b542c:	f7ff feb2 	bl	b5194 <_ZN15Adafruit_BMP2806write8Ehh>
  return true;
   b5430:	2001      	movs	r0, #1
}
   b5432:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5434:	2101      	movs	r1, #1
   b5436:	b280      	uxth	r0, r0
   b5438:	f002 fd5f 	bl	b7efa <digitalWrite>
    pinMode(_cs, OUTPUT);
   b543c:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b5440:	2101      	movs	r1, #1
   b5442:	b280      	uxth	r0, r0
   b5444:	f002 fd48 	bl	b7ed8 <pinMode>
    if (_sck == -1) {
   b5448:	f994 300f 	ldrsb.w	r3, [r4, #15]
   b544c:	3301      	adds	r3, #1
   b544e:	d109      	bne.n	b5464 <_ZN15Adafruit_BMP2805beginEh+0x70>
      Serial.println("Begin hardware SPI");
   b5450:	f002 fbb8 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b5454:	4911      	ldr	r1, [pc, #68]	; (b549c <_ZN15Adafruit_BMP2805beginEh+0xa8>)
   b5456:	f001 fde0 	bl	b701a <_ZN5Print7printlnEPKc>
        instance().begin();
   b545a:	f7ff fe41 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b545e:	f001 fe4b 	bl	b70f8 <_ZN8SPIClass5beginEv>
    }
   b5462:	e7d7      	b.n	b5414 <_ZN15Adafruit_BMP2805beginEh+0x20>
      Serial.println("Begin software SPI");
   b5464:	f002 fbae 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b5468:	490d      	ldr	r1, [pc, #52]	; (b54a0 <_ZN15Adafruit_BMP2805beginEh+0xac>)
   b546a:	f001 fdd6 	bl	b701a <_ZN5Print7printlnEPKc>
      pinMode(_sck, OUTPUT);
   b546e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b5472:	2101      	movs	r1, #1
   b5474:	b280      	uxth	r0, r0
   b5476:	f002 fd2f 	bl	b7ed8 <pinMode>
      pinMode(_mosi, OUTPUT);
   b547a:	f994 000d 	ldrsb.w	r0, [r4, #13]
   b547e:	2101      	movs	r1, #1
   b5480:	b280      	uxth	r0, r0
   b5482:	f002 fd29 	bl	b7ed8 <pinMode>
      pinMode(_miso, INPUT);
   b5486:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b548a:	2100      	movs	r1, #0
   b548c:	b280      	uxth	r0, r0
   b548e:	f002 fd23 	bl	b7ed8 <pinMode>
   b5492:	e7bf      	b.n	b5414 <_ZN15Adafruit_BMP2805beginEh+0x20>
    return false;
   b5494:	2000      	movs	r0, #0
   b5496:	e7cc      	b.n	b5432 <_ZN15Adafruit_BMP2805beginEh+0x3e>
   b5498:	000b935c 	.word	0x000b935c
   b549c:	000b9366 	.word	0x000b9366
   b54a0:	000b9379 	.word	0x000b9379

000b54a4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b54a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54a8:	b085      	sub	sp, #20
   b54aa:	461f      	mov	r7, r3
   b54ac:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b54b0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b54b4:	eba8 0902 	sub.w	r9, r8, r2
   b54b8:	eba7 0a01 	sub.w	sl, r7, r1
   b54bc:	f1b9 0f00 	cmp.w	r9, #0
   b54c0:	bfb8      	it	lt
   b54c2:	f1c9 0900 	rsblt	r9, r9, #0
   b54c6:	f1ba 0f00 	cmp.w	sl, #0
   b54ca:	bfb8      	it	lt
   b54cc:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b54d0:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b54d2:	4683      	mov	fp, r0
   b54d4:	460c      	mov	r4, r1
   b54d6:	4615      	mov	r5, r2
  if (steep) {
   b54d8:	dd04      	ble.n	b54e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b54da:	463a      	mov	r2, r7
    swap(x0, y0);
   b54dc:	462c      	mov	r4, r5
    swap(x1, y1);
   b54de:	4647      	mov	r7, r8
    swap(x0, y0);
   b54e0:	460d      	mov	r5, r1
    swap(x1, y1);
   b54e2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b54e4:	42bc      	cmp	r4, r7
   b54e6:	dd05      	ble.n	b54f4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b54e8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b54ea:	4645      	mov	r5, r8
   b54ec:	4690      	mov	r8, r2
  if (x0 > x1) {
   b54ee:	4622      	mov	r2, r4
   b54f0:	463c      	mov	r4, r7
   b54f2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b54f4:	1b3e      	subs	r6, r7, r4
   b54f6:	b2b2      	uxth	r2, r6
   b54f8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b54fa:	eba8 0205 	sub.w	r2, r8, r5
   b54fe:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5502:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5506:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b550a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b550e:	4545      	cmp	r5, r8
   b5510:	bfb4      	ite	lt
   b5512:	2201      	movlt	r2, #1
   b5514:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b5518:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b551a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b551c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b551e:	42bc      	cmp	r4, r7
   b5520:	dc1c      	bgt.n	b555c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b5522:	f8db 2000 	ldr.w	r2, [fp]
   b5526:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5528:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b552a:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b552e:	bfc7      	ittee	gt
   b5530:	4629      	movgt	r1, r5
   b5532:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5534:	462a      	movle	r2, r5
   b5536:	4621      	movle	r1, r4
   b5538:	4658      	mov	r0, fp
   b553a:	47c0      	blx	r8
    }
    err -= dy;
   b553c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b553e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5540:	1ab6      	subs	r6, r6, r2
   b5542:	b2b1      	uxth	r1, r6
   b5544:	b236      	sxth	r6, r6
    if (err < 0) {
   b5546:	2e00      	cmp	r6, #0
   b5548:	da05      	bge.n	b5556 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b554a:	9a02      	ldr	r2, [sp, #8]
   b554c:	4415      	add	r5, r2
      err += dx;
   b554e:	9a00      	ldr	r2, [sp, #0]
   b5550:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b5552:	b22d      	sxth	r5, r5
      err += dx;
   b5554:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5556:	3401      	adds	r4, #1
   b5558:	b224      	sxth	r4, r4
   b555a:	e7e0      	b.n	b551e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b555c:	b005      	add	sp, #20
   b555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5562 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5562:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5566:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b556a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b556c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5570:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5574:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5576:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5578:	4616      	mov	r6, r2
   b557a:	468a      	mov	sl, r1
   b557c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b557e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5580:	6823      	ldr	r3, [r4, #0]
   b5582:	f8cd 8000 	str.w	r8, [sp]
   b5586:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b558a:	4432      	add	r2, r6
   b558c:	69df      	ldr	r7, [r3, #28]
   b558e:	4651      	mov	r1, sl
   b5590:	462b      	mov	r3, r5
   b5592:	4620      	mov	r0, r4
   b5594:	b212      	sxth	r2, r2
   b5596:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5598:	6823      	ldr	r3, [r4, #0]
   b559a:	f8cd 8000 	str.w	r8, [sp]
   b559e:	699f      	ldr	r7, [r3, #24]
   b55a0:	4632      	mov	r2, r6
   b55a2:	464b      	mov	r3, r9
   b55a4:	4651      	mov	r1, sl
   b55a6:	4620      	mov	r0, r4
   b55a8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b55aa:	1e6b      	subs	r3, r5, #1
   b55ac:	eb03 010a 	add.w	r1, r3, sl
   b55b0:	6823      	ldr	r3, [r4, #0]
   b55b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b55b6:	699d      	ldr	r5, [r3, #24]
   b55b8:	4632      	mov	r2, r6
   b55ba:	464b      	mov	r3, r9
   b55bc:	b209      	sxth	r1, r1
   b55be:	4620      	mov	r0, r4
   b55c0:	46ac      	mov	ip, r5
}
   b55c2:	b002      	add	sp, #8
   b55c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b55c8:	4760      	bx	ip

000b55ca <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b55ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b55cc:	3b01      	subs	r3, #1
   b55ce:	4413      	add	r3, r2
   b55d0:	6804      	ldr	r4, [r0, #0]
   b55d2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b55d6:	9501      	str	r5, [sp, #4]
   b55d8:	b21b      	sxth	r3, r3
   b55da:	9300      	str	r3, [sp, #0]
   b55dc:	6964      	ldr	r4, [r4, #20]
   b55de:	460b      	mov	r3, r1
   b55e0:	47a0      	blx	r4
}
   b55e2:	b003      	add	sp, #12
   b55e4:	bd30      	pop	{r4, r5, pc}

000b55e6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b55e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b55e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b55ec:	6804      	ldr	r4, [r0, #0]
   b55ee:	e9cd 2500 	strd	r2, r5, [sp]
   b55f2:	3b01      	subs	r3, #1
   b55f4:	440b      	add	r3, r1
   b55f6:	6964      	ldr	r4, [r4, #20]
   b55f8:	b21b      	sxth	r3, r3
   b55fa:	47a0      	blx	r4
}
   b55fc:	b003      	add	sp, #12
   b55fe:	bd30      	pop	{r4, r5, pc}

000b5600 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5604:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5608:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b560c:	4605      	mov	r5, r0
   b560e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5610:	460c      	mov	r4, r1
   b5612:	18ce      	adds	r6, r1, r3
   b5614:	42b4      	cmp	r4, r6
   b5616:	da0b      	bge.n	b5630 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5618:	682b      	ldr	r3, [r5, #0]
   b561a:	f8cd 8000 	str.w	r8, [sp]
   b561e:	699f      	ldr	r7, [r3, #24]
   b5620:	4621      	mov	r1, r4
   b5622:	464b      	mov	r3, r9
   b5624:	4652      	mov	r2, sl
   b5626:	4628      	mov	r0, r5
   b5628:	3401      	adds	r4, #1
   b562a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b562c:	b224      	sxth	r4, r4
   b562e:	e7f1      	b.n	b5614 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5630:	b002      	add	sp, #8
   b5632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5636 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5636:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5638:	6802      	ldr	r2, [r0, #0]
   b563a:	9101      	str	r1, [sp, #4]
   b563c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5640:	9100      	str	r1, [sp, #0]
   b5642:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5644:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5648:	2200      	movs	r2, #0
   b564a:	4611      	mov	r1, r2
   b564c:	47a0      	blx	r4
}
   b564e:	b002      	add	sp, #8
   b5650:	bd10      	pop	{r4, pc}

000b5652 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5652:	4770      	bx	lr

000b5654 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5654:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5656:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5658:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b565a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b565e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5660:	4d05      	ldr	r5, [pc, #20]	; (b5678 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5662:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5664:	2201      	movs	r2, #1
   b5666:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5668:	6005      	str	r5, [r0, #0]
   b566a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b566c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b566e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5670:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5672:	7682      	strb	r2, [r0, #26]
}
   b5674:	bd30      	pop	{r4, r5, pc}
   b5676:	bf00      	nop
   b5678:	000b9890 	.word	0x000b9890

000b567c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5680:	b089      	sub	sp, #36	; 0x24
   b5682:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5686:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b568a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b568e:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5690:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b5692:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5696:	bf48      	it	mi
   b5698:	f107 020e 	addmi.w	r2, r7, #14
   b569c:	2400      	movs	r4, #0
			      uint16_t color) {
   b569e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b56a2:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b56a6:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b56a8:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b56ac:	9905      	ldr	r1, [sp, #20]
   b56ae:	b22a      	sxth	r2, r5
   b56b0:	4291      	cmp	r1, r2
   b56b2:	dd2a      	ble.n	b570a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b56b4:	9a04      	ldr	r2, [sp, #16]
   b56b6:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b56ba:	9a03      	ldr	r2, [sp, #12]
   b56bc:	442a      	add	r2, r5
   b56be:	f04f 0800 	mov.w	r8, #0
   b56c2:	b212      	sxth	r2, r2
   b56c4:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b56c8:	4287      	cmp	r7, r0
   b56ca:	fa1f f188 	uxth.w	r1, r8
   b56ce:	dd19      	ble.n	b5704 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b56d0:	10c0      	asrs	r0, r0, #3
   b56d2:	f81a c000 	ldrb.w	ip, [sl, r0]
   b56d6:	f001 0007 	and.w	r0, r1, #7
   b56da:	fa49 f000 	asr.w	r0, r9, r0
   b56de:	ea1c 0f00 	tst.w	ip, r0
   b56e2:	d00c      	beq.n	b56fe <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b56e4:	9802      	ldr	r0, [sp, #8]
   b56e6:	4401      	add	r1, r0
   b56e8:	9801      	ldr	r0, [sp, #4]
   b56ea:	6800      	ldr	r0, [r0, #0]
   b56ec:	6900      	ldr	r0, [r0, #16]
   b56ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b56f2:	4606      	mov	r6, r0
   b56f4:	b209      	sxth	r1, r1
   b56f6:	9801      	ldr	r0, [sp, #4]
   b56f8:	47b0      	blx	r6
   b56fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b56fe:	f108 0801 	add.w	r8, r8, #1
   b5702:	e7df      	b.n	b56c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b5704:	3501      	adds	r5, #1
   b5706:	445c      	add	r4, fp
   b5708:	e7d0      	b.n	b56ac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b570a:	b009      	add	sp, #36	; 0x24
   b570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5710 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5714:	ed2d 8b02 	vpush	{d8}
   b5718:	b08d      	sub	sp, #52	; 0x34
   b571a:	4607      	mov	r7, r0
   b571c:	9104      	str	r1, [sp, #16]
   b571e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5722:	9105      	str	r1, [sp, #20]
   b5724:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5728:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b572a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b572e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5730:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5734:	4281      	cmp	r1, r0
   b5736:	dd52      	ble.n	b57de <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5738:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b573c:	4291      	cmp	r1, r2
   b573e:	dd4e      	ble.n	b57de <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5740:	2106      	movs	r1, #6
   b5742:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5746:	2c00      	cmp	r4, #0
   b5748:	dd49      	ble.n	b57de <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b574a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b574e:	2c00      	cmp	r4, #0
   b5750:	dd45      	ble.n	b57de <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5752:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5756:	930b      	str	r3, [sp, #44]	; 0x2c
   b5758:	b293      	uxth	r3, r2
   b575a:	9307      	str	r3, [sp, #28]
   b575c:	3308      	adds	r3, #8
   b575e:	b29b      	uxth	r3, r3
   b5760:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5762:	2400      	movs	r4, #0
   b5764:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5766:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5768:	bf1c      	itt	ne
   b576a:	4b2c      	ldrne	r3, [pc, #176]	; (b581c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b576c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b576e:	9e07      	ldr	r6, [sp, #28]
   b5770:	bf16      	itet	ne
   b5772:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5774:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5776:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5778:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b577a:	9a04      	ldr	r2, [sp, #16]
   b577c:	b2ab      	uxth	r3, r5
   b577e:	930a      	str	r3, [sp, #40]	; 0x28
   b5780:	fb04 f305 	mul.w	r3, r4, r5
   b5784:	fa13 f382 	uxtah	r3, r3, r2
   b5788:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b578a:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b578e:	ee08 3a10 	vmov	s16, r3
   b5792:	46b0      	mov	r8, r6
   b5794:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5798:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b579c:	9b03      	ldr	r3, [sp, #12]
   b579e:	07db      	lsls	r3, r3, #31
   b57a0:	d52f      	bpl.n	b5802 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b57a2:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b57a4:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b57a6:	d11f      	bne.n	b57e8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b57a8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b57ac:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b57ae:	b232      	sxth	r2, r6
   b57b0:	4651      	mov	r1, sl
   b57b2:	4638      	mov	r0, r7
   b57b4:	47d8      	blx	fp
      line >>= 1;
   b57b6:	9b03      	ldr	r3, [sp, #12]
   b57b8:	085b      	lsrs	r3, r3, #1
   b57ba:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b57bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b57be:	3601      	adds	r6, #1
   b57c0:	4498      	add	r8, r3
   b57c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b57c4:	b2b6      	uxth	r6, r6
   b57c6:	42b3      	cmp	r3, r6
   b57c8:	fa1f f888 	uxth.w	r8, r8
   b57cc:	d1e6      	bne.n	b579c <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b57ce:	9b08      	ldr	r3, [sp, #32]
   b57d0:	3b01      	subs	r3, #1
   b57d2:	3401      	adds	r4, #1
   b57d4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b57d8:	b264      	sxtb	r4, r4
   b57da:	9308      	str	r3, [sp, #32]
   b57dc:	d1c3      	bne.n	b5766 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b57de:	b00d      	add	sp, #52	; 0x34
   b57e0:	ecbd 8b02 	vpop	{d8}
   b57e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b57e8:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b57ea:	e9cd 9200 	strd	r9, r2, [sp]
   b57ee:	ee18 1a10 	vmov	r1, s16
   b57f2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b57f6:	fa0f f288 	sxth.w	r2, r8
   b57fa:	464b      	mov	r3, r9
   b57fc:	4638      	mov	r0, r7
   b57fe:	47d8      	blx	fp
   b5800:	e7d9      	b.n	b57b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5802:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5806:	4293      	cmp	r3, r2
   b5808:	d0d5      	beq.n	b57b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b580a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b580c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b580e:	d103      	bne.n	b5818 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5810:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5814:	9b06      	ldr	r3, [sp, #24]
   b5816:	e7ca      	b.n	b57ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5818:	9a06      	ldr	r2, [sp, #24]
   b581a:	e7e6      	b.n	b57ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b581c:	000b938c 	.word	0x000b938c

000b5820 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5820:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5822:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5824:	b085      	sub	sp, #20
   b5826:	4604      	mov	r4, r0
  if (c == '\n') {
   b5828:	d107      	bne.n	b583a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b582a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b582c:	8a63      	ldrh	r3, [r4, #18]
   b582e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5832:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5834:	2300      	movs	r3, #0
   b5836:	8223      	strh	r3, [r4, #16]
   b5838:	e021      	b.n	b587e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b583a:	290d      	cmp	r1, #13
   b583c:	d01f      	beq.n	b587e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b583e:	7e03      	ldrb	r3, [r0, #24]
   b5840:	9302      	str	r3, [sp, #8]
   b5842:	8ac3      	ldrh	r3, [r0, #22]
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	8a83      	ldrh	r3, [r0, #20]
   b5848:	9300      	str	r3, [sp, #0]
   b584a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b584e:	460b      	mov	r3, r1
   b5850:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5854:	f7ff ff5c 	bl	b5710 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5858:	7e20      	ldrb	r0, [r4, #24]
   b585a:	8a23      	ldrh	r3, [r4, #16]
   b585c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5860:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5864:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5866:	b21b      	sxth	r3, r3
   b5868:	4602      	mov	r2, r0
   b586a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b586c:	b139      	cbz	r1, b587e <_ZN12Adafruit_GFX5writeEh+0x5e>
   b586e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5872:	f06f 0505 	mvn.w	r5, #5
   b5876:	fb05 1100 	mla	r1, r5, r0, r1
   b587a:	428b      	cmp	r3, r1
   b587c:	dcd6      	bgt.n	b582c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b587e:	2001      	movs	r0, #1
   b5880:	b005      	add	sp, #20
   b5882:	bd30      	pop	{r4, r5, pc}

000b5884 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5884:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5886:	8242      	strh	r2, [r0, #18]
}
   b5888:	4770      	bx	lr

000b588a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b588a:	2901      	cmp	r1, #1
   b588c:	bf38      	it	cc
   b588e:	2101      	movcc	r1, #1
   b5890:	7601      	strb	r1, [r0, #24]
}
   b5892:	4770      	bx	lr

000b5894 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5894:	82c1      	strh	r1, [r0, #22]
   b5896:	8281      	strh	r1, [r0, #20]
}
   b5898:	4770      	bx	lr

000b589a <_ZN12Adafruit_GFX11getRotationEv>:
}
   b589a:	7e40      	ldrb	r0, [r0, #25]
   b589c:	4770      	bx	lr

000b589e <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b589e:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b58a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b58a6:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b58a8:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b58aa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b58ae:	bf59      	ittee	pl
   b58b0:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b58b2:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b58b4:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b58b6:	81c3      	strhmi	r3, [r0, #14]
}
   b58b8:	4770      	bx	lr

000b58ba <_ZN12Adafruit_GFX5widthEv>:
}
   b58ba:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b58be:	4770      	bx	lr

000b58c0 <_ZN12Adafruit_GFX6heightEv>:
}
   b58c0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b58c4:	4770      	bx	lr
	...

000b58c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b58c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b58ca:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b58cc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b58d0:	2d02      	cmp	r5, #2
   b58d2:	d069      	beq.n	b59a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b58d4:	2d03      	cmp	r5, #3
   b58d6:	f000 8099 	beq.w	b5a0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b58da:	2d01      	cmp	r5, #1
   b58dc:	d16c      	bne.n	b59b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b58de:	8905      	ldrh	r5, [r0, #8]
   b58e0:	43d2      	mvns	r2, r2
   b58e2:	442a      	add	r2, r5
   b58e4:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b58e6:	2a00      	cmp	r2, #0
   b58e8:	db5d      	blt.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b58ea:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b58ee:	4295      	cmp	r5, r2
   b58f0:	dd59      	ble.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b58f2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b58f4:	bfbe      	ittt	lt
   b58f6:	185b      	addlt	r3, r3, r1
   b58f8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b58fa:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b58fc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5900:	18cd      	adds	r5, r1, r3
   b5902:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5904:	bfc4      	itt	gt
   b5906:	1a43      	subgt	r3, r0, r1
   b5908:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b590a:	2b00      	cmp	r3, #0
   b590c:	dd4b      	ble.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b590e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5912:	f8df c120 	ldr.w	ip, [pc, #288]	; b5a34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5916:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b591a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b591e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5920:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5924:	d01a      	beq.n	b595c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5926:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b592a:	4e40      	ldr	r6, [pc, #256]	; (b5a2c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b592c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b592e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5930:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5932:	bf3f      	itttt	cc
   b5934:	eba5 0e03 	subcc.w	lr, r5, r3
   b5938:	26ff      	movcc	r6, #255	; 0xff
   b593a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b593e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5940:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5944:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5946:	bf0c      	ite	eq
   b5948:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b594a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b594c:	42ab      	cmp	r3, r5
   b594e:	f80c 6002 	strb.w	r6, [ip, r2]
   b5952:	d328      	bcc.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5954:	3908      	subs	r1, #8
   b5956:	440b      	add	r3, r1
   b5958:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b595a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b595c:	2b07      	cmp	r3, #7
   b595e:	d919      	bls.n	b5994 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5960:	2c01      	cmp	r4, #1
   b5962:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5966:	bf18      	it	ne
   b5968:	2500      	movne	r5, #0
   b596a:	b2ed      	uxtb	r5, r5
   b596c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5970:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5972:	3a08      	subs	r2, #8
   b5974:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5976:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5978:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b597c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5980:	d8f7      	bhi.n	b5972 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5982:	f1a3 0208 	sub.w	r2, r3, #8
   b5986:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b598a:	3201      	adds	r2, #1
   b598c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5990:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5994:	b13b      	cbz	r3, b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b5996:	4a26      	ldr	r2, [pc, #152]	; (b5a30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5998:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b599a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b599c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b599e:	bf0c      	ite	eq
   b59a0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b59a2:	4393      	bicne	r3, r2
   b59a4:	7003      	strb	r3, [r0, #0]
}
   b59a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b59a8:	8945      	ldrh	r5, [r0, #10]
   b59aa:	43d2      	mvns	r2, r2
   b59ac:	442a      	add	r2, r5
      x -= (w-1);
   b59ae:	18cd      	adds	r5, r1, r3
   b59b0:	8901      	ldrh	r1, [r0, #8]
   b59b2:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b59b4:	b212      	sxth	r2, r2
      x -= (w-1);
   b59b6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b59b8:	2a00      	cmp	r2, #0
   b59ba:	dbf4      	blt.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b59bc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b59c0:	4295      	cmp	r5, r2
   b59c2:	ddf0      	ble.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b59c4:	2900      	cmp	r1, #0
    w += x;
   b59c6:	bfbe      	ittt	lt
   b59c8:	185b      	addlt	r3, r3, r1
   b59ca:	b21b      	sxthlt	r3, r3
    x = 0;
   b59cc:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b59ce:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b59d2:	18ce      	adds	r6, r1, r3
   b59d4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b59d6:	bfc4      	itt	gt
   b59d8:	1a6b      	subgt	r3, r5, r1
   b59da:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b59dc:	2b00      	cmp	r3, #0
   b59de:	dde2      	ble.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b59e0:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b59e2:	2580      	movs	r5, #128	; 0x80
   b59e4:	fb10 1105 	smlabb	r1, r0, r5, r1
   b59e8:	4812      	ldr	r0, [pc, #72]	; (b5a34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b59ea:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b59ec:	f002 0007 	and.w	r0, r2, #7
   b59f0:	2201      	movs	r2, #1
   b59f2:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b59f4:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b59f6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b59f8:	440b      	add	r3, r1
   b59fa:	d10c      	bne.n	b5a16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b59fc:	428b      	cmp	r3, r1
   b59fe:	d0d2      	beq.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a00:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a04:	4310      	orrs	r0, r2
   b5a06:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5a0a:	e7f7      	b.n	b59fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5a0c:	18cd      	adds	r5, r1, r3
   b5a0e:	8941      	ldrh	r1, [r0, #10]
   b5a10:	1b49      	subs	r1, r1, r5
   b5a12:	b209      	sxth	r1, r1
      break;
   b5a14:	e767      	b.n	b58e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5a16:	43d2      	mvns	r2, r2
   b5a18:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5a1a:	428b      	cmp	r3, r1
   b5a1c:	d0c3      	beq.n	b59a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a1e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a22:	4010      	ands	r0, r2
   b5a24:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5a28:	e7f7      	b.n	b5a1a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5a2a:	bf00      	nop
   b5a2c:	2003e05c 	.word	0x2003e05c
   b5a30:	2003e054 	.word	0x2003e054
   b5a34:	2003e064 	.word	0x2003e064

000b5a38 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5a3a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5a3c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5a40:	2d02      	cmp	r5, #2
   b5a42:	d034      	beq.n	b5aae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5a44:	2d03      	cmp	r5, #3
   b5a46:	f000 809b 	beq.w	b5b80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5a4a:	2d01      	cmp	r5, #1
   b5a4c:	d137      	bne.n	b5abe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5a4e:	18d5      	adds	r5, r2, r3
   b5a50:	8902      	ldrh	r2, [r0, #8]
   b5a52:	1b52      	subs	r2, r2, r5
   b5a54:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5a56:	2900      	cmp	r1, #0
   b5a58:	f2c0 8091 	blt.w	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5a5c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5a60:	428d      	cmp	r5, r1
   b5a62:	f340 808c 	ble.w	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5a66:	2a00      	cmp	r2, #0
    w += x;
   b5a68:	bfbe      	ittt	lt
   b5a6a:	189b      	addlt	r3, r3, r2
   b5a6c:	b21b      	sxthlt	r3, r3
    x = 0;
   b5a6e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5a70:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5a74:	18d6      	adds	r6, r2, r3
   b5a76:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5a78:	bfc4      	itt	gt
   b5a7a:	1aab      	subgt	r3, r5, r2
   b5a7c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5a7e:	2b00      	cmp	r3, #0
   b5a80:	dd7d      	ble.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5a82:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5a84:	2580      	movs	r5, #128	; 0x80
   b5a86:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5a8a:	4845      	ldr	r0, [pc, #276]	; (b5ba0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5a8c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5a8e:	f001 0007 	and.w	r0, r1, #7
   b5a92:	2101      	movs	r1, #1
   b5a94:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5a96:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5a98:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5a9a:	4413      	add	r3, r2
   b5a9c:	d175      	bne.n	b5b8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5a9e:	429a      	cmp	r2, r3
   b5aa0:	d06d      	beq.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5aa2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5aa6:	4308      	orrs	r0, r1
   b5aa8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5aac:	e7f7      	b.n	b5a9e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5aae:	8905      	ldrh	r5, [r0, #8]
   b5ab0:	43c9      	mvns	r1, r1
   b5ab2:	4429      	add	r1, r5
      y -= (h-1);
   b5ab4:	18d5      	adds	r5, r2, r3
   b5ab6:	8942      	ldrh	r2, [r0, #10]
   b5ab8:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5aba:	b209      	sxth	r1, r1
      y -= (h-1);
   b5abc:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5abe:	2900      	cmp	r1, #0
   b5ac0:	db5d      	blt.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5ac2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5ac6:	428d      	cmp	r5, r1
   b5ac8:	dd59      	ble.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5aca:	2a00      	cmp	r2, #0
    __h += __y;
   b5acc:	bfbe      	ittt	lt
   b5ace:	189b      	addlt	r3, r3, r2
   b5ad0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5ad2:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5ad4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5ad8:	18d5      	adds	r5, r2, r3
   b5ada:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5adc:	bfc4      	itt	gt
   b5ade:	1a83      	subgt	r3, r0, r2
   b5ae0:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5ae2:	2b00      	cmp	r3, #0
   b5ae4:	dd4b      	ble.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5ae6:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5aea:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5ba0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5aee:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5af2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5af6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5af8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5afc:	d01a      	beq.n	b5b34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5afe:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5b02:	4e28      	ldr	r6, [pc, #160]	; (b5ba4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5b04:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5b06:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5b08:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5b0a:	bf3f      	itttt	cc
   b5b0c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5b10:	26ff      	movcc	r6, #255	; 0xff
   b5b12:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5b16:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5b18:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5b1c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5b1e:	bf0c      	ite	eq
   b5b20:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5b22:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5b24:	42ab      	cmp	r3, r5
   b5b26:	f80c 6001 	strb.w	r6, [ip, r1]
   b5b2a:	d328      	bcc.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5b2c:	3a08      	subs	r2, #8
   b5b2e:	4413      	add	r3, r2
   b5b30:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5b32:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5b34:	2b07      	cmp	r3, #7
   b5b36:	d919      	bls.n	b5b6c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5b38:	2c01      	cmp	r4, #1
   b5b3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5b3e:	bf18      	it	ne
   b5b40:	2500      	movne	r5, #0
   b5b42:	b2ed      	uxtb	r5, r5
   b5b44:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5b48:	461a      	mov	r2, r3
      h -= 8;
   b5b4a:	3a08      	subs	r2, #8
   b5b4c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5b4e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5b50:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5b54:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5b58:	d8f7      	bhi.n	b5b4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5b5a:	f1a3 0208 	sub.w	r2, r3, #8
   b5b5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5b62:	3201      	adds	r2, #1
   b5b64:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5b68:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5b6c:	b13b      	cbz	r3, b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5b6e:	4a0e      	ldr	r2, [pc, #56]	; (b5ba8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5b70:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5b72:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5b74:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5b76:	bf0c      	ite	eq
   b5b78:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5b7a:	4393      	bicne	r3, r2
   b5b7c:	7003      	strb	r3, [r0, #0]
}
   b5b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5b80:	8945      	ldrh	r5, [r0, #10]
   b5b82:	43c9      	mvns	r1, r1
   b5b84:	4429      	add	r1, r5
   b5b86:	b209      	sxth	r1, r1
      break;
   b5b88:	e765      	b.n	b5a56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5b8a:	43c9      	mvns	r1, r1
   b5b8c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5b8e:	429a      	cmp	r2, r3
   b5b90:	d0f5      	beq.n	b5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5b92:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5b96:	4008      	ands	r0, r1
   b5b98:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5b9c:	e7f7      	b.n	b5b8e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5b9e:	bf00      	nop
   b5ba0:	2003e064 	.word	0x2003e064
   b5ba4:	2003e05c 	.word	0x2003e05c
   b5ba8:	2003e054 	.word	0x2003e054

000b5bac <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5bac:	4770      	bx	lr
	...

000b5bb0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5bb2:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5bb4:	4606      	mov	r6, r0
   b5bb6:	4614      	mov	r4, r2
   b5bb8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5bba:	db2d      	blt.n	b5c18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5bbc:	f7ff fe7d 	bl	b58ba <_ZN12Adafruit_GFX5widthEv>
   b5bc0:	42a8      	cmp	r0, r5
   b5bc2:	dd29      	ble.n	b5c18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5bc4:	2c00      	cmp	r4, #0
   b5bc6:	db27      	blt.n	b5c18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5bc8:	4630      	mov	r0, r6
   b5bca:	f7ff fe79 	bl	b58c0 <_ZN12Adafruit_GFX6heightEv>
   b5bce:	42a0      	cmp	r0, r4
   b5bd0:	dd22      	ble.n	b5c18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5bd2:	4630      	mov	r0, r6
   b5bd4:	f7ff fe61 	bl	b589a <_ZN12Adafruit_GFX11getRotationEv>
   b5bd8:	2802      	cmp	r0, #2
   b5bda:	d01e      	beq.n	b5c1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5bdc:	2803      	cmp	r0, #3
   b5bde:	d025      	beq.n	b5c2c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5be0:	2801      	cmp	r0, #1
   b5be2:	d104      	bne.n	b5bee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5be4:	8933      	ldrh	r3, [r6, #8]
   b5be6:	43e2      	mvns	r2, r4
   b5be8:	441a      	add	r2, r3
    break;
   b5bea:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5bec:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5bee:	2c00      	cmp	r4, #0
   b5bf0:	4622      	mov	r2, r4
   b5bf2:	bfb8      	it	lt
   b5bf4:	1de2      	addlt	r2, r4, #7
   b5bf6:	10d2      	asrs	r2, r2, #3
   b5bf8:	2180      	movs	r1, #128	; 0x80
   b5bfa:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5bfe:	490e      	ldr	r1, [pc, #56]	; (b5c38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5c00:	2201      	movs	r2, #1
   b5c02:	f004 0407 	and.w	r4, r4, #7
   b5c06:	574b      	ldrsb	r3, [r1, r5]
   b5c08:	fa02 f404 	lsl.w	r4, r2, r4
   b5c0c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5c0e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5c10:	bf0c      	ite	eq
   b5c12:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5c14:	43a3      	bicne	r3, r4
   b5c16:	554b      	strb	r3, [r1, r5]
}
   b5c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5c1a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5c1c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5c1e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5c20:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5c22:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5c24:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5c26:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5c28:	b224      	sxth	r4, r4
    break;
   b5c2a:	e7e0      	b.n	b5bee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5c2c:	8973      	ldrh	r3, [r6, #10]
   b5c2e:	3b01      	subs	r3, #1
   b5c30:	1b5b      	subs	r3, r3, r5
    break;
   b5c32:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5c34:	b21c      	sxth	r4, r3
    break;
   b5c36:	e7da      	b.n	b5bee <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5c38:	2003e064 	.word	0x2003e064

000b5c3c <_ZN16Adafruit_SSD1306D0Ev>:
   b5c3c:	b510      	push	{r4, lr}
   b5c3e:	2124      	movs	r1, #36	; 0x24
   b5c40:	4604      	mov	r4, r0
   b5c42:	f7fe fa2c 	bl	b409e <_ZdlPvj>
   b5c46:	4620      	mov	r0, r4
   b5c48:	bd10      	pop	{r4, pc}
	...

000b5c4c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5c4c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5c4e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5c50:	4604      	mov	r4, r0
   b5c52:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5c54:	2180      	movs	r1, #128	; 0x80
   b5c56:	f7ff fcfd 	bl	b5654 <_ZN12Adafruit_GFXC1Ess>
   b5c5a:	4b06      	ldr	r3, [pc, #24]	; (b5c74 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5c5c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5c5e:	23ff      	movs	r3, #255	; 0xff
   b5c60:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5c64:	7763      	strb	r3, [r4, #29]
   b5c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5c6a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5c6c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5c70:	4620      	mov	r0, r4
   b5c72:	bd38      	pop	{r3, r4, r5, pc}
   b5c74:	000b98c8 	.word	0x000b98c8

000b5c78 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5c78:	4802      	ldr	r0, [pc, #8]	; (b5c84 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5c7e:	2100      	movs	r1, #0
   b5c80:	f002 bf42 	b.w	b8b08 <memset>
   b5c84:	2003e064 	.word	0x2003e064

000b5c88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5c88:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5c8a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5c8e:	b143      	cbz	r3, b5ca2 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5c90:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b5c92:	f7ff fa25 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5c96:	9901      	ldr	r1, [sp, #4]
}
   b5c98:	b003      	add	sp, #12
   b5c9a:	f85d eb04 	ldr.w	lr, [sp], #4
   b5c9e:	f001 bad5 	b.w	b724c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5ca2:	460b      	mov	r3, r1
   b5ca4:	7f81      	ldrb	r1, [r0, #30]
   b5ca6:	7f40      	ldrb	r0, [r0, #29]
   b5ca8:	2201      	movs	r2, #1
}
   b5caa:	b003      	add	sp, #12
   b5cac:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5cb0:	f002 b966 	b.w	b7f80 <shiftOut>

000b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5cb4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5cb6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5cba:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5cbc:	4604      	mov	r4, r0
   b5cbe:	460d      	mov	r5, r1
  if (sid != -1)
   b5cc0:	d01d      	beq.n	b5cfe <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5cc2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5cc6:	2101      	movs	r1, #1
   b5cc8:	b280      	uxth	r0, r0
   b5cca:	f002 f916 	bl	b7efa <digitalWrite>
    digitalWrite(dc, LOW);
   b5cce:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5cd2:	2100      	movs	r1, #0
   b5cd4:	b280      	uxth	r0, r0
   b5cd6:	f002 f910 	bl	b7efa <digitalWrite>
    digitalWrite(cs, LOW);
   b5cda:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5cde:	2100      	movs	r1, #0
   b5ce0:	b280      	uxth	r0, r0
   b5ce2:	f002 f90a 	bl	b7efa <digitalWrite>
    fastSPIwrite(c);
   b5ce6:	4629      	mov	r1, r5
   b5ce8:	4620      	mov	r0, r4
   b5cea:	f7ff ffcd 	bl	b5c88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5cee:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5cf2:	2101      	movs	r1, #1
}
   b5cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5cf8:	b280      	uxth	r0, r0
   b5cfa:	f002 b8fe 	b.w	b7efa <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5cfe:	f002 f97d 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5d02:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5d06:	f000 ff97 	bl	b6c38 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5d0a:	f002 f977 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5d0e:	6803      	ldr	r3, [r0, #0]
   b5d10:	2100      	movs	r1, #0
   b5d12:	689b      	ldr	r3, [r3, #8]
   b5d14:	4798      	blx	r3
    Wire.write(c);
   b5d16:	f002 f971 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5d1a:	6803      	ldr	r3, [r0, #0]
   b5d1c:	4629      	mov	r1, r5
   b5d1e:	689b      	ldr	r3, [r3, #8]
   b5d20:	4798      	blx	r3
    Wire.endTransmission();
   b5d22:	f002 f96b 	bl	b7ffc <_Z19__fetch_global_Wirev>
}
   b5d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5d2a:	f000 bf8c 	b.w	b6c46 <_ZN7TwoWire15endTransmissionEv>
	...

000b5d30 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5d32:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5d34:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5d36:	f7ff ffbd 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5d3a:	2100      	movs	r1, #0
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7ff ffb9 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5d42:	217f      	movs	r1, #127	; 0x7f
   b5d44:	4620      	mov	r0, r4
   b5d46:	f7ff ffb5 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5d4a:	2122      	movs	r1, #34	; 0x22
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	f7ff ffb1 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5d52:	2100      	movs	r1, #0
   b5d54:	4620      	mov	r0, r4
   b5d56:	f7ff ffad 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5d5a:	2107      	movs	r1, #7
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	f7ff ffa9 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5d62:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5d66:	4f29      	ldr	r7, [pc, #164]	; (b5e0c <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5d68:	3301      	adds	r3, #1
   b5d6a:	d02a      	beq.n	b5dc2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5d6c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5d70:	2101      	movs	r1, #1
   b5d72:	b280      	uxth	r0, r0
   b5d74:	f002 f8c1 	bl	b7efa <digitalWrite>
    digitalWrite(dc, HIGH);
   b5d78:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5d7c:	2101      	movs	r1, #1
   b5d7e:	b280      	uxth	r0, r0
   b5d80:	f002 f8bb 	bl	b7efa <digitalWrite>
    digitalWrite(cs, LOW);
   b5d84:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5d88:	2100      	movs	r1, #0
   b5d8a:	b280      	uxth	r0, r0
   b5d8c:	f002 f8b5 	bl	b7efa <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5d90:	2001      	movs	r0, #1
   b5d92:	f000 fb9f 	bl	b64d4 <HAL_Delay_Microseconds>
   b5d96:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5d9a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5d9c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5da0:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5da2:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5da4:	f7ff ff70 	bl	b5c88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5da8:	2d00      	cmp	r5, #0
   b5daa:	d1f6      	bne.n	b5d9a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5dac:	2001      	movs	r0, #1
   b5dae:	f000 fb91 	bl	b64d4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5db2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5db6:	2101      	movs	r1, #1
}
   b5db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5dbc:	b280      	uxth	r0, r0
   b5dbe:	f002 b89c 	b.w	b7efa <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5dc2:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5dc4:	f002 f91a 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5dc8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5dcc:	f000 ff34 	bl	b6c38 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5dd0:	f002 f914 	bl	b7ffc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5dd4:	6803      	ldr	r3, [r0, #0]
   b5dd6:	2140      	movs	r1, #64	; 0x40
   b5dd8:	689b      	ldr	r3, [r3, #8]
   b5dda:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5ddc:	f105 0610 	add.w	r6, r5, #16
   b5de0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5de2:	f002 f90b 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5de6:	6803      	ldr	r3, [r0, #0]
   b5de8:	5d79      	ldrb	r1, [r7, r5]
   b5dea:	689b      	ldr	r3, [r3, #8]
   b5dec:	4798      	blx	r3
		i++;
   b5dee:	1c6b      	adds	r3, r5, #1
   b5df0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5df2:	42ae      	cmp	r6, r5
   b5df4:	d1f5      	bne.n	b5de2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5df6:	f002 f901 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5dfa:	f000 ff24 	bl	b6c46 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5dfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5e02:	d100      	bne.n	b5e06 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5e06:	4635      	mov	r5, r6
   b5e08:	e7dc      	b.n	b5dc4 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5e0a:	bf00      	nop
   b5e0c:	2003e064 	.word	0x2003e064

000b5e10 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5e10:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5e12:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5e16:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5e18:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5e1a:	4604      	mov	r4, r0
   b5e1c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5e1e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5e20:	f000 80c9 	beq.w	b5fb6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5e24:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5e28:	2101      	movs	r1, #1
   b5e2a:	b280      	uxth	r0, r0
   b5e2c:	f002 f854 	bl	b7ed8 <pinMode>
    pinMode(cs, OUTPUT);
   b5e30:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e34:	2101      	movs	r1, #1
   b5e36:	b280      	uxth	r0, r0
   b5e38:	f002 f84e 	bl	b7ed8 <pinMode>
    if (!hwSPI){
   b5e3c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5e40:	2b00      	cmp	r3, #0
   b5e42:	f000 80a6 	beq.w	b5f92 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5e46:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e4a:	2101      	movs	r1, #1
   b5e4c:	b280      	uxth	r0, r0
   b5e4e:	f002 f854 	bl	b7efa <digitalWrite>
        instance().setBitOrder(order);
   b5e52:	f7ff f945 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e56:	2101      	movs	r1, #1
   b5e58:	f001 f962 	bl	b7120 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5e5c:	f7ff f940 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e60:	2110      	movs	r1, #16
   b5e62:	f001 f9cd 	bl	b7200 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5e66:	f7ff f93b 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e6a:	2100      	movs	r1, #0
   b5e6c:	f001 f96c 	bl	b7148 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5e70:	f7ff f936 	bl	b50e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e74:	f001 f940 	bl	b70f8 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5e78:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5e7c:	2101      	movs	r1, #1
   b5e7e:	b280      	uxth	r0, r0
   b5e80:	f002 f82a 	bl	b7ed8 <pinMode>
  digitalWrite(rst, HIGH);
   b5e84:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5e88:	2101      	movs	r1, #1
   b5e8a:	b280      	uxth	r0, r0
   b5e8c:	f002 f835 	bl	b7efa <digitalWrite>
  delay(1);
   b5e90:	2001      	movs	r0, #1
   b5e92:	f000 fdff 	bl	b6a94 <delay>
  digitalWrite(rst, LOW);
   b5e96:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5e9a:	2100      	movs	r1, #0
   b5e9c:	b280      	uxth	r0, r0
   b5e9e:	f002 f82c 	bl	b7efa <digitalWrite>
  delay(10);
   b5ea2:	200a      	movs	r0, #10
   b5ea4:	f000 fdf6 	bl	b6a94 <delay>
  digitalWrite(rst, HIGH);
   b5ea8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5eac:	2101      	movs	r1, #1
   b5eae:	b280      	uxth	r0, r0
   b5eb0:	f002 f823 	bl	b7efa <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	21ae      	movs	r1, #174	; 0xae
   b5eb8:	f7ff fefc 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	21d5      	movs	r1, #213	; 0xd5
   b5ec0:	f7ff fef8 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	2180      	movs	r1, #128	; 0x80
   b5ec8:	f7ff fef4 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5ecc:	4620      	mov	r0, r4
   b5ece:	21a8      	movs	r1, #168	; 0xa8
   b5ed0:	f7ff fef0 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5ed4:	4620      	mov	r0, r4
   b5ed6:	213f      	movs	r1, #63	; 0x3f
   b5ed8:	f7ff feec 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5edc:	4620      	mov	r0, r4
   b5ede:	21d3      	movs	r1, #211	; 0xd3
   b5ee0:	f7ff fee8 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	2100      	movs	r1, #0
   b5ee8:	f7ff fee4 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5eec:	4620      	mov	r0, r4
   b5eee:	2140      	movs	r1, #64	; 0x40
   b5ef0:	f7ff fee0 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5ef4:	218d      	movs	r1, #141	; 0x8d
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	f7ff fedc 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5efc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5efe:	bf0c      	ite	eq
   b5f00:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5f02:	2114      	movne	r1, #20
   b5f04:	4620      	mov	r0, r4
   b5f06:	f7ff fed5 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	2120      	movs	r1, #32
   b5f0e:	f7ff fed1 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5f12:	4620      	mov	r0, r4
   b5f14:	2100      	movs	r1, #0
   b5f16:	f7ff fecd 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	21a1      	movs	r1, #161	; 0xa1
   b5f1e:	f7ff fec9 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5f22:	4620      	mov	r0, r4
   b5f24:	21c8      	movs	r1, #200	; 0xc8
   b5f26:	f7ff fec5 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	21da      	movs	r1, #218	; 0xda
   b5f2e:	f7ff fec1 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5f32:	4620      	mov	r0, r4
   b5f34:	2112      	movs	r1, #18
   b5f36:	f7ff febd 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5f3a:	2181      	movs	r1, #129	; 0x81
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f7ff feb9 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5f42:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5f44:	bf0c      	ite	eq
   b5f46:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5f48:	21cf      	movne	r1, #207	; 0xcf
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	f7ff feb2 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5f50:	21d9      	movs	r1, #217	; 0xd9
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff feae 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5f58:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5f5a:	bf0c      	ite	eq
   b5f5c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5f5e:	21f1      	movne	r1, #241	; 0xf1
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff fea7 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5f66:	4620      	mov	r0, r4
   b5f68:	21db      	movs	r1, #219	; 0xdb
   b5f6a:	f7ff fea3 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5f6e:	4620      	mov	r0, r4
   b5f70:	2140      	movs	r1, #64	; 0x40
   b5f72:	f7ff fe9f 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5f76:	4620      	mov	r0, r4
   b5f78:	21a4      	movs	r1, #164	; 0xa4
   b5f7a:	f7ff fe9b 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5f7e:	4620      	mov	r0, r4
   b5f80:	21a6      	movs	r1, #166	; 0xa6
   b5f82:	f7ff fe97 	bl	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5f86:	4620      	mov	r0, r4
   b5f88:	21af      	movs	r1, #175	; 0xaf
}
   b5f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5f8e:	f7ff be91 	b.w	b5cb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5f92:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5f96:	2101      	movs	r1, #1
   b5f98:	b280      	uxth	r0, r0
   b5f9a:	f001 ff9d 	bl	b7ed8 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5f9e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5fa2:	2101      	movs	r1, #1
   b5fa4:	b280      	uxth	r0, r0
   b5fa6:	f001 ff97 	bl	b7ed8 <pinMode>
    if (hwSPI){
   b5faa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5fae:	2b00      	cmp	r3, #0
   b5fb0:	f43f af62 	beq.w	b5e78 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5fb4:	e747      	b.n	b5e46 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5fb6:	f002 f821 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b5fba:	f000 fe07 	bl	b6bcc <_ZN7TwoWire5beginEv>
   b5fbe:	e75b      	b.n	b5e78 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5fc0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5fc0:	b538      	push	{r3, r4, r5, lr}
   b5fc2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b5fc4:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5fc6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b5fc8:	b108      	cbz	r0, b5fce <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5fca:	f000 fd1f 	bl	b6a0c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5fce:	79a3      	ldrb	r3, [r4, #6]
   b5fd0:	2b06      	cmp	r3, #6
   b5fd2:	bf0c      	ite	eq
   b5fd4:	2004      	moveq	r0, #4
   b5fd6:	2003      	movne	r0, #3
   b5fd8:	fb10 f005 	smulbb	r0, r0, r5
   b5fdc:	b280      	uxth	r0, r0
   b5fde:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5fe0:	f000 fd0c 	bl	b69fc <malloc>
   b5fe4:	60e0      	str	r0, [r4, #12]
   b5fe6:	b128      	cbz	r0, b5ff4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b5fe8:	88a2      	ldrh	r2, [r4, #4]
   b5fea:	2100      	movs	r1, #0
   b5fec:	f002 fd8c 	bl	b8b08 <memset>
    numLEDs = n;
   b5ff0:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b5ff2:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b5ff4:	80a0      	strh	r0, [r4, #4]
   b5ff6:	8060      	strh	r0, [r4, #2]
}
   b5ff8:	e7fb      	b.n	b5ff2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5ffa <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b5ffa:	b510      	push	{r4, lr}
   b5ffc:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b5ffe:	2101      	movs	r1, #1
   b6000:	79c0      	ldrb	r0, [r0, #7]
   b6002:	f001 ff69 	bl	b7ed8 <pinMode>
  digitalWrite(pin, LOW);
   b6006:	79e0      	ldrb	r0, [r4, #7]
   b6008:	2100      	movs	r1, #0
   b600a:	f001 ff76 	bl	b7efa <digitalWrite>
  begun = true;
   b600e:	2301      	movs	r3, #1
   b6010:	7023      	strb	r3, [r4, #0]
}
   b6012:	bd10      	pop	{r4, pc}

000b6014 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6014:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b6016:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6018:	4605      	mov	r5, r0
   b601a:	460c      	mov	r4, r1
    if (begun) {
   b601c:	b11b      	cbz	r3, b6026 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b601e:	79c0      	ldrb	r0, [r0, #7]
   b6020:	2100      	movs	r1, #0
   b6022:	f001 ff59 	bl	b7ed8 <pinMode>
    }
    pin = p;
    if (begun) {
   b6026:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b6028:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b602a:	b15b      	cbz	r3, b6044 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b602c:	b2a0      	uxth	r0, r4
   b602e:	2101      	movs	r1, #1
   b6030:	9001      	str	r0, [sp, #4]
   b6032:	f001 ff51 	bl	b7ed8 <pinMode>
        digitalWrite(p, LOW);
   b6036:	9801      	ldr	r0, [sp, #4]
   b6038:	2100      	movs	r1, #0
    }
}
   b603a:	b003      	add	sp, #12
   b603c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b6040:	f001 bf5b 	b.w	b7efa <digitalWrite>
}
   b6044:	b003      	add	sp, #12
   b6046:	bd30      	pop	{r4, r5, pc}

000b6048 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6048:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b604a:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b604c:	4604      	mov	r4, r0
   b604e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6050:	7183      	strb	r3, [r0, #6]
   b6052:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b6056:	7005      	strb	r5, [r0, #0]
   b6058:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b605a:	f7ff ffb1 	bl	b5fc0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b605e:	4620      	mov	r0, r4
   b6060:	4631      	mov	r1, r6
   b6062:	f7ff ffd7 	bl	b6014 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b6066:	4620      	mov	r0, r4
   b6068:	bd70      	pop	{r4, r5, r6, pc}
	...

000b606c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b606c:	68c3      	ldr	r3, [r0, #12]
   b606e:	2b00      	cmp	r3, #0
   b6070:	f000 81a4 	beq.w	b63bc <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b6074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6078:	7983      	ldrb	r3, [r0, #6]
   b607a:	3b02      	subs	r3, #2
   b607c:	b2db      	uxtb	r3, r3
   b607e:	2b04      	cmp	r3, #4
   b6080:	bf9c      	itt	ls
   b6082:	4abf      	ldrls	r2, [pc, #764]	; (b6380 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b6084:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b6088:	b085      	sub	sp, #20
   b608a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b608c:	bf88      	it	hi
   b608e:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6090:	f000 fa28 	bl	b64e4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b6094:	692b      	ldr	r3, [r5, #16]
   b6096:	1ac0      	subs	r0, r0, r3
   b6098:	42a0      	cmp	r0, r4
   b609a:	d3f9      	bcc.n	b6090 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b609c:	4cb9      	ldr	r4, [pc, #740]	; (b6384 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b609e:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b60a0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b60a4:	b91b      	cbnz	r3, b60ae <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b60a6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b60aa:	2b00      	cmp	r3, #0
   b60ac:	db7e      	blt.n	b61ac <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b60ae:	4cb6      	ldr	r4, [pc, #728]	; (b6388 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b60b0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b60b4:	b923      	cbnz	r3, b60c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b60b6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b60ba:	2b00      	cmp	r3, #0
   b60bc:	f2c0 816e 	blt.w	b639c <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b60c0:	4cb2      	ldr	r4, [pc, #712]	; (b638c <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b60c2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b60c6:	2b00      	cmp	r3, #0
   b60c8:	f000 8144 	beq.w	b6354 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b60cc:	79eb      	ldrb	r3, [r5, #7]
   b60ce:	4ab0      	ldr	r2, [pc, #704]	; (b6390 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b60d0:	4cb0      	ldr	r4, [pc, #704]	; (b6394 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b60d2:	6812      	ldr	r2, [r2, #0]
   b60d4:	0119      	lsls	r1, r3, #4
   b60d6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b60da:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b60dc:	49ae      	ldr	r1, [pc, #696]	; (b6398 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b60de:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b60e0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b60e4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b60e8:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b60ec:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b60ee:	f003 031f 	and.w	r3, r3, #31
   b60f2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b60f6:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b60f8:	433a      	orrs	r2, r7
   b60fa:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b60fc:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b60fe:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b6102:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6106:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b6108:	2900      	cmp	r1, #0
   b610a:	d044      	beq.n	b6196 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b610c:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b6110:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b6112:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b6116:	f818 cb01 	ldrb.w	ip, [r8], #1
   b611a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b611c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b611e:	6863      	ldr	r3, [r4, #4]
   b6120:	1a9b      	subs	r3, r3, r2
   b6122:	2b46      	cmp	r3, #70	; 0x46
   b6124:	d9fb      	bls.n	b611e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b6126:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b6128:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b612c:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b6130:	ea43 0307 	orr.w	r3, r3, r7
   b6134:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b6138:	d02f      	beq.n	b619a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b613a:	6863      	ldr	r3, [r4, #4]
   b613c:	1a9b      	subs	r3, r3, r2
   b613e:	2b28      	cmp	r3, #40	; 0x28
   b6140:	d9fb      	bls.n	b613a <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b6142:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6146:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6148:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b614c:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6150:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6154:	d1e3      	bne.n	b611e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b6156:	88ab      	ldrh	r3, [r5, #4]
   b6158:	f10e 0e01 	add.w	lr, lr, #1
   b615c:	fa1f fe8e 	uxth.w	lr, lr
   b6160:	4573      	cmp	r3, lr
   b6162:	d8d8      	bhi.n	b6116 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b6164:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b6168:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b616c:	6863      	ldr	r3, [r4, #4]
   b616e:	1a9b      	subs	r3, r3, r2
   b6170:	2b46      	cmp	r3, #70	; 0x46
   b6172:	d9fb      	bls.n	b616c <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b6174:	6863      	ldr	r3, [r4, #4]
   b6176:	eba3 0909 	sub.w	r9, r3, r9
   b617a:	4589      	cmp	r9, r1
   b617c:	f0c0 80e4 	bcc.w	b6348 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6180:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b6184:	f000 f9a6 	bl	b64d4 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b6188:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b618a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b618e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b6192:	2900      	cmp	r1, #0
   b6194:	d1ba      	bne.n	b610c <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b6196:	460a      	mov	r2, r1
   b6198:	e7e8      	b.n	b616c <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b619a:	6863      	ldr	r3, [r4, #4]
   b619c:	1a9b      	subs	r3, r3, r2
   b619e:	2b11      	cmp	r3, #17
   b61a0:	d8cf      	bhi.n	b6142 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b61a2:	6863      	ldr	r3, [r4, #4]
   b61a4:	1a9b      	subs	r3, r3, r2
   b61a6:	2b11      	cmp	r3, #17
   b61a8:	d9f7      	bls.n	b619a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b61aa:	e7ca      	b.n	b6142 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b61ac:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b61b0:	2b00      	cmp	r3, #0
   b61b2:	f6bf af7c 	bge.w	b60ae <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b61b6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b61ba:	2b00      	cmp	r3, #0
   b61bc:	f6bf af77 	bge.w	b60ae <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b61c0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b61c4:	2b00      	cmp	r3, #0
   b61c6:	f6bf af72 	bge.w	b60ae <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b61ca:	0136      	lsls	r6, r6, #4
   b61cc:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b61ce:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b61d0:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b61d2:	f000 fc13 	bl	b69fc <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b61d6:	2800      	cmp	r0, #0
   b61d8:	f43f af78 	beq.w	b60cc <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b61dc:	88ab      	ldrh	r3, [r5, #4]
   b61de:	2b00      	cmp	r3, #0
   b61e0:	f000 80ed 	beq.w	b63be <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b61e4:	68ea      	ldr	r2, [r5, #12]
   b61e6:	3b01      	subs	r3, #1
   b61e8:	fa12 f783 	uxtah	r7, r2, r3
   b61ec:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b61f0:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b61f2:	f248 0206 	movw	r2, #32774	; 0x8006
   b61f6:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b61fa:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b61fe:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b6202:	bf0c      	ite	eq
   b6204:	4693      	moveq	fp, r2
   b6206:	468b      	movne	fp, r1
   b6208:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b620c:	bf0c      	ite	eq
   b620e:	4616      	moveq	r6, r2
   b6210:	460e      	movne	r6, r1
   b6212:	f01c 0f20 	tst.w	ip, #32
   b6216:	bf0c      	ite	eq
   b6218:	4690      	moveq	r8, r2
   b621a:	4688      	movne	r8, r1
        pos++;
   b621c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6220:	f8cd 8008 	str.w	r8, [sp, #8]
   b6224:	9601      	str	r6, [sp, #4]
        pos++;
   b6226:	f103 0802 	add.w	r8, r3, #2
   b622a:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b622e:	9e01      	ldr	r6, [sp, #4]
   b6230:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b6234:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6238:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b623c:	9e02      	ldr	r6, [sp, #8]
   b623e:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b6242:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6246:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b624a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b624e:	bf0c      	ite	eq
   b6250:	4693      	moveq	fp, r2
   b6252:	468b      	movne	fp, r1
   b6254:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6258:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b625c:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b6260:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6264:	bf0c      	ite	eq
   b6266:	4693      	moveq	fp, r2
   b6268:	468b      	movne	fp, r1
   b626a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b626e:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6272:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b6276:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b627a:	bf0c      	ite	eq
   b627c:	4693      	moveq	fp, r2
   b627e:	468b      	movne	fp, r1
   b6280:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6284:	f103 0a08 	add.w	sl, r3, #8
   b6288:	f103 0806 	add.w	r8, r3, #6
   b628c:	3307      	adds	r3, #7
   b628e:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6290:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b6294:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6298:	bf0c      	ite	eq
   b629a:	4693      	moveq	fp, r2
   b629c:	468b      	movne	fp, r1
        pos++;
   b629e:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b62a2:	f01c 0f01 	tst.w	ip, #1
   b62a6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b62aa:	bf15      	itete	ne
   b62ac:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b62b0:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b62b4:	fa1f f38a 	uxthne.w	r3, sl
   b62b8:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b62bc:	4577      	cmp	r7, lr
   b62be:	d19c      	bne.n	b61fa <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62c0:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62c2:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62c4:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62c6:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62c8:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62ca:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62cc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b62d0:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b62d2:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b62d4:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b62d6:	4b2e      	ldr	r3, [pc, #184]	; (b6390 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b62d8:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b62da:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b62dc:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b62de:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b62e0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b62e4:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b62e8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b62ec:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b62f0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b62f4:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b62f8:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b62fc:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b6300:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6304:	79eb      	ldrb	r3, [r5, #7]
   b6306:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b630a:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b630c:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b630e:	5cfe      	ldrb	r6, [r7, r3]
   b6310:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b6314:	f003 031f 	and.w	r3, r3, #31
   b6318:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b631c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b6320:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b6324:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b6328:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b632a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b632e:	2b00      	cmp	r3, #0
   b6330:	d0fb      	beq.n	b632a <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b6332:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b6334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b6338:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b633c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b6340:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b6344:	f000 fb62 	bl	b6a0c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6348:	f000 f8cc 	bl	b64e4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b634c:	6128      	str	r0, [r5, #16]
}
   b634e:	b005      	add	sp, #20
   b6350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6354:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6358:	2b00      	cmp	r3, #0
   b635a:	f6bf aeb7 	bge.w	b60cc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b635e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6362:	2b00      	cmp	r3, #0
   b6364:	f6bf aeb2 	bge.w	b60cc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6368:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b636c:	2b00      	cmp	r3, #0
   b636e:	f6bf aead 	bge.w	b60cc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b6372:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6376:	2b00      	cmp	r3, #0
   b6378:	f6bf aea8 	bge.w	b60cc <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b637c:	e725      	b.n	b61ca <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b637e:	bf00      	nop
   b6380:	000b98f8 	.word	0x000b98f8
   b6384:	4001c000 	.word	0x4001c000
   b6388:	40021000 	.word	0x40021000
   b638c:	40022000 	.word	0x40022000
   b6390:	2003e630 	.word	0x2003e630
   b6394:	e0001000 	.word	0xe0001000
   b6398:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b639c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b63a0:	2b00      	cmp	r3, #0
   b63a2:	f6bf ae8d 	bge.w	b60c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b63a6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b63aa:	2b00      	cmp	r3, #0
   b63ac:	f6bf ae88 	bge.w	b60c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b63b0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b63b4:	2b00      	cmp	r3, #0
   b63b6:	f6bf ae83 	bge.w	b60c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b63ba:	e706      	b.n	b61ca <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b63bc:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b63be:	2304      	movs	r3, #4
   b63c0:	2102      	movs	r1, #2
   b63c2:	e783      	b.n	b62cc <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b63c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b63c4:	8843      	ldrh	r3, [r0, #2]
   b63c6:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b63c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b63ca:	d92d      	bls.n	b6428 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b63cc:	7a06      	ldrb	r6, [r0, #8]
   b63ce:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b63d2:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b63d6:	b2d5      	uxtb	r5, r2
   b63d8:	b13e      	cbz	r6, b63ea <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b63da:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b63dc:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b63de:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b63e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b63e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b63e8:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b63ea:	f890 c006 	ldrb.w	ip, [r0, #6]
   b63ee:	68c7      	ldr	r7, [r0, #12]
   b63f0:	f1bc 0f06 	cmp.w	ip, #6
   b63f4:	bf0c      	ite	eq
   b63f6:	2604      	moveq	r6, #4
   b63f8:	2603      	movne	r6, #3
   b63fa:	434e      	muls	r6, r1
   b63fc:	f1ac 0c02 	sub.w	ip, ip, #2
   b6400:	19b9      	adds	r1, r7, r6
    switch(type) {
   b6402:	f1bc 0f06 	cmp.w	ip, #6
   b6406:	d81d      	bhi.n	b6444 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b6408:	e8df f00c 	tbb	[pc, ip]
   b640c:	04081c04 	.word	0x04081c04
   b6410:	040f      	.short	0x040f
   b6412:	04          	.byte	0x04
   b6413:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b6414:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b6416:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b6418:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b641a:	e005      	b.n	b6428 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b641c:	2bfe      	cmp	r3, #254	; 0xfe
   b641e:	bf28      	it	cs
   b6420:	23fe      	movcs	r3, #254	; 0xfe
   b6422:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b6424:	704d      	strb	r5, [r1, #1]
          *p = g;
   b6426:	708c      	strb	r4, [r1, #2]
}
   b6428:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b642a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b642c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b642e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6430:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b6432:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6434:	b913      	cbnz	r3, b643c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b6436:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6438:	70ca      	strb	r2, [r1, #3]
        } break;
   b643a:	e7f5      	b.n	b6428 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b643c:	435a      	muls	r2, r3
   b643e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b6442:	e7f9      	b.n	b6438 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b6444:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b6446:	704c      	strb	r4, [r1, #1]
   b6448:	e7e6      	b.n	b6418 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b644a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b644a:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b644c:	1c4a      	adds	r2, r1, #1
   b644e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b6450:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b6452:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b6454:	d01f      	beq.n	b6496 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b6456:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b6458:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b645c:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b645e:	d00c      	beq.n	b647a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b6460:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b6462:	bf1f      	itttt	ne
   b6464:	0211      	lslne	r1, r2, #8
   b6466:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b646a:	fbb1 f3f3 	udivne	r3, r1, r3
   b646e:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b6470:	bf04      	itt	eq
   b6472:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b6476:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b647a:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b647c:	8886      	ldrh	r6, [r0, #4]
   b647e:	1b29      	subs	r1, r5, r4
   b6480:	b289      	uxth	r1, r1
   b6482:	428e      	cmp	r6, r1
   b6484:	d906      	bls.n	b6494 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b6486:	7829      	ldrb	r1, [r5, #0]
   b6488:	4359      	muls	r1, r3
   b648a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b648e:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b6492:	e7f3      	b.n	b647c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b6494:	7202      	strb	r2, [r0, #8]
  }
}
   b6496:	bd70      	pop	{r4, r5, r6, pc}

000b6498 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b6498:	8882      	ldrh	r2, [r0, #4]
   b649a:	68c0      	ldr	r0, [r0, #12]
   b649c:	2100      	movs	r1, #0
   b649e:	f002 bb33 	b.w	b8b08 <memset>
	...

000b64a4 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b64a4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b64a6:	f000 f82d 	bl	b6504 <HAL_Pin_Map>
   b64aa:	4b01      	ldr	r3, [pc, #4]	; (b64b0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b64ac:	6018      	str	r0, [r3, #0]
}
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	2003e630 	.word	0x2003e630

000b64b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <os_mutex_recursive_create+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030248 	.word	0x00030248

000b64c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <HAL_RNG_GetRandomNumber+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	685b      	ldr	r3, [r3, #4]
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030218 	.word	0x00030218

000b64d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <HAL_Delay_Microseconds+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	68db      	ldr	r3, [r3, #12]
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030218 	.word	0x00030218

000b64e4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	691b      	ldr	r3, [r3, #16]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030218 	.word	0x00030218

000b64f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	695b      	ldr	r3, [r3, #20]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030218 	.word	0x00030218

000b6504 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <HAL_Pin_Map+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	681b      	ldr	r3, [r3, #0]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	0003022c 	.word	0x0003022c

000b6514 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <HAL_Validate_Pin_Function+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	685b      	ldr	r3, [r3, #4]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	0003022c 	.word	0x0003022c

000b6524 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <HAL_Pin_Mode+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	689b      	ldr	r3, [r3, #8]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	0003022c 	.word	0x0003022c

000b6534 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <HAL_Get_Pin_Mode+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	68db      	ldr	r3, [r3, #12]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	0003022c 	.word	0x0003022c

000b6544 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <HAL_GPIO_Write+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	691b      	ldr	r3, [r3, #16]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	0003022c 	.word	0x0003022c

000b6554 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <HAL_GPIO_Read+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	695b      	ldr	r3, [r3, #20]
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	0003022c 	.word	0x0003022c

000b6564 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <HAL_Interrupts_Attach+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	699b      	ldr	r3, [r3, #24]
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	0003022c 	.word	0x0003022c

000b6574 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <HAL_Interrupts_Detach+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	69db      	ldr	r3, [r3, #28]
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	0003022c 	.word	0x0003022c

000b6584 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <HAL_Interrupts_Enable_All+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6a1b      	ldr	r3, [r3, #32]
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	0003022c 	.word	0x0003022c

000b6594 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <HAL_Interrupts_Disable_All+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	0003022c 	.word	0x0003022c

000b65a4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_adc_read+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	0003022c 	.word	0x0003022c

000b65b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_i2c_begin+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	68db      	ldr	r3, [r3, #12]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030228 	.word	0x00030228

000b65c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_i2c_begin_transmission+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	699b      	ldr	r3, [r3, #24]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030228 	.word	0x00030228

000b65d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <hal_i2c_end_transmission+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	69db      	ldr	r3, [r3, #28]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030228 	.word	0x00030228

000b65e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <hal_i2c_write+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6a1b      	ldr	r3, [r3, #32]
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030228 	.word	0x00030228

000b65f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <hal_i2c_available+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030228 	.word	0x00030228

000b6604 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <hal_i2c_read+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	00030228 	.word	0x00030228

000b6614 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <hal_i2c_peek+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	00030228 	.word	0x00030228

000b6624 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <hal_i2c_flush+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	00030228 	.word	0x00030228

000b6634 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <hal_i2c_is_enabled+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	00030228 	.word	0x00030228

000b6644 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <hal_i2c_init+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	00030228 	.word	0x00030228

000b6654 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <hal_i2c_request_ex+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	00030228 	.word	0x00030228

000b6664 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <if_index_to_name+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	695b      	ldr	r3, [r3, #20]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	0003026c 	.word	0x0003026c

000b6674 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <inet_inet_ntop+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	695b      	ldr	r3, [r3, #20]
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	00030264 	.word	0x00030264

000b6684 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <inet_htonl+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	6a1b      	ldr	r3, [r3, #32]
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	00030264 	.word	0x00030264

000b6694 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <inet_htons+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	00030264 	.word	0x00030264

000b66a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <netdb_freeaddrinfo+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	689b      	ldr	r3, [r3, #8]
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	00030268 	.word	0x00030268

000b66b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <netdb_getaddrinfo+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	68db      	ldr	r3, [r3, #12]
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	00030268 	.word	0x00030268

000b66c4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <sock_setsockopt+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	699b      	ldr	r3, [r3, #24]
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	00030238 	.word	0x00030238

000b66d4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b02      	ldr	r3, [pc, #8]	; (b66e0 <sock_close+0xc>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	69db      	ldr	r3, [r3, #28]
   b66dc:	9301      	str	r3, [sp, #4]
   b66de:	bd08      	pop	{r3, pc}
   b66e0:	00030238 	.word	0x00030238

000b66e4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b66e4:	b508      	push	{r3, lr}
   b66e6:	4b02      	ldr	r3, [pc, #8]	; (b66f0 <sock_connect+0xc>)
   b66e8:	681b      	ldr	r3, [r3, #0]
   b66ea:	6a1b      	ldr	r3, [r3, #32]
   b66ec:	9301      	str	r3, [sp, #4]
   b66ee:	bd08      	pop	{r3, pc}
   b66f0:	00030238 	.word	0x00030238

000b66f4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b66f4:	b508      	push	{r3, lr}
   b66f6:	4b02      	ldr	r3, [pc, #8]	; (b6700 <sock_recv+0xc>)
   b66f8:	681b      	ldr	r3, [r3, #0]
   b66fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b66fc:	9301      	str	r3, [sp, #4]
   b66fe:	bd08      	pop	{r3, pc}
   b6700:	00030238 	.word	0x00030238

000b6704 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6704:	b508      	push	{r3, lr}
   b6706:	4b02      	ldr	r3, [pc, #8]	; (b6710 <sock_send+0xc>)
   b6708:	681b      	ldr	r3, [r3, #0]
   b670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b670c:	9301      	str	r3, [sp, #4]
   b670e:	bd08      	pop	{r3, pc}
   b6710:	00030238 	.word	0x00030238

000b6714 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6714:	b508      	push	{r3, lr}
   b6716:	4b02      	ldr	r3, [pc, #8]	; (b6720 <sock_socket+0xc>)
   b6718:	681b      	ldr	r3, [r3, #0]
   b671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b671c:	9301      	str	r3, [sp, #4]
   b671e:	bd08      	pop	{r3, pc}
   b6720:	00030238 	.word	0x00030238

000b6724 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6724:	b508      	push	{r3, lr}
   b6726:	4b02      	ldr	r3, [pc, #8]	; (b6730 <hal_spi_begin+0xc>)
   b6728:	681b      	ldr	r3, [r3, #0]
   b672a:	681b      	ldr	r3, [r3, #0]
   b672c:	9301      	str	r3, [sp, #4]
   b672e:	bd08      	pop	{r3, pc}
   b6730:	00030230 	.word	0x00030230

000b6734 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6734:	b508      	push	{r3, lr}
   b6736:	4b02      	ldr	r3, [pc, #8]	; (b6740 <hal_spi_set_bit_order+0xc>)
   b6738:	681b      	ldr	r3, [r3, #0]
   b673a:	689b      	ldr	r3, [r3, #8]
   b673c:	9301      	str	r3, [sp, #4]
   b673e:	bd08      	pop	{r3, pc}
   b6740:	00030230 	.word	0x00030230

000b6744 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6744:	b508      	push	{r3, lr}
   b6746:	4b02      	ldr	r3, [pc, #8]	; (b6750 <hal_spi_set_data_mode+0xc>)
   b6748:	681b      	ldr	r3, [r3, #0]
   b674a:	68db      	ldr	r3, [r3, #12]
   b674c:	9301      	str	r3, [sp, #4]
   b674e:	bd08      	pop	{r3, pc}
   b6750:	00030230 	.word	0x00030230

000b6754 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6754:	b508      	push	{r3, lr}
   b6756:	4b02      	ldr	r3, [pc, #8]	; (b6760 <hal_spi_set_clock_divider+0xc>)
   b6758:	681b      	ldr	r3, [r3, #0]
   b675a:	691b      	ldr	r3, [r3, #16]
   b675c:	9301      	str	r3, [sp, #4]
   b675e:	bd08      	pop	{r3, pc}
   b6760:	00030230 	.word	0x00030230

000b6764 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6764:	b508      	push	{r3, lr}
   b6766:	4b02      	ldr	r3, [pc, #8]	; (b6770 <hal_spi_transfer+0xc>)
   b6768:	681b      	ldr	r3, [r3, #0]
   b676a:	695b      	ldr	r3, [r3, #20]
   b676c:	9301      	str	r3, [sp, #4]
   b676e:	bd08      	pop	{r3, pc}
   b6770:	00030230 	.word	0x00030230

000b6774 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6774:	b508      	push	{r3, lr}
   b6776:	4b02      	ldr	r3, [pc, #8]	; (b6780 <hal_spi_init+0xc>)
   b6778:	681b      	ldr	r3, [r3, #0]
   b677a:	69db      	ldr	r3, [r3, #28]
   b677c:	9301      	str	r3, [sp, #4]
   b677e:	bd08      	pop	{r3, pc}
   b6780:	00030230 	.word	0x00030230

000b6784 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6784:	b508      	push	{r3, lr}
   b6786:	4b02      	ldr	r3, [pc, #8]	; (b6790 <hal_spi_is_enabled+0xc>)
   b6788:	681b      	ldr	r3, [r3, #0]
   b678a:	6a1b      	ldr	r3, [r3, #32]
   b678c:	9301      	str	r3, [sp, #4]
   b678e:	bd08      	pop	{r3, pc}
   b6790:	00030230 	.word	0x00030230

000b6794 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6794:	b508      	push	{r3, lr}
   b6796:	4b02      	ldr	r3, [pc, #8]	; (b67a0 <hal_spi_info+0xc>)
   b6798:	681b      	ldr	r3, [r3, #0]
   b679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b679c:	9301      	str	r3, [sp, #4]
   b679e:	bd08      	pop	{r3, pc}
   b67a0:	00030230 	.word	0x00030230

000b67a4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b67a4:	b508      	push	{r3, lr}
   b67a6:	4b02      	ldr	r3, [pc, #8]	; (b67b0 <hal_spi_acquire+0xc>)
   b67a8:	681b      	ldr	r3, [r3, #0]
   b67aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67ac:	9301      	str	r3, [sp, #4]
   b67ae:	bd08      	pop	{r3, pc}
   b67b0:	00030230 	.word	0x00030230

000b67b4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b67b4:	b508      	push	{r3, lr}
   b67b6:	4b02      	ldr	r3, [pc, #8]	; (b67c0 <hal_spi_release+0xc>)
   b67b8:	681b      	ldr	r3, [r3, #0]
   b67ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67bc:	9301      	str	r3, [sp, #4]
   b67be:	bd08      	pop	{r3, pc}
   b67c0:	00030230 	.word	0x00030230

000b67c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b67c4:	b508      	push	{r3, lr}
   b67c6:	4b02      	ldr	r3, [pc, #8]	; (b67d0 <hal_usart_write+0xc>)
   b67c8:	681b      	ldr	r3, [r3, #0]
   b67ca:	68db      	ldr	r3, [r3, #12]
   b67cc:	9301      	str	r3, [sp, #4]
   b67ce:	bd08      	pop	{r3, pc}
   b67d0:	0003023c 	.word	0x0003023c

000b67d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b67d4:	b508      	push	{r3, lr}
   b67d6:	4b02      	ldr	r3, [pc, #8]	; (b67e0 <hal_usart_available+0xc>)
   b67d8:	681b      	ldr	r3, [r3, #0]
   b67da:	691b      	ldr	r3, [r3, #16]
   b67dc:	9301      	str	r3, [sp, #4]
   b67de:	bd08      	pop	{r3, pc}
   b67e0:	0003023c 	.word	0x0003023c

000b67e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b67e4:	b508      	push	{r3, lr}
   b67e6:	4b02      	ldr	r3, [pc, #8]	; (b67f0 <hal_usart_read+0xc>)
   b67e8:	681b      	ldr	r3, [r3, #0]
   b67ea:	695b      	ldr	r3, [r3, #20]
   b67ec:	9301      	str	r3, [sp, #4]
   b67ee:	bd08      	pop	{r3, pc}
   b67f0:	0003023c 	.word	0x0003023c

000b67f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b67f4:	b508      	push	{r3, lr}
   b67f6:	4b02      	ldr	r3, [pc, #8]	; (b6800 <hal_usart_peek+0xc>)
   b67f8:	681b      	ldr	r3, [r3, #0]
   b67fa:	699b      	ldr	r3, [r3, #24]
   b67fc:	9301      	str	r3, [sp, #4]
   b67fe:	bd08      	pop	{r3, pc}
   b6800:	0003023c 	.word	0x0003023c

000b6804 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6804:	b508      	push	{r3, lr}
   b6806:	4b02      	ldr	r3, [pc, #8]	; (b6810 <hal_usart_flush+0xc>)
   b6808:	681b      	ldr	r3, [r3, #0]
   b680a:	69db      	ldr	r3, [r3, #28]
   b680c:	9301      	str	r3, [sp, #4]
   b680e:	bd08      	pop	{r3, pc}
   b6810:	0003023c 	.word	0x0003023c

000b6814 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6814:	b508      	push	{r3, lr}
   b6816:	4b02      	ldr	r3, [pc, #8]	; (b6820 <hal_usart_is_enabled+0xc>)
   b6818:	681b      	ldr	r3, [r3, #0]
   b681a:	6a1b      	ldr	r3, [r3, #32]
   b681c:	9301      	str	r3, [sp, #4]
   b681e:	bd08      	pop	{r3, pc}
   b6820:	0003023c 	.word	0x0003023c

000b6824 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6824:	b508      	push	{r3, lr}
   b6826:	4b02      	ldr	r3, [pc, #8]	; (b6830 <hal_usart_available_data_for_write+0xc>)
   b6828:	681b      	ldr	r3, [r3, #0]
   b682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b682c:	9301      	str	r3, [sp, #4]
   b682e:	bd08      	pop	{r3, pc}
   b6830:	0003023c 	.word	0x0003023c

000b6834 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6834:	b508      	push	{r3, lr}
   b6836:	4b02      	ldr	r3, [pc, #8]	; (b6840 <hal_usart_init_ex+0xc>)
   b6838:	681b      	ldr	r3, [r3, #0]
   b683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b683c:	9301      	str	r3, [sp, #4]
   b683e:	bd08      	pop	{r3, pc}
   b6840:	0003023c 	.word	0x0003023c

000b6844 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6844:	b508      	push	{r3, lr}
   b6846:	4b02      	ldr	r3, [pc, #8]	; (b6850 <HAL_USB_USART_Init+0xc>)
   b6848:	681b      	ldr	r3, [r3, #0]
   b684a:	681b      	ldr	r3, [r3, #0]
   b684c:	9301      	str	r3, [sp, #4]
   b684e:	bd08      	pop	{r3, pc}
   b6850:	0003024c 	.word	0x0003024c

000b6854 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6854:	b508      	push	{r3, lr}
   b6856:	4b02      	ldr	r3, [pc, #8]	; (b6860 <HAL_USB_USART_Begin+0xc>)
   b6858:	681b      	ldr	r3, [r3, #0]
   b685a:	685b      	ldr	r3, [r3, #4]
   b685c:	9301      	str	r3, [sp, #4]
   b685e:	bd08      	pop	{r3, pc}
   b6860:	0003024c 	.word	0x0003024c

000b6864 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6864:	b508      	push	{r3, lr}
   b6866:	4b02      	ldr	r3, [pc, #8]	; (b6870 <HAL_USB_USART_Available_Data+0xc>)
   b6868:	681b      	ldr	r3, [r3, #0]
   b686a:	691b      	ldr	r3, [r3, #16]
   b686c:	9301      	str	r3, [sp, #4]
   b686e:	bd08      	pop	{r3, pc}
   b6870:	0003024c 	.word	0x0003024c

000b6874 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6874:	b508      	push	{r3, lr}
   b6876:	4b02      	ldr	r3, [pc, #8]	; (b6880 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6878:	681b      	ldr	r3, [r3, #0]
   b687a:	695b      	ldr	r3, [r3, #20]
   b687c:	9301      	str	r3, [sp, #4]
   b687e:	bd08      	pop	{r3, pc}
   b6880:	0003024c 	.word	0x0003024c

000b6884 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6884:	b508      	push	{r3, lr}
   b6886:	4b02      	ldr	r3, [pc, #8]	; (b6890 <HAL_USB_USART_Receive_Data+0xc>)
   b6888:	681b      	ldr	r3, [r3, #0]
   b688a:	699b      	ldr	r3, [r3, #24]
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	bd08      	pop	{r3, pc}
   b6890:	0003024c 	.word	0x0003024c

000b6894 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6894:	b508      	push	{r3, lr}
   b6896:	4b02      	ldr	r3, [pc, #8]	; (b68a0 <HAL_USB_USART_Send_Data+0xc>)
   b6898:	681b      	ldr	r3, [r3, #0]
   b689a:	69db      	ldr	r3, [r3, #28]
   b689c:	9301      	str	r3, [sp, #4]
   b689e:	bd08      	pop	{r3, pc}
   b68a0:	0003024c 	.word	0x0003024c

000b68a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b68a4:	b508      	push	{r3, lr}
   b68a6:	4b02      	ldr	r3, [pc, #8]	; (b68b0 <HAL_USB_USART_Flush_Data+0xc>)
   b68a8:	681b      	ldr	r3, [r3, #0]
   b68aa:	6a1b      	ldr	r3, [r3, #32]
   b68ac:	9301      	str	r3, [sp, #4]
   b68ae:	bd08      	pop	{r3, pc}
   b68b0:	0003024c 	.word	0x0003024c

000b68b4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <panic_+0xc>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b68bc:	9301      	str	r3, [sp, #4]
   b68be:	bd08      	pop	{r3, pc}
   b68c0:	00030260 	.word	0x00030260

000b68c4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b68c4:	b508      	push	{r3, lr}
   b68c6:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <log_message+0xc>)
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b68cc:	9301      	str	r3, [sp, #4]
   b68ce:	bd08      	pop	{r3, pc}
   b68d0:	00030260 	.word	0x00030260

000b68d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b68d4:	b508      	push	{r3, lr}
   b68d6:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <set_system_mode+0xc>)
   b68d8:	681b      	ldr	r3, [r3, #0]
   b68da:	685b      	ldr	r3, [r3, #4]
   b68dc:	9301      	str	r3, [sp, #4]
   b68de:	bd08      	pop	{r3, pc}
   b68e0:	00030220 	.word	0x00030220

000b68e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <system_delay_ms+0xc>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	695b      	ldr	r3, [r3, #20]
   b68ec:	9301      	str	r3, [sp, #4]
   b68ee:	bd08      	pop	{r3, pc}
   b68f0:	00030220 	.word	0x00030220

000b68f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b03      	ldr	r3, [pc, #12]	; (b6904 <system_ctrl_set_app_request_handler+0x10>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b68fe:	9301      	str	r3, [sp, #4]
   b6900:	bd08      	pop	{r3, pc}
   b6902:	0000      	.short	0x0000
   b6904:	00030220 	.word	0x00030220

000b6908 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6908:	b508      	push	{r3, lr}
   b690a:	4b03      	ldr	r3, [pc, #12]	; (b6918 <system_ctrl_set_result+0x10>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6912:	9301      	str	r3, [sp, #4]
   b6914:	bd08      	pop	{r3, pc}
   b6916:	0000      	.short	0x0000
   b6918:	00030220 	.word	0x00030220

000b691c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	00030244 	.word	0x00030244

000b692c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <network_connect+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	685b      	ldr	r3, [r3, #4]
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	00030240 	.word	0x00030240

000b693c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <network_connecting+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	689b      	ldr	r3, [r3, #8]
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	00030240 	.word	0x00030240

000b694c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <network_disconnect+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	68db      	ldr	r3, [r3, #12]
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	00030240 	.word	0x00030240

000b695c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <network_ready+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	691b      	ldr	r3, [r3, #16]
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	00030240 	.word	0x00030240

000b696c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <network_on+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	695b      	ldr	r3, [r3, #20]
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	00030240 	.word	0x00030240

000b697c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <network_off+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	699b      	ldr	r3, [r3, #24]
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	00030240 	.word	0x00030240

000b698c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <network_listen+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	69db      	ldr	r3, [r3, #28]
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	00030240 	.word	0x00030240

000b699c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <network_listening+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	6a1b      	ldr	r3, [r3, #32]
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030240 	.word	0x00030240

000b69ac <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <network_set_credentials+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	00030240 	.word	0x00030240

000b69bc <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <network_set_listen_timeout+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	00030240 	.word	0x00030240

000b69cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <network_get_listen_timeout+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	00030240 	.word	0x00030240

000b69dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <network_is_on+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	00030240 	.word	0x00030240

000b69ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <network_is_off+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	00030240 	.word	0x00030240

000b69fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <malloc+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	681b      	ldr	r3, [r3, #0]
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	0003021c 	.word	0x0003021c

000b6a0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <free+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	685b      	ldr	r3, [r3, #4]
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	0003021c 	.word	0x0003021c

000b6a1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <realloc+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	689b      	ldr	r3, [r3, #8]
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	0003021c 	.word	0x0003021c

000b6a2c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <vsnprintf+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	0003021c 	.word	0x0003021c

000b6a3c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <abort+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	0003021c 	.word	0x0003021c

000b6a4c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <__errno+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	0003021c 	.word	0x0003021c

000b6a5c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <__assert_func+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	0003021c 	.word	0x0003021c

000b6a6c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <newlib_impure_ptr_callback+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	0003021c 	.word	0x0003021c

000b6a7c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6a7c:	428a      	cmp	r2, r1
{
   b6a7e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6a80:	d007      	beq.n	b6a92 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b6a82:	1a44      	subs	r4, r0, r1
   b6a84:	9802      	ldr	r0, [sp, #8]
   b6a86:	1ac0      	subs	r0, r0, r3
   b6a88:	4344      	muls	r4, r0
   b6a8a:	1a50      	subs	r0, r2, r1
   b6a8c:	fb94 f0f0 	sdiv	r0, r4, r0
   b6a90:	4418      	add	r0, r3
}
   b6a92:	bd10      	pop	{r4, pc}

000b6a94 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6a94:	2100      	movs	r1, #0
   b6a96:	f7ff bf25 	b.w	b68e4 <system_delay_ms>

000b6a9a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6a9a:	b510      	push	{r4, lr}
      if (_M_manager)
   b6a9c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6a9e:	4604      	mov	r4, r0
      if (_M_manager)
   b6aa0:	b113      	cbz	r3, b6aa8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6aa2:	2203      	movs	r2, #3
   b6aa4:	4601      	mov	r1, r0
   b6aa6:	4798      	blx	r3
    }
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	bd10      	pop	{r4, pc}

000b6aac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6aac:	4802      	ldr	r0, [pc, #8]	; (b6ab8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6aae:	2300      	movs	r3, #0
   b6ab0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6ab2:	f7ff bcff 	b.w	b64b4 <os_mutex_recursive_create>
   b6ab6:	bf00      	nop
   b6ab8:	2003e634 	.word	0x2003e634

000b6abc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6abc:	2200      	movs	r2, #0
   b6abe:	6840      	ldr	r0, [r0, #4]
   b6ac0:	4611      	mov	r1, r2
   b6ac2:	f7ff bf6b 	b.w	b699c <network_listening>

000b6ac6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6ac6:	2200      	movs	r2, #0
   b6ac8:	6840      	ldr	r0, [r0, #4]
   b6aca:	4611      	mov	r1, r2
   b6acc:	f7ff bf7e 	b.w	b69cc <network_get_listen_timeout>

000b6ad0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ad0:	6840      	ldr	r0, [r0, #4]
   b6ad2:	2200      	movs	r2, #0
   b6ad4:	f7ff bf72 	b.w	b69bc <network_set_listen_timeout>

000b6ad8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ad8:	6840      	ldr	r0, [r0, #4]
   b6ada:	2200      	movs	r2, #0
   b6adc:	f081 0101 	eor.w	r1, r1, #1
   b6ae0:	f7ff bf54 	b.w	b698c <network_listen>

000b6ae4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ae4:	2300      	movs	r3, #0
   b6ae6:	6840      	ldr	r0, [r0, #4]
   b6ae8:	461a      	mov	r2, r3
   b6aea:	4619      	mov	r1, r3
   b6aec:	f7ff bf46 	b.w	b697c <network_off>

000b6af0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6af0:	2300      	movs	r3, #0
   b6af2:	6840      	ldr	r0, [r0, #4]
   b6af4:	461a      	mov	r2, r3
   b6af6:	4619      	mov	r1, r3
   b6af8:	f7ff bf38 	b.w	b696c <network_on>

000b6afc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6afc:	2200      	movs	r2, #0
   b6afe:	6840      	ldr	r0, [r0, #4]
   b6b00:	4611      	mov	r1, r2
   b6b02:	f7ff bf2b 	b.w	b695c <network_ready>

000b6b06 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6b06:	2200      	movs	r2, #0
   b6b08:	6840      	ldr	r0, [r0, #4]
   b6b0a:	4611      	mov	r1, r2
   b6b0c:	f7ff bf16 	b.w	b693c <network_connecting>

000b6b10 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b10:	6840      	ldr	r0, [r0, #4]
   b6b12:	2200      	movs	r2, #0
   b6b14:	2102      	movs	r1, #2
   b6b16:	f7ff bf19 	b.w	b694c <network_disconnect>

000b6b1a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6b1a:	2300      	movs	r3, #0
   b6b1c:	6840      	ldr	r0, [r0, #4]
   b6b1e:	461a      	mov	r2, r3
   b6b20:	f7ff bf04 	b.w	b692c <network_connect>

000b6b24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6b24:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6b26:	2203      	movs	r2, #3
   b6b28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6b2a:	4a02      	ldr	r2, [pc, #8]	; (b6b34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6b2c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6b2e:	4770      	bx	lr
   b6b30:	2003e638 	.word	0x2003e638
   b6b34:	000b991c 	.word	0x000b991c

000b6b38 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6b38:	4770      	bx	lr

000b6b3a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b3c:	4606      	mov	r6, r0
   b6b3e:	4615      	mov	r5, r2
   b6b40:	460c      	mov	r4, r1
   b6b42:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6b44:	42bc      	cmp	r4, r7
   b6b46:	d006      	beq.n	b6b56 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6b48:	6833      	ldr	r3, [r6, #0]
   b6b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6b4e:	689b      	ldr	r3, [r3, #8]
   b6b50:	4630      	mov	r0, r6
   b6b52:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6b54:	e7f6      	b.n	b6b44 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6b56:	4628      	mov	r0, r5
   b6b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b5a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6b5a:	7c00      	ldrb	r0, [r0, #16]
   b6b5c:	2200      	movs	r2, #0
   b6b5e:	f7ff bd41 	b.w	b65e4 <hal_i2c_write>

000b6b62 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6b62:	7c00      	ldrb	r0, [r0, #16]
   b6b64:	2100      	movs	r1, #0
   b6b66:	f7ff bd45 	b.w	b65f4 <hal_i2c_available>

000b6b6a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6b6a:	7c00      	ldrb	r0, [r0, #16]
   b6b6c:	2100      	movs	r1, #0
   b6b6e:	f7ff bd49 	b.w	b6604 <hal_i2c_read>

000b6b72 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6b72:	7c00      	ldrb	r0, [r0, #16]
   b6b74:	2100      	movs	r1, #0
   b6b76:	f7ff bd4d 	b.w	b6614 <hal_i2c_peek>

000b6b7a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6b7a:	7c00      	ldrb	r0, [r0, #16]
   b6b7c:	2100      	movs	r1, #0
   b6b7e:	f7ff bd51 	b.w	b6624 <hal_i2c_flush>

000b6b82 <_ZN7TwoWireD0Ev>:
   b6b82:	b510      	push	{r4, lr}
   b6b84:	2114      	movs	r1, #20
   b6b86:	4604      	mov	r4, r0
   b6b88:	f7fd fa89 	bl	b409e <_ZdlPvj>
   b6b8c:	4620      	mov	r0, r4
   b6b8e:	bd10      	pop	{r4, pc}

000b6b90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6b90:	b538      	push	{r3, r4, r5, lr}
   b6b92:	4604      	mov	r4, r0
   b6b94:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b9a:	2200      	movs	r2, #0
   b6b9c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6ba0:	4b09      	ldr	r3, [pc, #36]	; (b6bc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6ba2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ba4:	4608      	mov	r0, r1
   b6ba6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6ba8:	4629      	mov	r1, r5
   b6baa:	f7ff fd4b 	bl	b6644 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6bae:	30bf      	adds	r0, #191	; 0xbf
   b6bb0:	d108      	bne.n	b6bc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6bb2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6bb4:	07db      	lsls	r3, r3, #31
   b6bb6:	d505      	bpl.n	b6bc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6bb8:	6868      	ldr	r0, [r5, #4]
   b6bba:	f7ff ff27 	bl	b6a0c <free>
    free(conf.tx_buffer);
   b6bbe:	68e8      	ldr	r0, [r5, #12]
   b6bc0:	f7ff ff24 	bl	b6a0c <free>
}
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	bd38      	pop	{r3, r4, r5, pc}
   b6bc8:	000b9958 	.word	0x000b9958

000b6bcc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6bcc:	2300      	movs	r3, #0
   b6bce:	7c00      	ldrb	r0, [r0, #16]
   b6bd0:	461a      	mov	r2, r3
   b6bd2:	4619      	mov	r1, r3
   b6bd4:	f7ff bcee 	b.w	b65b4 <hal_i2c_begin>

000b6bd8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6bda:	2200      	movs	r2, #0
   b6bdc:	2314      	movs	r3, #20
   b6bde:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6be2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6be6:	780b      	ldrb	r3, [r1, #0]
   b6be8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6bec:	684b      	ldr	r3, [r1, #4]
   b6bee:	9303      	str	r3, [sp, #12]
   b6bf0:	68cb      	ldr	r3, [r1, #12]
   b6bf2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6bf4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6bf6:	7a0b      	ldrb	r3, [r1, #8]
   b6bf8:	9305      	str	r3, [sp, #20]
   b6bfa:	a901      	add	r1, sp, #4
   b6bfc:	f7ff fd2a 	bl	b6654 <hal_i2c_request_ex>
}
   b6c00:	b007      	add	sp, #28
   b6c02:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c06 <_ZN7TwoWire11requestFromEhjh>:
{
   b6c06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6c08:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6c0a:	f88d 1000 	strb.w	r1, [sp]
   b6c0e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6c12:	9103      	str	r1, [sp, #12]
   b6c14:	bf18      	it	ne
   b6c16:	2301      	movne	r3, #1
   b6c18:	4669      	mov	r1, sp
    size_ = size;
   b6c1a:	9201      	str	r2, [sp, #4]
   b6c1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6c20:	f7ff ffda 	bl	b6bd8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6c24:	b005      	add	sp, #20
   b6c26:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c2a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6c2a:	2301      	movs	r3, #1
   b6c2c:	f7ff bfeb 	b.w	b6c06 <_ZN7TwoWire11requestFromEhjh>

000b6c30 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6c30:	7c00      	ldrb	r0, [r0, #16]
   b6c32:	2200      	movs	r2, #0
   b6c34:	f7ff bcc6 	b.w	b65c4 <hal_i2c_begin_transmission>

000b6c38 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6c38:	b2c9      	uxtb	r1, r1
   b6c3a:	f7ff bff9 	b.w	b6c30 <_ZN7TwoWire17beginTransmissionEh>

000b6c3e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6c3e:	7c00      	ldrb	r0, [r0, #16]
   b6c40:	2200      	movs	r2, #0
   b6c42:	f7ff bcc7 	b.w	b65d4 <hal_i2c_end_transmission>

000b6c46 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6c46:	2101      	movs	r1, #1
   b6c48:	f7ff bff9 	b.w	b6c3e <_ZN7TwoWire15endTransmissionEh>

000b6c4c <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6c4c:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b6c4e:	b510      	push	{r4, lr}
   b6c50:	b90a      	cbnz	r2, b6c56 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b6c52:	f001 fa39 	bl	b80c8 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b6c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c5a:	68c3      	ldr	r3, [r0, #12]
   b6c5c:	4718      	bx	r3
	...

000b6c60 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b6c62:	4f10      	ldr	r7, [pc, #64]	; (b6ca4 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b6c64:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b6c68:	4606      	mov	r6, r0
   b6c6a:	460d      	mov	r5, r1
    delete handlers[pin];
   b6c6c:	b134      	cbz	r4, b6c7c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b6c6e:	4620      	mov	r0, r4
   b6c70:	f7ff ff13 	bl	b6a9a <_ZNSt14_Function_baseD1Ev>
   b6c74:	2110      	movs	r1, #16
   b6c76:	4620      	mov	r0, r4
   b6c78:	f7fd fa11 	bl	b409e <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b6c7c:	2010      	movs	r0, #16
   b6c7e:	f7fd fa0a 	bl	b4096 <_Znwj>
   b6c82:	4604      	mov	r4, r0
   b6c84:	b150      	cbz	r0, b6c9c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b6c86:	2300      	movs	r3, #0
   b6c88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6c8a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b6c8c:	b133      	cbz	r3, b6c9c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6c8e:	2202      	movs	r2, #2
   b6c90:	4629      	mov	r1, r5
   b6c92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6c94:	68eb      	ldr	r3, [r5, #12]
   b6c96:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6c98:	68ab      	ldr	r3, [r5, #8]
   b6c9a:	60a3      	str	r3, [r4, #8]
   b6c9c:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6ca4:	2003e640 	.word	0x2003e640

000b6ca8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6caa:	b087      	sub	sp, #28
   b6cac:	4605      	mov	r5, r0
   b6cae:	9103      	str	r1, [sp, #12]
   b6cb0:	4617      	mov	r7, r2
   b6cb2:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b6cb4:	f7ff fc5e 	bl	b6574 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b6cb8:	9903      	ldr	r1, [sp, #12]
   b6cba:	4628      	mov	r0, r5
   b6cbc:	f7ff ffd0 	bl	b6c60 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b6cc0:	4604      	mov	r4, r0
   b6cc2:	b1e8      	cbz	r0, b6d00 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b6cc4:	2100      	movs	r1, #0
  if (priority >= 0) {
   b6cc6:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6cc8:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b6ccc:	f8ad 1015 	strh.w	r1, [sp, #21]
   b6cd0:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6cd4:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b6cd8:	bfa2      	ittt	ge
   b6cda:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b6cdc:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b6ce0:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6ce4:	9100      	str	r1, [sp, #0]
   b6ce6:	4602      	mov	r2, r0
   b6ce8:	4907      	ldr	r1, [pc, #28]	; (b6d08 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b6cea:	bfa8      	it	ge
   b6cec:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6cf0:	463b      	mov	r3, r7
   b6cf2:	4628      	mov	r0, r5
   b6cf4:	f7ff fc36 	bl	b6564 <HAL_Interrupts_Attach>
   b6cf8:	b110      	cbz	r0, b6d00 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b6cfa:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b6cfc:	b007      	add	sp, #28
   b6cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b6d00:	1e20      	subs	r0, r4, #0
   b6d02:	bf18      	it	ne
   b6d04:	2001      	movne	r0, #1
   b6d06:	e7f9      	b.n	b6cfc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b6d08:	000b6c4d 	.word	0x000b6c4d

000b6d0c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b6d0c:	f7ff bc42 	b.w	b6594 <HAL_Interrupts_Disable_All>

000b6d10 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b6d10:	f7ff bc38 	b.w	b6584 <HAL_Interrupts_Enable_All>

000b6d14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d14:	4770      	bx	lr

000b6d16 <_ZN9IPAddressD0Ev>:
   b6d16:	b510      	push	{r4, lr}
   b6d18:	2118      	movs	r1, #24
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	f7fd f9bf 	bl	b409e <_ZdlPvj>
   b6d20:	4620      	mov	r0, r4
   b6d22:	bd10      	pop	{r4, pc}

000b6d24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d26:	7d03      	ldrb	r3, [r0, #20]
   b6d28:	2b06      	cmp	r3, #6
{
   b6d2a:	b08d      	sub	sp, #52	; 0x34
   b6d2c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d2e:	f100 0704 	add.w	r7, r0, #4
   b6d32:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d36:	d012      	beq.n	b6d5e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d38:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d40:	220a      	movs	r2, #10
   b6d42:	4630      	mov	r0, r6
   b6d44:	f000 f973 	bl	b702e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d48:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d4a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d4c:	d019      	beq.n	b6d82 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d4e:	2c00      	cmp	r4, #0
   b6d50:	d0f4      	beq.n	b6d3c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d52:	212e      	movs	r1, #46	; 0x2e
   b6d54:	4630      	mov	r0, r6
   b6d56:	f000 f951 	bl	b6ffc <_ZN5Print5printEc>
   b6d5a:	4404      	add	r4, r0
   b6d5c:	e7ee      	b.n	b6d3c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d5e:	232f      	movs	r3, #47	; 0x2f
   b6d60:	466a      	mov	r2, sp
   b6d62:	4639      	mov	r1, r7
   b6d64:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d66:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d6a:	f7ff fc83 	bl	b6674 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d6e:	4668      	mov	r0, sp
   b6d70:	f001 ff12 	bl	b8b98 <strlen>
   b6d74:	6833      	ldr	r3, [r6, #0]
   b6d76:	4602      	mov	r2, r0
   b6d78:	68db      	ldr	r3, [r3, #12]
   b6d7a:	4669      	mov	r1, sp
   b6d7c:	4630      	mov	r0, r6
   b6d7e:	4798      	blx	r3
   b6d80:	4604      	mov	r4, r0
    }
    return n;
}
   b6d82:	4620      	mov	r0, r4
   b6d84:	b00d      	add	sp, #52	; 0x34
   b6d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d88:	b510      	push	{r4, lr}
   b6d8a:	4b05      	ldr	r3, [pc, #20]	; (b6da0 <_ZN9IPAddressC1Ev+0x18>)
   b6d8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d8e:	2211      	movs	r2, #17
   b6d90:	f840 3b04 	str.w	r3, [r0], #4
   b6d94:	2100      	movs	r1, #0
   b6d96:	f001 feb7 	bl	b8b08 <memset>
}
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	bd10      	pop	{r4, pc}
   b6d9e:	bf00      	nop
   b6da0:	000b9980 	.word	0x000b9980

000b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6da4:	4603      	mov	r3, r0
   b6da6:	4a07      	ldr	r2, [pc, #28]	; (b6dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6da8:	b510      	push	{r4, lr}
   b6daa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6dae:	f101 0210 	add.w	r2, r1, #16
   b6db2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6db6:	f843 4b04 	str.w	r4, [r3], #4
   b6dba:	4291      	cmp	r1, r2
   b6dbc:	d1f9      	bne.n	b6db2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6dbe:	780a      	ldrb	r2, [r1, #0]
   b6dc0:	701a      	strb	r2, [r3, #0]
}
   b6dc2:	bd10      	pop	{r4, pc}
   b6dc4:	000b9980 	.word	0x000b9980

000b6dc8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6dc8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6dca:	2b04      	cmp	r3, #4
   b6dcc:	d104      	bne.n	b6dd8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6dce:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6dd0:	3800      	subs	r0, #0
   b6dd2:	bf18      	it	ne
   b6dd4:	2001      	movne	r0, #1
   b6dd6:	4770      	bx	lr
    } else if (version() == 6) {
   b6dd8:	2b06      	cmp	r3, #6
   b6dda:	d107      	bne.n	b6dec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ddc:	6843      	ldr	r3, [r0, #4]
   b6dde:	b93b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de0:	6883      	ldr	r3, [r0, #8]
   b6de2:	b92b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de4:	68c3      	ldr	r3, [r0, #12]
   b6de6:	b91b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de8:	6900      	ldr	r0, [r0, #16]
   b6dea:	e7f1      	b.n	b6dd0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6dec:	2000      	movs	r0, #0
   b6dee:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6df0:	2001      	movs	r0, #1
}
   b6df2:	4770      	bx	lr

000b6df4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6df4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6df6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6dfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6e02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6e06:	2304      	movs	r3, #4
   b6e08:	6041      	str	r1, [r0, #4]
   b6e0a:	7503      	strb	r3, [r0, #20]
}
   b6e0c:	bd10      	pop	{r4, pc}
	...

000b6e10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e10:	b507      	push	{r0, r1, r2, lr}
   b6e12:	4b06      	ldr	r3, [pc, #24]	; (b6e2c <_ZN9IPAddressC1EPKh+0x1c>)
   b6e14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e16:	78cb      	ldrb	r3, [r1, #3]
   b6e18:	9300      	str	r3, [sp, #0]
   b6e1a:	788b      	ldrb	r3, [r1, #2]
   b6e1c:	784a      	ldrb	r2, [r1, #1]
   b6e1e:	7809      	ldrb	r1, [r1, #0]
   b6e20:	f7ff ffe8 	bl	b6df4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e24:	b003      	add	sp, #12
   b6e26:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e2a:	bf00      	nop
   b6e2c:	000b9980 	.word	0x000b9980

000b6e30 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6e30:	4b01      	ldr	r3, [pc, #4]	; (b6e38 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6e32:	4a02      	ldr	r2, [pc, #8]	; (b6e3c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e34:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e36:	4770      	bx	lr
   b6e38:	2003e6d0 	.word	0x2003e6d0
   b6e3c:	000b998c 	.word	0x000b998c

000b6e40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e40:	2300      	movs	r3, #0
   b6e42:	6840      	ldr	r0, [r0, #4]
   b6e44:	461a      	mov	r2, r3
   b6e46:	f7ff bd71 	b.w	b692c <network_connect>

000b6e4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e4a:	6840      	ldr	r0, [r0, #4]
   b6e4c:	2200      	movs	r2, #0
   b6e4e:	2102      	movs	r1, #2
   b6e50:	f7ff bd7c 	b.w	b694c <network_disconnect>

000b6e54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e54:	2200      	movs	r2, #0
   b6e56:	6840      	ldr	r0, [r0, #4]
   b6e58:	4611      	mov	r1, r2
   b6e5a:	f7ff bd6f 	b.w	b693c <network_connecting>

000b6e5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e5e:	2200      	movs	r2, #0
   b6e60:	6840      	ldr	r0, [r0, #4]
   b6e62:	4611      	mov	r1, r2
   b6e64:	f7ff bd7a 	b.w	b695c <network_ready>

000b6e68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e68:	2300      	movs	r3, #0
   b6e6a:	6840      	ldr	r0, [r0, #4]
   b6e6c:	461a      	mov	r2, r3
   b6e6e:	4619      	mov	r1, r3
   b6e70:	f7ff bd7c 	b.w	b696c <network_on>

000b6e74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e74:	2300      	movs	r3, #0
   b6e76:	6840      	ldr	r0, [r0, #4]
   b6e78:	461a      	mov	r2, r3
   b6e7a:	4619      	mov	r1, r3
   b6e7c:	f7ff bd7e 	b.w	b697c <network_off>

000b6e80 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e80:	6840      	ldr	r0, [r0, #4]
   b6e82:	2100      	movs	r1, #0
   b6e84:	f7ff bdaa 	b.w	b69dc <network_is_on>

000b6e88 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e88:	6840      	ldr	r0, [r0, #4]
   b6e8a:	2100      	movs	r1, #0
   b6e8c:	f7ff bdae 	b.w	b69ec <network_is_off>

000b6e90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e90:	6840      	ldr	r0, [r0, #4]
   b6e92:	2200      	movs	r2, #0
   b6e94:	f081 0101 	eor.w	r1, r1, #1
   b6e98:	f7ff bd78 	b.w	b698c <network_listen>

000b6e9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e9c:	6840      	ldr	r0, [r0, #4]
   b6e9e:	2200      	movs	r2, #0
   b6ea0:	f7ff bd8c 	b.w	b69bc <network_set_listen_timeout>

000b6ea4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6ea4:	2200      	movs	r2, #0
   b6ea6:	6840      	ldr	r0, [r0, #4]
   b6ea8:	4611      	mov	r1, r2
   b6eaa:	f7ff bd8f 	b.w	b69cc <network_get_listen_timeout>

000b6eae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6eae:	2200      	movs	r2, #0
   b6eb0:	6840      	ldr	r0, [r0, #4]
   b6eb2:	4611      	mov	r1, r2
   b6eb4:	f7ff bd72 	b.w	b699c <network_listening>

000b6eb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ebc:	b095      	sub	sp, #84	; 0x54
   b6ebe:	4614      	mov	r4, r2
   b6ec0:	460d      	mov	r5, r1
   b6ec2:	4607      	mov	r7, r0
    IPAddress addr;
   b6ec4:	f7ff ff60 	bl	b6d88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6ec8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6eca:	221c      	movs	r2, #28
   b6ecc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6ece:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6ed0:	f001 fe1a 	bl	b8b08 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ed4:	2340      	movs	r3, #64	; 0x40
   b6ed6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6ed8:	4620      	mov	r0, r4
   b6eda:	466b      	mov	r3, sp
   b6edc:	aa0c      	add	r2, sp, #48	; 0x30
   b6ede:	2100      	movs	r1, #0
   b6ee0:	f7ff fbe8 	bl	b66b4 <netdb_getaddrinfo>
    if (!r) {
   b6ee4:	4604      	mov	r4, r0
   b6ee6:	2800      	cmp	r0, #0
   b6ee8:	d14b      	bne.n	b6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eea:	4602      	mov	r2, r0
   b6eec:	2101      	movs	r1, #1
   b6eee:	6868      	ldr	r0, [r5, #4]
   b6ef0:	f7ff fd34 	bl	b695c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ef4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ef6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ef8:	4622      	mov	r2, r4
   b6efa:	6868      	ldr	r0, [r5, #4]
   b6efc:	f7ff fd2e 	bl	b695c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f00:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6f02:	4681      	mov	r9, r0
        bool ok = false;
   b6f04:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f06:	2e00      	cmp	r6, #0
   b6f08:	d03b      	beq.n	b6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6f0a:	2900      	cmp	r1, #0
   b6f0c:	d139      	bne.n	b6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6f0e:	6873      	ldr	r3, [r6, #4]
   b6f10:	2b02      	cmp	r3, #2
   b6f12:	d003      	beq.n	b6f1c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6f14:	2b0a      	cmp	r3, #10
   b6f16:	d011      	beq.n	b6f3c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6f18:	69f6      	ldr	r6, [r6, #28]
   b6f1a:	e7f4      	b.n	b6f06 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6f1c:	f1b8 0f00 	cmp.w	r8, #0
   b6f20:	d0fa      	beq.n	b6f18 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6f22:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6f24:	a806      	add	r0, sp, #24
   b6f26:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6f28:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6f2a:	f7ff ff71 	bl	b6e10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f30:	1d3c      	adds	r4, r7, #4
   b6f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f34:	682b      	ldr	r3, [r5, #0]
   b6f36:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f38:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6f3a:	e7ed      	b.n	b6f18 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6f3c:	f1b9 0f00 	cmp.w	r9, #0
   b6f40:	d0ea      	beq.n	b6f18 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f42:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f44:	2210      	movs	r2, #16
   b6f46:	a801      	add	r0, sp, #4
   b6f48:	f001 fdde 	bl	b8b08 <memset>
                    a.v = 6;
   b6f4c:	2306      	movs	r3, #6
   b6f4e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f52:	ad01      	add	r5, sp, #4
   b6f54:	f104 0308 	add.w	r3, r4, #8
   b6f58:	3418      	adds	r4, #24
   b6f5a:	6818      	ldr	r0, [r3, #0]
   b6f5c:	6859      	ldr	r1, [r3, #4]
   b6f5e:	462a      	mov	r2, r5
   b6f60:	c203      	stmia	r2!, {r0, r1}
   b6f62:	3308      	adds	r3, #8
   b6f64:	42a3      	cmp	r3, r4
   b6f66:	4615      	mov	r5, r2
   b6f68:	d1f7      	bne.n	b6f5a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f6a:	a901      	add	r1, sp, #4
   b6f6c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f6e:	ad07      	add	r5, sp, #28
   b6f70:	f7ff ff18 	bl	b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f76:	1d3c      	adds	r4, r7, #4
   b6f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f7a:	682b      	ldr	r3, [r5, #0]
   b6f7c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f7e:	4649      	mov	r1, r9
   b6f80:	e7ca      	b.n	b6f18 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f82:	9800      	ldr	r0, [sp, #0]
   b6f84:	f7ff fb8e 	bl	b66a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f88:	4638      	mov	r0, r7
   b6f8a:	b015      	add	sp, #84	; 0x54
   b6f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f90:	4b02      	ldr	r3, [pc, #8]	; (b6f9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f92:	4a03      	ldr	r2, [pc, #12]	; (b6fa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f94:	601a      	str	r2, [r3, #0]
   b6f96:	2200      	movs	r2, #0
   b6f98:	605a      	str	r2, [r3, #4]

} // spark
   b6f9a:	4770      	bx	lr
   b6f9c:	2003e6d4 	.word	0x2003e6d4
   b6fa0:	000b9998 	.word	0x000b9998

000b6fa4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fa6:	4606      	mov	r6, r0
   b6fa8:	460d      	mov	r5, r1
  size_t n = 0;
   b6faa:	188f      	adds	r7, r1, r2
   b6fac:	2400      	movs	r4, #0
  while (size--) {
   b6fae:	42bd      	cmp	r5, r7
   b6fb0:	d00c      	beq.n	b6fcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6fb2:	6833      	ldr	r3, [r6, #0]
   b6fb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6fb8:	689b      	ldr	r3, [r3, #8]
   b6fba:	4630      	mov	r0, r6
   b6fbc:	4798      	blx	r3
     if (chunk>=0)
   b6fbe:	1e03      	subs	r3, r0, #0
   b6fc0:	db01      	blt.n	b6fc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6fc2:	441c      	add	r4, r3
  while (size--) {
   b6fc4:	e7f3      	b.n	b6fae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6fc6:	2c00      	cmp	r4, #0
   b6fc8:	bf08      	it	eq
   b6fca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6fcc:	4620      	mov	r0, r4
   b6fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6fd0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6fd0:	b513      	push	{r0, r1, r4, lr}
   b6fd2:	4604      	mov	r4, r0
    }
   b6fd4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6fd6:	b159      	cbz	r1, b6ff0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6fd8:	9101      	str	r1, [sp, #4]
   b6fda:	f001 fddd 	bl	b8b98 <strlen>
   b6fde:	6823      	ldr	r3, [r4, #0]
   b6fe0:	9901      	ldr	r1, [sp, #4]
   b6fe2:	68db      	ldr	r3, [r3, #12]
   b6fe4:	4602      	mov	r2, r0
   b6fe6:	4620      	mov	r0, r4
    }
   b6fe8:	b002      	add	sp, #8
   b6fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6fee:	4718      	bx	r3
    }
   b6ff0:	b002      	add	sp, #8
   b6ff2:	bd10      	pop	{r4, pc}

000b6ff4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ff4:	b508      	push	{r3, lr}
  return write(str);
   b6ff6:	f7ff ffeb 	bl	b6fd0 <_ZN5Print5writeEPKc>
}
   b6ffa:	bd08      	pop	{r3, pc}

000b6ffc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6ffc:	6803      	ldr	r3, [r0, #0]
   b6ffe:	689b      	ldr	r3, [r3, #8]
   b7000:	4718      	bx	r3

000b7002 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7002:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7004:	210d      	movs	r1, #13
{
   b7006:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7008:	f7ff fff8 	bl	b6ffc <_ZN5Print5printEc>
  n += print('\n');
   b700c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b700e:	4604      	mov	r4, r0
  n += print('\n');
   b7010:	4628      	mov	r0, r5
   b7012:	f7ff fff3 	bl	b6ffc <_ZN5Print5printEc>
  return n;
}
   b7016:	4420      	add	r0, r4
   b7018:	bd38      	pop	{r3, r4, r5, pc}

000b701a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b701a:	b538      	push	{r3, r4, r5, lr}
   b701c:	4605      	mov	r5, r0
  return write(str);
   b701e:	f7ff ffd7 	bl	b6fd0 <_ZN5Print5writeEPKc>
   b7022:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7024:	4628      	mov	r0, r5
   b7026:	f7ff ffec 	bl	b7002 <_ZN5Print7printlnEv>
  return n;
}
   b702a:	4420      	add	r0, r4
   b702c:	bd38      	pop	{r3, r4, r5, pc}

000b702e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b702e:	b530      	push	{r4, r5, lr}
   b7030:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7032:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7034:	2a01      	cmp	r2, #1
  *str = '\0';
   b7036:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b703a:	bf98      	it	ls
   b703c:	220a      	movls	r2, #10
   b703e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7040:	460d      	mov	r5, r1
   b7042:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7046:	fb01 5312 	mls	r3, r1, r2, r5
   b704a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b704e:	2b09      	cmp	r3, #9
   b7050:	bf94      	ite	ls
   b7052:	3330      	addls	r3, #48	; 0x30
   b7054:	3337      	addhi	r3, #55	; 0x37
   b7056:	b2db      	uxtb	r3, r3
  } while(n);
   b7058:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b705a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b705e:	d9ef      	bls.n	b7040 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7060:	4621      	mov	r1, r4
   b7062:	f7ff ffb5 	bl	b6fd0 <_ZN5Print5writeEPKc>
}
   b7066:	b00b      	add	sp, #44	; 0x2c
   b7068:	bd30      	pop	{r4, r5, pc}

000b706a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b706e:	b086      	sub	sp, #24
   b7070:	af00      	add	r7, sp, #0
   b7072:	4605      	mov	r5, r0
   b7074:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7076:	1d38      	adds	r0, r7, #4
   b7078:	2114      	movs	r1, #20
{
   b707a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b707c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b707e:	f7ff fcd5 	bl	b6a2c <vsnprintf>

    if (n<bufsize)
   b7082:	2813      	cmp	r0, #19
   b7084:	d80e      	bhi.n	b70a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7086:	1d39      	adds	r1, r7, #4
   b7088:	4628      	mov	r0, r5
   b708a:	f7ff ffa1 	bl	b6fd0 <_ZN5Print5writeEPKc>
   b708e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7090:	b11e      	cbz	r6, b709a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7092:	4628      	mov	r0, r5
   b7094:	f7ff ffb5 	bl	b7002 <_ZN5Print7printlnEv>
   b7098:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b709a:	4620      	mov	r0, r4
   b709c:	3718      	adds	r7, #24
   b709e:	46bd      	mov	sp, r7
   b70a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b70a4:	f100 0308 	add.w	r3, r0, #8
   b70a8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b70ac:	46e8      	mov	r8, sp
        char bigger[n+1];
   b70ae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b70b2:	4622      	mov	r2, r4
   b70b4:	1c41      	adds	r1, r0, #1
   b70b6:	683b      	ldr	r3, [r7, #0]
   b70b8:	4668      	mov	r0, sp
   b70ba:	f7ff fcb7 	bl	b6a2c <vsnprintf>
  return write(str);
   b70be:	4669      	mov	r1, sp
   b70c0:	4628      	mov	r0, r5
   b70c2:	f7ff ff85 	bl	b6fd0 <_ZN5Print5writeEPKc>
   b70c6:	4604      	mov	r4, r0
   b70c8:	46c5      	mov	sp, r8
   b70ca:	e7e1      	b.n	b7090 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b70cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b70cc:	4b01      	ldr	r3, [pc, #4]	; (b70d4 <_GLOBAL__sub_I_RGB+0x8>)
   b70ce:	2200      	movs	r2, #0
   b70d0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b70d2:	4770      	bx	lr
   b70d4:	2003e6dc 	.word	0x2003e6dc

000b70d8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b70d8:	2100      	movs	r1, #0
   b70da:	f7ff bb6b 	b.w	b67b4 <hal_spi_release>

000b70de <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b70de:	2100      	movs	r1, #0
   b70e0:	f7ff bb60 	b.w	b67a4 <hal_spi_acquire>

000b70e4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b70e4:	b510      	push	{r4, lr}
   b70e6:	4604      	mov	r4, r0
   b70e8:	4608      	mov	r0, r1
{
    _spi = spi;
   b70ea:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b70ec:	f7ff fb42 	bl	b6774 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b70f0:	2300      	movs	r3, #0
   b70f2:	6063      	str	r3, [r4, #4]
}
   b70f4:	4620      	mov	r0, r4
   b70f6:	bd10      	pop	{r4, pc}

000b70f8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b70f8:	b513      	push	{r0, r1, r4, lr}
   b70fa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b70fc:	7800      	ldrb	r0, [r0, #0]
   b70fe:	f7ff ffee 	bl	b70de <_ZN8SPIClass4lockEv.isra.0>
   b7102:	b958      	cbnz	r0, b711c <_ZN8SPIClass5beginEv+0x24>
   b7104:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7106:	9001      	str	r0, [sp, #4]
   b7108:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b710c:	f7ff fb0a 	bl	b6724 <hal_spi_begin>
        unlock();
   b7110:	9801      	ldr	r0, [sp, #4]
    }
}
   b7112:	b002      	add	sp, #8
   b7114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7118:	f7ff bfde 	b.w	b70d8 <_ZN8SPIClass6unlockEv.isra.0>
   b711c:	b002      	add	sp, #8
   b711e:	bd10      	pop	{r4, pc}

000b7120 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b7120:	b513      	push	{r0, r1, r4, lr}
   b7122:	4604      	mov	r4, r0
    if (!lock())
   b7124:	7800      	ldrb	r0, [r0, #0]
{
   b7126:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7128:	f7ff ffd9 	bl	b70de <_ZN8SPIClass4lockEv.isra.0>
   b712c:	9901      	ldr	r1, [sp, #4]
   b712e:	b948      	cbnz	r0, b7144 <_ZN8SPIClass11setBitOrderEh+0x24>
   b7130:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b7132:	9001      	str	r0, [sp, #4]
   b7134:	f7ff fafe 	bl	b6734 <hal_spi_set_bit_order>
        unlock();
   b7138:	9801      	ldr	r0, [sp, #4]
    }
}
   b713a:	b002      	add	sp, #8
   b713c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7140:	f7ff bfca 	b.w	b70d8 <_ZN8SPIClass6unlockEv.isra.0>
   b7144:	b002      	add	sp, #8
   b7146:	bd10      	pop	{r4, pc}

000b7148 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b7148:	b513      	push	{r0, r1, r4, lr}
   b714a:	4604      	mov	r4, r0
    if (!lock())
   b714c:	7800      	ldrb	r0, [r0, #0]
{
   b714e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7150:	f7ff ffc5 	bl	b70de <_ZN8SPIClass4lockEv.isra.0>
   b7154:	9901      	ldr	r1, [sp, #4]
   b7156:	b948      	cbnz	r0, b716c <_ZN8SPIClass11setDataModeEh+0x24>
   b7158:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b715a:	9001      	str	r0, [sp, #4]
   b715c:	f7ff faf2 	bl	b6744 <hal_spi_set_data_mode>
        unlock();
   b7160:	9801      	ldr	r0, [sp, #4]
    }
}
   b7162:	b002      	add	sp, #8
   b7164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7168:	f7ff bfb6 	b.w	b70d8 <_ZN8SPIClass6unlockEv.isra.0>
   b716c:	b002      	add	sp, #8
   b716e:	bd10      	pop	{r4, pc}

000b7170 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7170:	0840      	lsrs	r0, r0, #1
{
   b7172:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7174:	6018      	str	r0, [r3, #0]
   b7176:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7178:	6818      	ldr	r0, [r3, #0]
   b717a:	4288      	cmp	r0, r1
   b717c:	b2e5      	uxtb	r5, r4
   b717e:	d906      	bls.n	b718e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7180:	3401      	adds	r4, #1
   b7182:	2c08      	cmp	r4, #8
   b7184:	d002      	beq.n	b718c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7186:	0840      	lsrs	r0, r0, #1
   b7188:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b718a:	e7f5      	b.n	b7178 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b718c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7190:	5d5b      	ldrb	r3, [r3, r5]
   b7192:	7013      	strb	r3, [r2, #0]
}
   b7194:	bd30      	pop	{r4, r5, pc}
   b7196:	bf00      	nop
   b7198:	000b99cc 	.word	0x000b99cc

000b719c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71a0:	b088      	sub	sp, #32
    unsigned clock = 0;
   b71a2:	2300      	movs	r3, #0
{
   b71a4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b71a6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b71a8:	9302      	str	r3, [sp, #8]
{
   b71aa:	460e      	mov	r6, r1
   b71ac:	4617      	mov	r7, r2
    if (!lock())
   b71ae:	f7ff ff96 	bl	b70de <_ZN8SPIClass4lockEv.isra.0>
   b71b2:	4605      	mov	r5, r0
   b71b4:	bb00      	cbnz	r0, b71f8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b71b6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b71ba:	4601      	mov	r1, r0
   b71bc:	2214      	movs	r2, #20
   b71be:	a803      	add	r0, sp, #12
   b71c0:	f001 fca2 	bl	b8b08 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b71c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b71c6:	462a      	mov	r2, r5
   b71c8:	a903      	add	r1, sp, #12
   b71ca:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b71cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b71d0:	f7ff fae0 	bl	b6794 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b71d4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b71d6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b71da:	ab02      	add	r3, sp, #8
   b71dc:	f10d 0207 	add.w	r2, sp, #7
   b71e0:	fb07 f106 	mul.w	r1, r7, r6
   b71e4:	f7ff ffc4 	bl	b7170 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b71e8:	7820      	ldrb	r0, [r4, #0]
   b71ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b71ee:	f7ff fab1 	bl	b6754 <hal_spi_set_clock_divider>
        unlock();
   b71f2:	7820      	ldrb	r0, [r4, #0]
   b71f4:	f7ff ff70 	bl	b70d8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b71f8:	9802      	ldr	r0, [sp, #8]
   b71fa:	b008      	add	sp, #32
   b71fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7200 <_ZN8SPIClass15setClockDividerEh>:
{
   b7200:	b538      	push	{r3, r4, r5, lr}
   b7202:	4604      	mov	r4, r0
    if (!lock())
   b7204:	7800      	ldrb	r0, [r0, #0]
{
   b7206:	460d      	mov	r5, r1
    if (!lock())
   b7208:	f7ff ff69 	bl	b70de <_ZN8SPIClass4lockEv.isra.0>
   b720c:	4603      	mov	r3, r0
   b720e:	b9d0      	cbnz	r0, b7246 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b7210:	6861      	ldr	r1, [r4, #4]
   b7212:	b199      	cbz	r1, b723c <_ZN8SPIClass15setClockDividerEh+0x3c>
   b7214:	4a0c      	ldr	r2, [pc, #48]	; (b7248 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b7216:	f812 0b01 	ldrb.w	r0, [r2], #1
   b721a:	4285      	cmp	r5, r0
   b721c:	d002      	beq.n	b7224 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b721e:	3301      	adds	r3, #1
   b7220:	2b08      	cmp	r3, #8
   b7222:	d1f8      	bne.n	b7216 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b7224:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b7226:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b7228:	2201      	movs	r2, #1
   b722a:	40d9      	lsrs	r1, r3
   b722c:	4620      	mov	r0, r4
   b722e:	f7ff ffb5 	bl	b719c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b7232:	7820      	ldrb	r0, [r4, #0]
}
   b7234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b7238:	f7ff bf4e 	b.w	b70d8 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b723c:	7820      	ldrb	r0, [r4, #0]
   b723e:	4629      	mov	r1, r5
   b7240:	f7ff fa88 	bl	b6754 <hal_spi_set_clock_divider>
   b7244:	e7f5      	b.n	b7232 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b7246:	bd38      	pop	{r3, r4, r5, pc}
   b7248:	000b99cc 	.word	0x000b99cc

000b724c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b724c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b724e:	7800      	ldrb	r0, [r0, #0]
   b7250:	f7ff fa88 	bl	b6764 <hal_spi_transfer>
}
   b7254:	b2c0      	uxtb	r0, r0
   b7256:	bd08      	pop	{r3, pc}

000b7258 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7258:	b510      	push	{r4, lr}
   b725a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b725c:	f7ff f94a 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7260:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7262:	6823      	ldr	r3, [r4, #0]
   b7264:	4620      	mov	r0, r4
   b7266:	695b      	ldr	r3, [r3, #20]
   b7268:	4798      	blx	r3
    if (c >= 0) return c;
   b726a:	2800      	cmp	r0, #0
   b726c:	da08      	bge.n	b7280 <_ZN6Stream9timedReadEv+0x28>
   b726e:	f7ff f941 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7272:	68e3      	ldr	r3, [r4, #12]
   b7274:	1ac0      	subs	r0, r0, r3
   b7276:	68a3      	ldr	r3, [r4, #8]
   b7278:	4298      	cmp	r0, r3
   b727a:	d3f2      	bcc.n	b7262 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b727c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7280:	bd10      	pop	{r4, pc}
	...

000b7284 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b7284:	b538      	push	{r3, r4, r5, lr}
   b7286:	460d      	mov	r5, r1
  String ret;
   b7288:	4907      	ldr	r1, [pc, #28]	; (b72a8 <_ZN6Stream10readStringEv+0x24>)
{
   b728a:	4604      	mov	r4, r0
  String ret;
   b728c:	f000 f859 	bl	b7342 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b7290:	4628      	mov	r0, r5
   b7292:	f7ff ffe1 	bl	b7258 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b7296:	2800      	cmp	r0, #0
   b7298:	db04      	blt.n	b72a4 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b729a:	b2c1      	uxtb	r1, r0
   b729c:	4620      	mov	r0, r4
   b729e:	f000 f8cb 	bl	b7438 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b72a2:	e7f5      	b.n	b7290 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b72a4:	4620      	mov	r0, r4
   b72a6:	bd38      	pop	{r3, r4, r5, pc}
   b72a8:	000b8f78 	.word	0x000b8f78

000b72ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b72ac:	b510      	push	{r4, lr}
   b72ae:	4604      	mov	r4, r0
{
	free(buffer);
   b72b0:	6800      	ldr	r0, [r0, #0]
   b72b2:	f7ff fbab 	bl	b6a0c <free>
}
   b72b6:	4620      	mov	r0, r4
   b72b8:	bd10      	pop	{r4, pc}

000b72ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b72ba:	b510      	push	{r4, lr}
   b72bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b72be:	6800      	ldr	r0, [r0, #0]
   b72c0:	b108      	cbz	r0, b72c6 <_ZN6String10invalidateEv+0xc>
   b72c2:	f7ff fba3 	bl	b6a0c <free>
	buffer = NULL;
   b72c6:	2300      	movs	r3, #0
	capacity = len = 0;
   b72c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b72cc:	6023      	str	r3, [r4, #0]
}
   b72ce:	bd10      	pop	{r4, pc}

000b72d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b72d0:	b538      	push	{r3, r4, r5, lr}
   b72d2:	4604      	mov	r4, r0
   b72d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b72d6:	6800      	ldr	r0, [r0, #0]
   b72d8:	3101      	adds	r1, #1
   b72da:	f7ff fb9f 	bl	b6a1c <realloc>
	if (newbuffer) {
   b72de:	b110      	cbz	r0, b72e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b72e0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b72e4:	2001      	movs	r0, #1
	}
	return 0;
}
   b72e6:	bd38      	pop	{r3, r4, r5, pc}

000b72e8 <_ZN6String7reserveEj>:
{
   b72e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b72ea:	6803      	ldr	r3, [r0, #0]
{
   b72ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b72ee:	b123      	cbz	r3, b72fa <_ZN6String7reserveEj+0x12>
   b72f0:	6843      	ldr	r3, [r0, #4]
   b72f2:	428b      	cmp	r3, r1
   b72f4:	d301      	bcc.n	b72fa <_ZN6String7reserveEj+0x12>
   b72f6:	2001      	movs	r0, #1
}
   b72f8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b72fa:	4620      	mov	r0, r4
   b72fc:	f7ff ffe8 	bl	b72d0 <_ZN6String12changeBufferEj>
   b7300:	2800      	cmp	r0, #0
   b7302:	d0f9      	beq.n	b72f8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7304:	68a3      	ldr	r3, [r4, #8]
   b7306:	2b00      	cmp	r3, #0
   b7308:	d1f5      	bne.n	b72f6 <_ZN6String7reserveEj+0xe>
   b730a:	6822      	ldr	r2, [r4, #0]
   b730c:	7013      	strb	r3, [r2, #0]
   b730e:	e7f2      	b.n	b72f6 <_ZN6String7reserveEj+0xe>

000b7310 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7310:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7312:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7314:	4611      	mov	r1, r2
   b7316:	9201      	str	r2, [sp, #4]
{
   b7318:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b731a:	f7ff ffe5 	bl	b72e8 <_ZN6String7reserveEj>
   b731e:	9a01      	ldr	r2, [sp, #4]
   b7320:	b928      	cbnz	r0, b732e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7322:	4620      	mov	r0, r4
   b7324:	f7ff ffc9 	bl	b72ba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7328:	4620      	mov	r0, r4
   b732a:	b003      	add	sp, #12
   b732c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b732e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7330:	4629      	mov	r1, r5
   b7332:	6820      	ldr	r0, [r4, #0]
   b7334:	f001 fbda 	bl	b8aec <memcpy>
	buffer[len] = 0;
   b7338:	6822      	ldr	r2, [r4, #0]
   b733a:	68a3      	ldr	r3, [r4, #8]
   b733c:	2100      	movs	r1, #0
   b733e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7340:	e7f2      	b.n	b7328 <_ZN6String4copyEPKcj+0x18>

000b7342 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7342:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7344:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7346:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b734a:	4604      	mov	r4, r0
	len = 0;
   b734c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b734e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7350:	b141      	cbz	r1, b7364 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7352:	4608      	mov	r0, r1
   b7354:	9101      	str	r1, [sp, #4]
   b7356:	f001 fc1f 	bl	b8b98 <strlen>
   b735a:	9901      	ldr	r1, [sp, #4]
   b735c:	4602      	mov	r2, r0
   b735e:	4620      	mov	r0, r4
   b7360:	f7ff ffd6 	bl	b7310 <_ZN6String4copyEPKcj>
}
   b7364:	4620      	mov	r0, r4
   b7366:	b002      	add	sp, #8
   b7368:	bd10      	pop	{r4, pc}

000b736a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b736a:	4288      	cmp	r0, r1
{
   b736c:	b510      	push	{r4, lr}
   b736e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7370:	d005      	beq.n	b737e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7372:	680b      	ldr	r3, [r1, #0]
   b7374:	b12b      	cbz	r3, b7382 <_ZN6StringaSERKS_+0x18>
   b7376:	688a      	ldr	r2, [r1, #8]
   b7378:	4619      	mov	r1, r3
   b737a:	f7ff ffc9 	bl	b7310 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b737e:	4620      	mov	r0, r4
   b7380:	bd10      	pop	{r4, pc}
	else invalidate();
   b7382:	f7ff ff9a 	bl	b72ba <_ZN6String10invalidateEv>
   b7386:	e7fa      	b.n	b737e <_ZN6StringaSERKS_+0x14>

000b7388 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7388:	b510      	push	{r4, lr}
	buffer = NULL;
   b738a:	2300      	movs	r3, #0
String::String(const String &value)
   b738c:	4604      	mov	r4, r0
	capacity = 0;
   b738e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7392:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7394:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7396:	f7ff ffe8 	bl	b736a <_ZN6StringaSERKS_>
}
   b739a:	4620      	mov	r0, r4
   b739c:	bd10      	pop	{r4, pc}

000b739e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b739e:	b513      	push	{r0, r1, r4, lr}
   b73a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b73a2:	b159      	cbz	r1, b73bc <_ZN6StringaSEPKc+0x1e>
   b73a4:	4608      	mov	r0, r1
   b73a6:	9101      	str	r1, [sp, #4]
   b73a8:	f001 fbf6 	bl	b8b98 <strlen>
   b73ac:	9901      	ldr	r1, [sp, #4]
   b73ae:	4602      	mov	r2, r0
   b73b0:	4620      	mov	r0, r4
   b73b2:	f7ff ffad 	bl	b7310 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73b6:	4620      	mov	r0, r4
   b73b8:	b002      	add	sp, #8
   b73ba:	bd10      	pop	{r4, pc}
	else invalidate();
   b73bc:	f7ff ff7d 	bl	b72ba <_ZN6String10invalidateEv>
   b73c0:	e7f9      	b.n	b73b6 <_ZN6StringaSEPKc+0x18>

000b73c2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b73c2:	b510      	push	{r4, lr}
   b73c4:	4604      	mov	r4, r0
   b73c6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b73c8:	2300      	movs	r3, #0
	capacity = 0;
   b73ca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b73ce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b73d0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b73d2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b73d4:	a901      	add	r1, sp, #4
   b73d6:	f000 fc8f 	bl	b7cf8 <itoa>
	*this = buf;
   b73da:	a901      	add	r1, sp, #4
   b73dc:	4620      	mov	r0, r4
   b73de:	f7ff ffde 	bl	b739e <_ZN6StringaSEPKc>
}
   b73e2:	4620      	mov	r0, r4
   b73e4:	b00a      	add	sp, #40	; 0x28
   b73e6:	bd10      	pop	{r4, pc}

000b73e8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b73e8:	b570      	push	{r4, r5, r6, lr}
   b73ea:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b73ec:	460e      	mov	r6, r1
   b73ee:	b909      	cbnz	r1, b73f4 <_ZN6String6concatEPKcj+0xc>
   b73f0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b73f2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b73f4:	b16a      	cbz	r2, b7412 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b73f6:	6884      	ldr	r4, [r0, #8]
   b73f8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b73fa:	4621      	mov	r1, r4
   b73fc:	f7ff ff74 	bl	b72e8 <_ZN6String7reserveEj>
   b7400:	2800      	cmp	r0, #0
   b7402:	d0f5      	beq.n	b73f0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7404:	6828      	ldr	r0, [r5, #0]
   b7406:	68ab      	ldr	r3, [r5, #8]
   b7408:	4631      	mov	r1, r6
   b740a:	4418      	add	r0, r3
   b740c:	f001 fbbc 	bl	b8b88 <strcpy>
	len = newlen;
   b7410:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7412:	2001      	movs	r0, #1
   b7414:	e7ed      	b.n	b73f2 <_ZN6String6concatEPKcj+0xa>

000b7416 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b7416:	b513      	push	{r0, r1, r4, lr}
   b7418:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b741a:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b741c:	b151      	cbz	r1, b7434 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b741e:	9101      	str	r1, [sp, #4]
   b7420:	f001 fbba 	bl	b8b98 <strlen>
   b7424:	9901      	ldr	r1, [sp, #4]
   b7426:	4602      	mov	r2, r0
   b7428:	4620      	mov	r0, r4
}
   b742a:	b002      	add	sp, #8
   b742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b7430:	f7ff bfda 	b.w	b73e8 <_ZN6String6concatEPKcj>
}
   b7434:	b002      	add	sp, #8
   b7436:	bd10      	pop	{r4, pc}

000b7438 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7438:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b743a:	2300      	movs	r3, #0
	buf[0] = c;
   b743c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7440:	2201      	movs	r2, #1
   b7442:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7444:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7448:	f7ff ffce 	bl	b73e8 <_ZN6String6concatEPKcj>
}
   b744c:	b003      	add	sp, #12
   b744e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7452 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7452:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7454:	688a      	ldr	r2, [r1, #8]
   b7456:	6809      	ldr	r1, [r1, #0]
{
   b7458:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b745a:	f7ff ffc5 	bl	b73e8 <_ZN6String6concatEPKcj>
   b745e:	b910      	cbnz	r0, b7466 <_ZplRK15StringSumHelperRK6String+0x14>
   b7460:	4620      	mov	r0, r4
   b7462:	f7ff ff2a 	bl	b72ba <_ZN6String10invalidateEv>
	return a;
}
   b7466:	4620      	mov	r0, r4
   b7468:	bd10      	pop	{r4, pc}

000b746a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b746a:	b513      	push	{r0, r1, r4, lr}
   b746c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b746e:	b929      	cbnz	r1, b747c <_ZplRK15StringSumHelperPKc+0x12>
   b7470:	4620      	mov	r0, r4
   b7472:	f7ff ff22 	bl	b72ba <_ZN6String10invalidateEv>
	return a;
}
   b7476:	4620      	mov	r0, r4
   b7478:	b002      	add	sp, #8
   b747a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b747c:	4608      	mov	r0, r1
   b747e:	9101      	str	r1, [sp, #4]
   b7480:	f001 fb8a 	bl	b8b98 <strlen>
   b7484:	9901      	ldr	r1, [sp, #4]
   b7486:	4602      	mov	r2, r0
   b7488:	4620      	mov	r0, r4
   b748a:	f7ff ffad 	bl	b73e8 <_ZN6String6concatEPKcj>
   b748e:	2800      	cmp	r0, #0
   b7490:	d0ee      	beq.n	b7470 <_ZplRK15StringSumHelperPKc+0x6>
   b7492:	e7f0      	b.n	b7476 <_ZplRK15StringSumHelperPKc+0xc>

000b7494 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7494:	4b05      	ldr	r3, [pc, #20]	; (b74ac <_GLOBAL__sub_I_System+0x18>)
   b7496:	2202      	movs	r2, #2
   b7498:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b749a:	4b05      	ldr	r3, [pc, #20]	; (b74b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b749c:	4a05      	ldr	r2, [pc, #20]	; (b74b4 <_GLOBAL__sub_I_System+0x20>)
   b749e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b74a0:	2000      	movs	r0, #0
   b74a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b74a6:	f7ff ba15 	b.w	b68d4 <set_system_mode>
   b74aa:	bf00      	nop
   b74ac:	2003e6f8 	.word	0x2003e6f8
   b74b0:	2003e6ec 	.word	0x2003e6ec
   b74b4:	ffff0000 	.word	0xffff0000

000b74b8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b74b8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b74ba:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b74bc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b74c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b74c2:	2201      	movs	r2, #1
   b74c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b74c8:	f10d 0107 	add.w	r1, sp, #7
   b74cc:	47a0      	blx	r4
}
   b74ce:	b002      	add	sp, #8
   b74d0:	bd10      	pop	{r4, pc}

000b74d2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b74d2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b74d4:	6803      	ldr	r3, [r0, #0]
   b74d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b74d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b74dc:	46a4      	mov	ip, r4
}
   b74de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b74e2:	4760      	bx	ip

000b74e4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b74e4:	b513      	push	{r0, r1, r4, lr}
   b74e6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b74e8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b74ea:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b74ee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b74f0:	f10d 0107 	add.w	r1, sp, #7
   b74f4:	2201      	movs	r2, #1
   b74f6:	47a0      	blx	r4
}
   b74f8:	b002      	add	sp, #8
   b74fa:	bd10      	pop	{r4, pc}

000b74fc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b74fc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b74fe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7500:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7504:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7508:	429a      	cmp	r2, r3
int TCPClient::read() {
   b750a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b750c:	d008      	beq.n	b7520 <_ZN9TCPClient4readEv+0x24>
   b750e:	6963      	ldr	r3, [r4, #20]
   b7510:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7514:	1c51      	adds	r1, r2, #1
   b7516:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b751a:	4413      	add	r3, r2
   b751c:	7918      	ldrb	r0, [r3, #4]
}
   b751e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7520:	6803      	ldr	r3, [r0, #0]
   b7522:	691b      	ldr	r3, [r3, #16]
   b7524:	4798      	blx	r3
   b7526:	2800      	cmp	r0, #0
   b7528:	d1f1      	bne.n	b750e <_ZN9TCPClient4readEv+0x12>
   b752a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b752e:	e7f6      	b.n	b751e <_ZN9TCPClient4readEv+0x22>

000b7530 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7530:	4770      	bx	lr

000b7532 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7532:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7534:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7536:	43c0      	mvns	r0, r0
   b7538:	0fc0      	lsrs	r0, r0, #31
   b753a:	4770      	bx	lr

000b753c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b753c:	4770      	bx	lr
	...

000b7540 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7540:	4b06      	ldr	r3, [pc, #24]	; (b755c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7542:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7544:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7546:	f100 040c 	add.w	r4, r0, #12
	    ||
   b754a:	d005      	beq.n	b7558 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b754c:	4608      	mov	r0, r1
   b754e:	f000 fdbf 	bl	b80d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7552:	2800      	cmp	r0, #0
   b7554:	bf08      	it	eq
   b7556:	2400      	moveq	r4, #0
      }
   b7558:	4620      	mov	r0, r4
   b755a:	bd10      	pop	{r4, pc}
   b755c:	000b990c 	.word	0x000b990c

000b7560 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7560:	b510      	push	{r4, lr}
   b7562:	21ac      	movs	r1, #172	; 0xac
   b7564:	4604      	mov	r4, r0
   b7566:	f7fc fd9a 	bl	b409e <_ZdlPvj>
   b756a:	4620      	mov	r0, r4
   b756c:	bd10      	pop	{r4, pc}

000b756e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b756e:	21ac      	movs	r1, #172	; 0xac
   b7570:	f7fc bd95 	b.w	b409e <_ZdlPvj>

000b7574 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7578:	f04f 0800 	mov.w	r8, #0
   b757c:	b086      	sub	sp, #24
   b757e:	461c      	mov	r4, r3
   b7580:	f8c0 8004 	str.w	r8, [r0, #4]
   b7584:	4605      	mov	r5, r0
   b7586:	460e      	mov	r6, r1
   b7588:	4617      	mov	r7, r2
    struct timeval tv = {};
   b758a:	4641      	mov	r1, r8
   b758c:	2210      	movs	r2, #16
   b758e:	a802      	add	r0, sp, #8
   b7590:	f001 faba 	bl	b8b08 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7594:	1c63      	adds	r3, r4, #1
   b7596:	d009      	beq.n	b75ac <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b759c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b75a0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b75a4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b75a8:	435c      	muls	r4, r3
   b75aa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b75ac:	6968      	ldr	r0, [r5, #20]
   b75ae:	2310      	movs	r3, #16
   b75b0:	9300      	str	r3, [sp, #0]
   b75b2:	6800      	ldr	r0, [r0, #0]
   b75b4:	ab02      	add	r3, sp, #8
   b75b6:	f241 0205 	movw	r2, #4101	; 0x1005
   b75ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b75be:	f7ff f881 	bl	b66c4 <sock_setsockopt>
    if (ret < 0) {
   b75c2:	2800      	cmp	r0, #0
   b75c4:	da07      	bge.n	b75d6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b75c6:	f7ff fa41 	bl	b6a4c <__errno>
   b75ca:	6803      	ldr	r3, [r0, #0]
   b75cc:	606b      	str	r3, [r5, #4]
        return 0;
   b75ce:	2000      	movs	r0, #0
}
   b75d0:	b006      	add	sp, #24
   b75d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b75d6:	6968      	ldr	r0, [r5, #20]
   b75d8:	2300      	movs	r3, #0
   b75da:	6800      	ldr	r0, [r0, #0]
   b75dc:	463a      	mov	r2, r7
   b75de:	4631      	mov	r1, r6
   b75e0:	f7ff f890 	bl	b6704 <sock_send>
    if (ret < 0) {
   b75e4:	1e03      	subs	r3, r0, #0
   b75e6:	dbee      	blt.n	b75c6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b75e8:	4618      	mov	r0, r3
   b75ea:	e7f1      	b.n	b75d0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b75ec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b75ec:	b530      	push	{r4, r5, lr}
   b75ee:	b087      	sub	sp, #28
   b75f0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b75f2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b75f4:	4668      	mov	r0, sp
   b75f6:	f7ff fc0b 	bl	b6e10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b75fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75fc:	3404      	adds	r4, #4
   b75fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7600:	682b      	ldr	r3, [r5, #0]
   b7602:	7023      	strb	r3, [r4, #0]
    }
   b7604:	b007      	add	sp, #28
   b7606:	bd30      	pop	{r4, r5, pc}

000b7608 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7608:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b760a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b760c:	4b05      	ldr	r3, [pc, #20]	; (b7624 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b760e:	4604      	mov	r4, r0
   b7610:	358c      	adds	r5, #140	; 0x8c
   b7612:	f844 3b04 	str.w	r3, [r4], #4
   b7616:	4606      	mov	r6, r0
   b7618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b761a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b761c:	682b      	ldr	r3, [r5, #0]
   b761e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7620:	4630      	mov	r0, r6
   b7622:	bd70      	pop	{r4, r5, r6, pc}
   b7624:	000b9980 	.word	0x000b9980

000b7628 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b762c:	4698      	mov	r8, r3
    stop();
   b762e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7630:	b093      	sub	sp, #76	; 0x4c
   b7632:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7634:	2400      	movs	r4, #0
    stop();
   b7636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7638:	4606      	mov	r6, r0
   b763a:	4617      	mov	r7, r2
    stop();
   b763c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b763e:	4628      	mov	r0, r5
   b7640:	466b      	mov	r3, sp
   b7642:	4622      	mov	r2, r4
   b7644:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7646:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7648:	f7ff f834 	bl	b66b4 <netdb_getaddrinfo>
   b764c:	4605      	mov	r5, r0
   b764e:	2800      	cmp	r0, #0
   b7650:	d163      	bne.n	b771a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7652:	9b00      	ldr	r3, [sp, #0]
   b7654:	2b00      	cmp	r3, #0
   b7656:	d04b      	beq.n	b76f0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7658:	695b      	ldr	r3, [r3, #20]
   b765a:	2b00      	cmp	r3, #0
   b765c:	d048      	beq.n	b76f0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b765e:	a806      	add	r0, sp, #24
   b7660:	f7ff fb92 	bl	b6d88 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7664:	9b00      	ldr	r3, [sp, #0]
   b7666:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7668:	7863      	ldrb	r3, [r4, #1]
   b766a:	2b02      	cmp	r3, #2
   b766c:	d104      	bne.n	b7678 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b766e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7670:	a806      	add	r0, sp, #24
   b7672:	f7ff ffbb 	bl	b75ec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7676:	e026      	b.n	b76c6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7678:	2b0a      	cmp	r3, #10
   b767a:	d124      	bne.n	b76c6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b767c:	2211      	movs	r2, #17
   b767e:	4629      	mov	r1, r5
   b7680:	a801      	add	r0, sp, #4
   b7682:	f001 fa41 	bl	b8b08 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7686:	68a3      	ldr	r3, [r4, #8]
   b7688:	2b00      	cmp	r3, #0
   b768a:	d038      	beq.n	b76fe <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b768c:	f104 0308 	add.w	r3, r4, #8
   b7690:	f10d 0c04 	add.w	ip, sp, #4
   b7694:	3418      	adds	r4, #24
   b7696:	6818      	ldr	r0, [r3, #0]
   b7698:	6859      	ldr	r1, [r3, #4]
   b769a:	4662      	mov	r2, ip
   b769c:	c203      	stmia	r2!, {r0, r1}
   b769e:	3308      	adds	r3, #8
   b76a0:	42a3      	cmp	r3, r4
   b76a2:	4694      	mov	ip, r2
   b76a4:	d1f7      	bne.n	b7696 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b76a6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b76a8:	a901      	add	r1, sp, #4
   b76aa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b76ac:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b76b0:	f7ff fb78 	bl	b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b76b4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b76b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b76bc:	ac07      	add	r4, sp, #28
   b76be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76c0:	f8dc 3000 	ldr.w	r3, [ip]
   b76c4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b76c6:	a806      	add	r0, sp, #24
   b76c8:	f7ff fb7e 	bl	b6dc8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b76cc:	b180      	cbz	r0, b76f0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b76ce:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b76d0:	ad07      	add	r5, sp, #28
   b76d2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b76d6:	4b12      	ldr	r3, [pc, #72]	; (b7720 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b76d8:	930c      	str	r3, [sp, #48]	; 0x30
   b76da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76dc:	ac0d      	add	r4, sp, #52	; 0x34
   b76de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76e0:	682b      	ldr	r3, [r5, #0]
   b76e2:	7023      	strb	r3, [r4, #0]
   b76e4:	463a      	mov	r2, r7
   b76e6:	4643      	mov	r3, r8
   b76e8:	a90c      	add	r1, sp, #48	; 0x30
   b76ea:	4630      	mov	r0, r6
   b76ec:	47c8      	blx	r9
   b76ee:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b76f0:	9800      	ldr	r0, [sp, #0]
   b76f2:	f7fe ffd7 	bl	b66a4 <netdb_freeaddrinfo>
}
   b76f6:	4628      	mov	r0, r5
   b76f8:	b013      	add	sp, #76	; 0x4c
   b76fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b76fe:	68e3      	ldr	r3, [r4, #12]
   b7700:	2b00      	cmp	r3, #0
   b7702:	d1c3      	bne.n	b768c <_ZN9TCPClient7connectEPKctm+0x64>
   b7704:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7708:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b770c:	f7fe ffba 	bl	b6684 <inet_htonl>
   b7710:	4581      	cmp	r9, r0
   b7712:	d1bb      	bne.n	b768c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7714:	f104 0114 	add.w	r1, r4, #20
   b7718:	e7aa      	b.n	b7670 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b771a:	4625      	mov	r5, r4
   b771c:	e7e8      	b.n	b76f0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b771e:	bf00      	nop
   b7720:	000b9980 	.word	0x000b9980

000b7724 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7724:	b538      	push	{r3, r4, r5, lr}
   b7726:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7728:	681a      	ldr	r2, [r3, #0]
   b772a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b772c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b772e:	da10      	bge.n	b7752 <_ZN9TCPClient9connectedEv+0x2e>
   b7730:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7734:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7738:	429a      	cmp	r2, r3
   b773a:	d10a      	bne.n	b7752 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b773c:	6803      	ldr	r3, [r0, #0]
   b773e:	691b      	ldr	r3, [r3, #16]
   b7740:	4798      	blx	r3
        if (!rv) {
   b7742:	4604      	mov	r4, r0
   b7744:	b928      	cbnz	r0, b7752 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7746:	682b      	ldr	r3, [r5, #0]
   b7748:	4628      	mov	r0, r5
   b774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b774c:	4798      	blx	r3
        rv = available();
   b774e:	4620      	mov	r0, r4
}
   b7750:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7752:	2001      	movs	r0, #1
   b7754:	e7fc      	b.n	b7750 <_ZN9TCPClient9connectedEv+0x2c>

000b7756 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7756:	b510      	push	{r4, lr}
   b7758:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b775a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b775e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7762:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7764:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7766:	d005      	beq.n	b7774 <_ZN9TCPClient4peekEv+0x1e>
   b7768:	6963      	ldr	r3, [r4, #20]
   b776a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b776e:	4413      	add	r3, r2
   b7770:	7918      	ldrb	r0, [r3, #4]
}
   b7772:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7774:	6803      	ldr	r3, [r0, #0]
   b7776:	691b      	ldr	r3, [r3, #16]
   b7778:	4798      	blx	r3
   b777a:	2800      	cmp	r0, #0
   b777c:	d1f4      	bne.n	b7768 <_ZN9TCPClient4peekEv+0x12>
   b777e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7782:	e7f6      	b.n	b7772 <_ZN9TCPClient4peekEv+0x1c>

000b7784 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7786:	6943      	ldr	r3, [r0, #20]
   b7788:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b778a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b778e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7792:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7794:	4605      	mov	r5, r0
   b7796:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7798:	d016      	beq.n	b77c8 <_ZN9TCPClient4readEPhj+0x44>
   b779a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b779c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b77a0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b77a4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b77a6:	42bc      	cmp	r4, r7
   b77a8:	bf28      	it	cs
   b77aa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b77ac:	3304      	adds	r3, #4
   b77ae:	4622      	mov	r2, r4
   b77b0:	4419      	add	r1, r3
   b77b2:	4630      	mov	r0, r6
   b77b4:	f001 f99a 	bl	b8aec <memcpy>
   b77b8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b77ba:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b77be:	4423      	add	r3, r4
   b77c0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b77c4:	4620      	mov	r0, r4
   b77c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b77c8:	6803      	ldr	r3, [r0, #0]
   b77ca:	691b      	ldr	r3, [r3, #16]
   b77cc:	4798      	blx	r3
   b77ce:	2800      	cmp	r0, #0
   b77d0:	d1e3      	bne.n	b779a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b77d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b77d6:	e7f5      	b.n	b77c4 <_ZN9TCPClient4readEPhj+0x40>

000b77d8 <_ZN9TCPClient12flush_bufferEv>:
   b77d8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b77da:	2300      	movs	r3, #0
   b77dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b77e0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b77e2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b77e6:	4770      	bx	lr

000b77e8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b77e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77ec:	461f      	mov	r7, r3
    stop();
   b77ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b77f0:	460c      	mov	r4, r1
    stop();
   b77f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b77f4:	b08a      	sub	sp, #40	; 0x28
   b77f6:	4605      	mov	r5, r0
   b77f8:	4616      	mov	r6, r2
    stop();
   b77fa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b77fc:	7d23      	ldrb	r3, [r4, #20]
   b77fe:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7802:	2b04      	cmp	r3, #4
   b7804:	bf0c      	ite	eq
   b7806:	2002      	moveq	r0, #2
   b7808:	200a      	movne	r0, #10
   b780a:	2206      	movs	r2, #6
   b780c:	2101      	movs	r1, #1
   b780e:	f7fe ff81 	bl	b6714 <sock_socket>
   b7812:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7816:	696b      	ldr	r3, [r5, #20]
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	2b00      	cmp	r3, #0
   b781c:	da08      	bge.n	b7830 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b781e:	682b      	ldr	r3, [r5, #0]
   b7820:	4628      	mov	r0, r5
   b7822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7824:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7826:	4798      	blx	r3
}
   b7828:	4620      	mov	r0, r4
   b782a:	b00a      	add	sp, #40	; 0x28
   b782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7830:	4628      	mov	r0, r5
   b7832:	f7ff ffd1 	bl	b77d8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7836:	b1b7      	cbz	r7, b7866 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7838:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b783a:	a903      	add	r1, sp, #12
   b783c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b783e:	9303      	str	r3, [sp, #12]
   b7840:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7844:	f7fe ff0e 	bl	b6664 <if_index_to_name>
   b7848:	2800      	cmp	r0, #0
   b784a:	d1e8      	bne.n	b781e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b784c:	6968      	ldr	r0, [r5, #20]
   b784e:	2306      	movs	r3, #6
   b7850:	9300      	str	r3, [sp, #0]
   b7852:	6800      	ldr	r0, [r0, #0]
   b7854:	ab03      	add	r3, sp, #12
   b7856:	f241 020b 	movw	r2, #4107	; 0x100b
   b785a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b785e:	f7fe ff31 	bl	b66c4 <sock_setsockopt>
   b7862:	2800      	cmp	r0, #0
   b7864:	d1db      	bne.n	b781e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7866:	221c      	movs	r2, #28
   b7868:	2100      	movs	r1, #0
   b786a:	a803      	add	r0, sp, #12
   b786c:	f001 f94c 	bl	b8b08 <memset>
    if (ip.version() == 4) {
   b7870:	7d23      	ldrb	r3, [r4, #20]
   b7872:	2b04      	cmp	r3, #4
   b7874:	d11d      	bne.n	b78b2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7876:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b787a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b787c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7880:	f7fe ff08 	bl	b6694 <inet_htons>
   b7884:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7888:	6860      	ldr	r0, [r4, #4]
   b788a:	f7fe fefb 	bl	b6684 <inet_htonl>
   b788e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7890:	696b      	ldr	r3, [r5, #20]
   b7892:	221c      	movs	r2, #28
   b7894:	6818      	ldr	r0, [r3, #0]
   b7896:	a903      	add	r1, sp, #12
   b7898:	f7fe ff24 	bl	b66e4 <sock_connect>
   b789c:	2800      	cmp	r0, #0
   b789e:	d1be      	bne.n	b781e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b78a0:	3404      	adds	r4, #4
   b78a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b78a4:	696d      	ldr	r5, [r5, #20]
   b78a6:	358c      	adds	r5, #140	; 0x8c
   b78a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78aa:	6823      	ldr	r3, [r4, #0]
   b78ac:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b78ae:	2401      	movs	r4, #1
   b78b0:	e7ba      	b.n	b7828 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b78b2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b78b6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b78b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b78bc:	f7fe feea 	bl	b6694 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b78c0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b78c2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b78c6:	1d23      	adds	r3, r4, #4
   b78c8:	f104 0714 	add.w	r7, r4, #20
   b78cc:	6818      	ldr	r0, [r3, #0]
   b78ce:	6859      	ldr	r1, [r3, #4]
   b78d0:	4632      	mov	r2, r6
   b78d2:	c203      	stmia	r2!, {r0, r1}
   b78d4:	3308      	adds	r3, #8
   b78d6:	42bb      	cmp	r3, r7
   b78d8:	4616      	mov	r6, r2
   b78da:	d1f7      	bne.n	b78cc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b78dc:	e7d8      	b.n	b7890 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b78e0 <_ZN9TCPClient9availableEv>:
{
   b78e0:	b530      	push	{r4, r5, lr}
   b78e2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b78e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b78e8:	b08b      	sub	sp, #44	; 0x2c
   b78ea:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b78ec:	b12b      	cbz	r3, b78fa <_ZN9TCPClient9availableEv+0x1a>
   b78ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b78f2:	429a      	cmp	r2, r3
   b78f4:	d101      	bne.n	b78fa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b78f6:	f7ff ff6f 	bl	b77d8 <_ZN9TCPClient12flush_bufferEv>
   b78fa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b78fc:	6808      	ldr	r0, [r1, #0]
   b78fe:	2800      	cmp	r0, #0
   b7900:	db18      	blt.n	b7934 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7902:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7906:	2d7f      	cmp	r5, #127	; 0x7f
   b7908:	d814      	bhi.n	b7934 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b790a:	3104      	adds	r1, #4
   b790c:	2308      	movs	r3, #8
   b790e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7912:	4429      	add	r1, r5
   b7914:	f7fe feee 	bl	b66f4 <sock_recv>
            if (ret > 0) {
   b7918:	2800      	cmp	r0, #0
   b791a:	dd13      	ble.n	b7944 <_ZN9TCPClient9availableEv+0x64>
   b791c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b791e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7922:	b90a      	cbnz	r2, b7928 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7924:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7928:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b792a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b792e:	4410      	add	r0, r2
   b7930:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7934:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7936:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b793a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b793e:	1ac0      	subs	r0, r0, r3
   b7940:	b00b      	add	sp, #44	; 0x2c
   b7942:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7944:	f7ff f882 	bl	b6a4c <__errno>
   b7948:	6803      	ldr	r3, [r0, #0]
   b794a:	2b0b      	cmp	r3, #11
   b794c:	d0f2      	beq.n	b7934 <_ZN9TCPClient9availableEv+0x54>
   b794e:	f7ff f87d 	bl	b6a4c <__errno>
   b7952:	6803      	ldr	r3, [r0, #0]
   b7954:	2b0b      	cmp	r3, #11
   b7956:	d0ed      	beq.n	b7934 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7958:	2320      	movs	r3, #32
   b795a:	2500      	movs	r5, #0
   b795c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7960:	f7ff f874 	bl	b6a4c <__errno>
   b7964:	6803      	ldr	r3, [r0, #0]
   b7966:	9301      	str	r3, [sp, #4]
   b7968:	4b08      	ldr	r3, [pc, #32]	; (b798c <_ZN9TCPClient9availableEv+0xac>)
   b796a:	4909      	ldr	r1, [pc, #36]	; (b7990 <_ZN9TCPClient9availableEv+0xb0>)
   b796c:	9300      	str	r3, [sp, #0]
   b796e:	aa02      	add	r2, sp, #8
   b7970:	462b      	mov	r3, r5
   b7972:	2032      	movs	r0, #50	; 0x32
   b7974:	f7fe ffa6 	bl	b68c4 <log_message>
                    sock_close(d_->sock);
   b7978:	6963      	ldr	r3, [r4, #20]
   b797a:	6818      	ldr	r0, [r3, #0]
   b797c:	f7fe feaa 	bl	b66d4 <sock_close>
   b7980:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7986:	601a      	str	r2, [r3, #0]
   b7988:	e7d4      	b.n	b7934 <_ZN9TCPClient9availableEv+0x54>
   b798a:	bf00      	nop
   b798c:	000b99db 	.word	0x000b99db
   b7990:	000b99d4 	.word	0x000b99d4

000b7994 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7994:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7996:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7998:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b799a:	6818      	ldr	r0, [r3, #0]
   b799c:	2800      	cmp	r0, #0
   b799e:	db01      	blt.n	b79a4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b79a0:	f7fe fe98 	bl	b66d4 <sock_close>
   b79a4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b79a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b79aa:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b79ac:	6960      	ldr	r0, [r4, #20]
   b79ae:	2211      	movs	r2, #17
   b79b0:	2100      	movs	r1, #0
   b79b2:	308c      	adds	r0, #140	; 0x8c
   b79b4:	f001 f8a8 	bl	b8b08 <memset>
    flush_buffer();
   b79b8:	4620      	mov	r0, r4
}
   b79ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b79be:	f7ff bf0b 	b.w	b77d8 <_ZN9TCPClient12flush_bufferEv>

000b79c2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b79c2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b79c4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b79c6:	4604      	mov	r4, r0
          total(0) {
   b79c8:	6001      	str	r1, [r0, #0]
   b79ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b79ce:	3088      	adds	r0, #136	; 0x88
   b79d0:	f7ff f9da 	bl	b6d88 <_ZN9IPAddressC1Ev>
}
   b79d4:	4620      	mov	r0, r4
   b79d6:	bd10      	pop	{r4, pc}

000b79d8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b79d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79da:	2300      	movs	r3, #0
   b79dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b79e0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b79e4:	4a0e      	ldr	r2, [pc, #56]	; (b7a20 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b79e6:	6103      	str	r3, [r0, #16]
   b79e8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b79ea:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b79ec:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b79ee:	20ac      	movs	r0, #172	; 0xac
   b79f0:	9101      	str	r1, [sp, #4]
   b79f2:	f7fc fb50 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b79f6:	1e05      	subs	r5, r0, #0
   b79f8:	f105 060c 	add.w	r6, r5, #12
   b79fc:	d008      	beq.n	b7a10 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b79fe:	2301      	movs	r3, #1
   b7a00:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7a04:	4b07      	ldr	r3, [pc, #28]	; (b7a24 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7a06:	9901      	ldr	r1, [sp, #4]
   b7a08:	602b      	str	r3, [r5, #0]
   b7a0a:	4630      	mov	r0, r6
   b7a0c:	f7ff ffd9 	bl	b79c2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7a10:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7a12:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7a16:	f7ff fedf 	bl	b77d8 <_ZN9TCPClient12flush_bufferEv>
}
   b7a1a:	b002      	add	sp, #8
   b7a1c:	bd70      	pop	{r4, r5, r6, pc}
   b7a1e:	bf00      	nop
   b7a20:	000b9a10 	.word	0x000b9a10
   b7a24:	000b99f4 	.word	0x000b99f4

000b7a28 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7a28:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7a2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7a2e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7a30:	f7ff ffd2 	bl	b79d8 <_ZN9TCPClientC1Ei>
}
   b7a34:	4620      	mov	r0, r4
   b7a36:	bd10      	pop	{r4, pc}

000b7a38 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7a38:	b510      	push	{r4, lr}
   b7a3a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7a3c:	6800      	ldr	r0, [r0, #0]
   b7a3e:	2800      	cmp	r0, #0
   b7a40:	db01      	blt.n	b7a46 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7a42:	f7fe fe47 	bl	b66d4 <sock_close>
    }
}
   b7a46:	4620      	mov	r0, r4
   b7a48:	bd10      	pop	{r4, pc}

000b7a4a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7a4a:	300c      	adds	r0, #12
   b7a4c:	f7ff bff4 	b.w	b7a38 <_ZN9TCPClient4DataD1Ev>

000b7a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a50:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a52:	681a      	ldr	r2, [r3, #0]
   b7a54:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a58:	4770      	bx	lr
   b7a5a:	bf00      	nop
   b7a5c:	2003e464 	.word	0x2003e464
   b7a60:	2003e6fc 	.word	0x2003e6fc

000b7a64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a64:	4770      	bx	lr

000b7a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a66:	7441      	strb	r1, [r0, #17]
}
   b7a68:	4770      	bx	lr

000b7a6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a6c:	7c00      	ldrb	r0, [r0, #16]
   b7a6e:	f7fe fed9 	bl	b6824 <hal_usart_available_data_for_write>
}
   b7a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a76:	bd08      	pop	{r3, pc}

000b7a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a7a:	7c00      	ldrb	r0, [r0, #16]
   b7a7c:	f7fe feaa 	bl	b67d4 <hal_usart_available>
}
   b7a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a84:	bd08      	pop	{r3, pc}

000b7a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a88:	7c00      	ldrb	r0, [r0, #16]
   b7a8a:	f7fe feb3 	bl	b67f4 <hal_usart_peek>
}
   b7a8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a92:	bd08      	pop	{r3, pc}

000b7a94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a96:	7c00      	ldrb	r0, [r0, #16]
   b7a98:	f7fe fea4 	bl	b67e4 <hal_usart_read>
}
   b7a9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aa0:	bd08      	pop	{r3, pc}

000b7aa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7aa2:	7c00      	ldrb	r0, [r0, #16]
   b7aa4:	f7fe beae 	b.w	b6804 <hal_usart_flush>

000b7aa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aaa:	7c45      	ldrb	r5, [r0, #17]
{
   b7aac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aae:	b12d      	cbz	r5, b7abc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7ab2:	b003      	add	sp, #12
   b7ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7ab8:	f7fe be84 	b.w	b67c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7abc:	7c00      	ldrb	r0, [r0, #16]
   b7abe:	9101      	str	r1, [sp, #4]
   b7ac0:	f7fe feb0 	bl	b6824 <hal_usart_available_data_for_write>
   b7ac4:	2800      	cmp	r0, #0
   b7ac6:	9901      	ldr	r1, [sp, #4]
   b7ac8:	dcf2      	bgt.n	b7ab0 <_ZN11USARTSerial5writeEh+0x8>
}
   b7aca:	4628      	mov	r0, r5
   b7acc:	b003      	add	sp, #12
   b7ace:	bd30      	pop	{r4, r5, pc}

000b7ad0 <_ZN11USARTSerialD0Ev>:
   b7ad0:	b510      	push	{r4, lr}
   b7ad2:	2114      	movs	r1, #20
   b7ad4:	4604      	mov	r4, r0
   b7ad6:	f7fc fae2 	bl	b409e <_ZdlPvj>
   b7ada:	4620      	mov	r0, r4
   b7adc:	bd10      	pop	{r4, pc}
	...

000b7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	4608      	mov	r0, r1
   b7aea:	4611      	mov	r1, r2
   b7aec:	2200      	movs	r2, #0
   b7aee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7af2:	4b04      	ldr	r3, [pc, #16]	; (b7b04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7af4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7af6:	2301      	movs	r3, #1
  _serial = serial;
   b7af8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7afa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7afc:	f7fe fe9a 	bl	b6834 <hal_usart_init_ex>
}
   b7b00:	4620      	mov	r0, r4
   b7b02:	bd10      	pop	{r4, pc}
   b7b04:	000b9a78 	.word	0x000b9a78

000b7b08 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7b08:	7441      	strb	r1, [r0, #17]
}
   b7b0a:	4770      	bx	lr

000b7b0c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b0c:	4770      	bx	lr

000b7b0e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7b0e:	4770      	bx	lr

000b7b10 <_ZN9USBSerial4readEv>:
{
   b7b10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7b12:	2100      	movs	r1, #0
   b7b14:	7c00      	ldrb	r0, [r0, #16]
   b7b16:	f7fe feb5 	bl	b6884 <HAL_USB_USART_Receive_Data>
}
   b7b1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b1e:	bd08      	pop	{r3, pc}

000b7b20 <_ZN9USBSerial4peekEv>:
{
   b7b20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7b22:	2101      	movs	r1, #1
   b7b24:	7c00      	ldrb	r0, [r0, #16]
   b7b26:	f7fe fead 	bl	b6884 <HAL_USB_USART_Receive_Data>
}
   b7b2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b2e:	bd08      	pop	{r3, pc}

000b7b30 <_ZN9USBSerial17availableForWriteEv>:
{
   b7b30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7b32:	7c00      	ldrb	r0, [r0, #16]
   b7b34:	f7fe fe9e 	bl	b6874 <HAL_USB_USART_Available_Data_For_Write>
}
   b7b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b3c:	bd08      	pop	{r3, pc}

000b7b3e <_ZN9USBSerial9availableEv>:
{
   b7b3e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7b40:	7c00      	ldrb	r0, [r0, #16]
   b7b42:	f7fe fe8f 	bl	b6864 <HAL_USB_USART_Available_Data>
}
   b7b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b4a:	bd08      	pop	{r3, pc}

000b7b4c <_ZN9USBSerial5writeEh>:
{
   b7b4c:	b513      	push	{r0, r1, r4, lr}
   b7b4e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b50:	7c00      	ldrb	r0, [r0, #16]
{
   b7b52:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b54:	f7fe fe8e 	bl	b6874 <HAL_USB_USART_Available_Data_For_Write>
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	9901      	ldr	r1, [sp, #4]
   b7b5c:	dc01      	bgt.n	b7b62 <_ZN9USBSerial5writeEh+0x16>
   b7b5e:	7c60      	ldrb	r0, [r4, #17]
   b7b60:	b120      	cbz	r0, b7b6c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b62:	7c20      	ldrb	r0, [r4, #16]
   b7b64:	f7fe fe96 	bl	b6894 <HAL_USB_USART_Send_Data>
   b7b68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b6c:	b002      	add	sp, #8
   b7b6e:	bd10      	pop	{r4, pc}

000b7b70 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b70:	7c00      	ldrb	r0, [r0, #16]
   b7b72:	f7fe be97 	b.w	b68a4 <HAL_USB_USART_Flush_Data>

000b7b76 <_ZN9USBSerialD0Ev>:
   b7b76:	b510      	push	{r4, lr}
   b7b78:	2114      	movs	r1, #20
   b7b7a:	4604      	mov	r4, r0
   b7b7c:	f7fc fa8f 	bl	b409e <_ZdlPvj>
   b7b80:	4620      	mov	r0, r4
   b7b82:	bd10      	pop	{r4, pc}

000b7b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b84:	b510      	push	{r4, lr}
   b7b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b8a:	4604      	mov	r4, r0
   b7b8c:	4608      	mov	r0, r1
   b7b8e:	2100      	movs	r1, #0
   b7b90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b94:	4b04      	ldr	r3, [pc, #16]	; (b7ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b96:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b98:	2301      	movs	r3, #1
  _serial = serial;
   b7b9a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b9c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b9e:	4611      	mov	r1, r2
   b7ba0:	f7fe fe50 	bl	b6844 <HAL_USB_USART_Init>
}
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	bd10      	pop	{r4, pc}
   b7ba8:	000b9aa8 	.word	0x000b9aa8

000b7bac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7bac:	7c00      	ldrb	r0, [r0, #16]
   b7bae:	2200      	movs	r2, #0
   b7bb0:	f7fe be50 	b.w	b6854 <HAL_USB_USART_Begin>

000b7bb4 <_Z19acquireSerialBufferv>:
{
   b7bb4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7bb6:	2214      	movs	r2, #20
{
   b7bb8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7bba:	2100      	movs	r1, #0
   b7bbc:	f000 ffa4 	bl	b8b08 <memset>
}
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_Z16_fetch_usbserialv>:
{
   b7bc4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bc6:	4c0f      	ldr	r4, [pc, #60]	; (b7c04 <_Z16_fetch_usbserialv+0x40>)
{
   b7bc8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7bca:	a803      	add	r0, sp, #12
   b7bcc:	f7ff fff2 	bl	b7bb4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bd0:	7821      	ldrb	r1, [r4, #0]
   b7bd2:	f3bf 8f5b 	dmb	ish
   b7bd6:	f011 0101 	ands.w	r1, r1, #1
   b7bda:	d10f      	bne.n	b7bfc <_Z16_fetch_usbserialv+0x38>
   b7bdc:	4620      	mov	r0, r4
   b7bde:	9101      	str	r1, [sp, #4]
   b7be0:	f7fc fa6c 	bl	b40bc <__cxa_guard_acquire>
   b7be4:	9901      	ldr	r1, [sp, #4]
   b7be6:	b148      	cbz	r0, b7bfc <_Z16_fetch_usbserialv+0x38>
   b7be8:	aa03      	add	r2, sp, #12
   b7bea:	4807      	ldr	r0, [pc, #28]	; (b7c08 <_Z16_fetch_usbserialv+0x44>)
   b7bec:	f7ff ffca 	bl	b7b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	f7fc fa68 	bl	b40c6 <__cxa_guard_release>
   b7bf6:	4805      	ldr	r0, [pc, #20]	; (b7c0c <_Z16_fetch_usbserialv+0x48>)
   b7bf8:	f000 ff72 	bl	b8ae0 <atexit>
	return _usbserial;
}
   b7bfc:	4802      	ldr	r0, [pc, #8]	; (b7c08 <_Z16_fetch_usbserialv+0x44>)
   b7bfe:	b008      	add	sp, #32
   b7c00:	bd10      	pop	{r4, pc}
   b7c02:	bf00      	nop
   b7c04:	2003e700 	.word	0x2003e700
   b7c08:	2003e704 	.word	0x2003e704
   b7c0c:	000b7b0d 	.word	0x000b7b0d

000b7c10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7c10:	2200      	movs	r2, #0
   b7c12:	6840      	ldr	r0, [r0, #4]
   b7c14:	4611      	mov	r1, r2
   b7c16:	f7fe bea1 	b.w	b695c <network_ready>

000b7c1a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c1a:	2200      	movs	r2, #0
   b7c1c:	6840      	ldr	r0, [r0, #4]
   b7c1e:	4611      	mov	r1, r2
   b7c20:	f7fe bebc 	b.w	b699c <network_listening>

000b7c24 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c24:	2200      	movs	r2, #0
   b7c26:	6840      	ldr	r0, [r0, #4]
   b7c28:	4611      	mov	r1, r2
   b7c2a:	f7fe becf 	b.w	b69cc <network_get_listen_timeout>

000b7c2e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c2e:	6840      	ldr	r0, [r0, #4]
   b7c30:	2200      	movs	r2, #0
   b7c32:	f7fe bec3 	b.w	b69bc <network_set_listen_timeout>

000b7c36 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c36:	6840      	ldr	r0, [r0, #4]
   b7c38:	2200      	movs	r2, #0
   b7c3a:	f081 0101 	eor.w	r1, r1, #1
   b7c3e:	f7fe bea5 	b.w	b698c <network_listen>

000b7c42 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c42:	2300      	movs	r3, #0
   b7c44:	6840      	ldr	r0, [r0, #4]
   b7c46:	461a      	mov	r2, r3
   b7c48:	4619      	mov	r1, r3
   b7c4a:	f7fe be97 	b.w	b697c <network_off>

000b7c4e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c4e:	2300      	movs	r3, #0
   b7c50:	6840      	ldr	r0, [r0, #4]
   b7c52:	461a      	mov	r2, r3
   b7c54:	4619      	mov	r1, r3
   b7c56:	f7fe be89 	b.w	b696c <network_on>

000b7c5a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c5a:	2200      	movs	r2, #0
   b7c5c:	6840      	ldr	r0, [r0, #4]
   b7c5e:	4611      	mov	r1, r2
   b7c60:	f7fe be6c 	b.w	b693c <network_connecting>

000b7c64 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c64:	6840      	ldr	r0, [r0, #4]
   b7c66:	2200      	movs	r2, #0
   b7c68:	2102      	movs	r1, #2
   b7c6a:	f7fe be6f 	b.w	b694c <network_disconnect>

000b7c6e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c6e:	2300      	movs	r3, #0
   b7c70:	6840      	ldr	r0, [r0, #4]
   b7c72:	461a      	mov	r2, r3
   b7c74:	f7fe be5a 	b.w	b692c <network_connect>

000b7c78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7c78:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7c7a:	2204      	movs	r2, #4
   b7c7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7c7e:	4a02      	ldr	r2, [pc, #8]	; (b7c88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7c80:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7c82:	4770      	bx	lr
   b7c84:	2003e718 	.word	0x2003e718
   b7c88:	000b9ad8 	.word	0x000b9ad8

000b7c8c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7c8c:	b510      	push	{r4, lr}
   b7c8e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7c90:	f000 ff82 	bl	b8b98 <strlen>
   b7c94:	3801      	subs	r0, #1
   b7c96:	1823      	adds	r3, r4, r0
   b7c98:	4620      	mov	r0, r4
	while(i<j){
   b7c9a:	4283      	cmp	r3, r0
   b7c9c:	d906      	bls.n	b7cac <_Z11str_reversePc+0x20>
		c = *i;
   b7c9e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7ca0:	7819      	ldrb	r1, [r3, #0]
   b7ca2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7ca6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7caa:	e7f6      	b.n	b7c9a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7cac:	bd10      	pop	{r4, pc}

000b7cae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7cae:	b570      	push	{r4, r5, r6, lr}
   b7cb0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7cb2:	1e91      	subs	r1, r2, #2
   b7cb4:	2922      	cmp	r1, #34	; 0x22
   b7cb6:	d81d      	bhi.n	b7cf4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7cb8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7cba:	b930      	cbnz	r0, b7cca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7cbc:	4423      	add	r3, r4
            *ptr++ = '0';
   b7cbe:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7cc0:	429d      	cmp	r5, r3
   b7cc2:	d210      	bcs.n	b7ce6 <ultoa+0x38>
            *ptr++ = '0';
   b7cc4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7cc8:	e7fa      	b.n	b7cc0 <ultoa+0x12>
            result.quot = a/radix;
   b7cca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7cce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7cd2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7cd4:	2809      	cmp	r0, #9
                *ptr += '0';
   b7cd6:	bf94      	ite	ls
   b7cd8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7cda:	3157      	addhi	r1, #87	; 0x57
   b7cdc:	b2c9      	uxtb	r1, r1
   b7cde:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7ce2:	4630      	mov	r0, r6
	while(a){
   b7ce4:	e7e9      	b.n	b7cba <ultoa+0xc>

	*ptr = '\0';
   b7ce6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7ce8:	4620      	mov	r0, r4
	*ptr = '\0';
   b7cea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7cec:	f7ff ffce 	bl	b7c8c <_Z11str_reversePc>
	return buffer;
   b7cf0:	4620      	mov	r0, r4
}
   b7cf2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7cf4:	2000      	movs	r0, #0
   b7cf6:	e7fc      	b.n	b7cf2 <ultoa+0x44>

000b7cf8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7cf8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7cfa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7cfc:	460c      	mov	r4, r1
   b7cfe:	4615      	mov	r5, r2
	if(a<0){
   b7d00:	da0e      	bge.n	b7d20 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7d06:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7d0a:	bf14      	ite	ne
   b7d0c:	4258      	negne	r0, r3
   b7d0e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7d10:	2301      	movs	r3, #1
		*buffer = '-';
   b7d12:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7d14:	462a      	mov	r2, r5
   b7d16:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7d18:	f7ff ffc9 	bl	b7cae <ultoa>
	}
	return buffer;
}
   b7d1c:	4620      	mov	r0, r4
   b7d1e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7d20:	2301      	movs	r3, #1
   b7d22:	e7f9      	b.n	b7d18 <itoa+0x20>

000b7d24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7d24:	4b01      	ldr	r3, [pc, #4]	; (b7d2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7d26:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7d28:	4770      	bx	lr
   b7d2a:	bf00      	nop
   b7d2c:	2003e468 	.word	0x2003e468

000b7d30 <serialEventRun>:
{
   b7d30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7d32:	4b0b      	ldr	r3, [pc, #44]	; (b7d60 <serialEventRun+0x30>)
   b7d34:	b143      	cbz	r3, b7d48 <serialEventRun+0x18>
   b7d36:	f7ff ff45 	bl	b7bc4 <_Z16_fetch_usbserialv>
   b7d3a:	6803      	ldr	r3, [r0, #0]
   b7d3c:	691b      	ldr	r3, [r3, #16]
   b7d3e:	4798      	blx	r3
   b7d40:	2800      	cmp	r0, #0
   b7d42:	dd01      	ble.n	b7d48 <serialEventRun+0x18>
        serialEvent();
   b7d44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7d48:	4b06      	ldr	r3, [pc, #24]	; (b7d64 <serialEventRun+0x34>)
   b7d4a:	b143      	cbz	r3, b7d5e <serialEventRun+0x2e>
   b7d4c:	f000 f996 	bl	b807c <_Z22__fetch_global_Serial1v>
   b7d50:	6803      	ldr	r3, [r0, #0]
   b7d52:	691b      	ldr	r3, [r3, #16]
   b7d54:	4798      	blx	r3
   b7d56:	2800      	cmp	r0, #0
   b7d58:	dd01      	ble.n	b7d5e <serialEventRun+0x2e>
        serialEvent1();
   b7d5a:	f3af 8000 	nop.w
}
   b7d5e:	bd08      	pop	{r3, pc}
	...

000b7d68 <_post_loop>:
{
   b7d68:	b508      	push	{r3, lr}
	serialEventRun();
   b7d6a:	f7ff ffe1 	bl	b7d30 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d6e:	f7fe fbc1 	bl	b64f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d72:	4b01      	ldr	r3, [pc, #4]	; (b7d78 <_post_loop+0x10>)
   b7d74:	6018      	str	r0, [r3, #0]
}
   b7d76:	bd08      	pop	{r3, pc}
   b7d78:	2003e728 	.word	0x2003e728

000b7d7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d7c:	4805      	ldr	r0, [pc, #20]	; (b7d94 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7d7e:	4a06      	ldr	r2, [pc, #24]	; (b7d98 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7d80:	4906      	ldr	r1, [pc, #24]	; (b7d9c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7d82:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d84:	1a12      	subs	r2, r2, r0
   b7d86:	f000 feb1 	bl	b8aec <memcpy>
    __backup_sram_signature = signature;
   b7d8a:	4b05      	ldr	r3, [pc, #20]	; (b7da0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7d8c:	4a05      	ldr	r2, [pc, #20]	; (b7da4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7d8e:	601a      	str	r2, [r3, #0]
}
   b7d90:	bd08      	pop	{r3, pc}
   b7d92:	bf00      	nop
   b7d94:	2003f400 	.word	0x2003f400
   b7d98:	2003f404 	.word	0x2003f404
   b7d9c:	000b9cc4 	.word	0x000b9cc4
   b7da0:	2003f400 	.word	0x2003f400
   b7da4:	9a271c1e 	.word	0x9a271c1e

000b7da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7da8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7daa:	2300      	movs	r3, #0
   b7dac:	9300      	str	r3, [sp, #0]
   b7dae:	461a      	mov	r2, r3
   b7db0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7db4:	f7fe fda8 	bl	b6908 <system_ctrl_set_result>
}
   b7db8:	b003      	add	sp, #12
   b7dba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7dc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7dc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7dc2:	8843      	ldrh	r3, [r0, #2]
   b7dc4:	2b0a      	cmp	r3, #10
   b7dc6:	d008      	beq.n	b7dda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7dc8:	2b50      	cmp	r3, #80	; 0x50
   b7dca:	d10b      	bne.n	b7de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7dcc:	4b09      	ldr	r3, [pc, #36]	; (b7df4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7dce:	681b      	ldr	r3, [r3, #0]
   b7dd0:	b14b      	cbz	r3, b7de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7dd2:	b003      	add	sp, #12
   b7dd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7dd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7dda:	f7ff ffe5 	bl	b7da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7dde:	b003      	add	sp, #12
   b7de0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7de4:	2300      	movs	r3, #0
   b7de6:	9300      	str	r3, [sp, #0]
   b7de8:	461a      	mov	r2, r3
   b7dea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7dee:	f7fe fd8b 	bl	b6908 <system_ctrl_set_result>
}
   b7df2:	e7f4      	b.n	b7dde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7df4:	2003e724 	.word	0x2003e724

000b7df8 <module_user_init_hook>:
{
   b7df8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7dfa:	4812      	ldr	r0, [pc, #72]	; (b7e44 <module_user_init_hook+0x4c>)
   b7dfc:	2100      	movs	r1, #0
   b7dfe:	f7fe fe35 	bl	b6a6c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7e02:	4b11      	ldr	r3, [pc, #68]	; (b7e48 <module_user_init_hook+0x50>)
   b7e04:	681a      	ldr	r2, [r3, #0]
   b7e06:	4b11      	ldr	r3, [pc, #68]	; (b7e4c <module_user_init_hook+0x54>)
   b7e08:	429a      	cmp	r2, r3
   b7e0a:	4b11      	ldr	r3, [pc, #68]	; (b7e50 <module_user_init_hook+0x58>)
   b7e0c:	bf0c      	ite	eq
   b7e0e:	2201      	moveq	r2, #1
   b7e10:	2200      	movne	r2, #0
   b7e12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7e14:	d001      	beq.n	b7e1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7e16:	f7ff ffb1 	bl	b7d7c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7e1a:	f7fe fb53 	bl	b64c4 <HAL_RNG_GetRandomNumber>
   b7e1e:	4604      	mov	r4, r0
    srand(seed);
   b7e20:	f000 fe7a 	bl	b8b18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7e24:	4b0b      	ldr	r3, [pc, #44]	; (b7e54 <module_user_init_hook+0x5c>)
   b7e26:	b113      	cbz	r3, b7e2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7e28:	4620      	mov	r0, r4
   b7e2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7e2e:	2100      	movs	r1, #0
   b7e30:	4808      	ldr	r0, [pc, #32]	; (b7e54 <module_user_init_hook+0x5c>)
   b7e32:	f7fe fd73 	bl	b691c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7e3a:	4807      	ldr	r0, [pc, #28]	; (b7e58 <module_user_init_hook+0x60>)
   b7e3c:	2100      	movs	r1, #0
   b7e3e:	f7fe bd59 	b.w	b68f4 <system_ctrl_set_app_request_handler>
   b7e42:	bf00      	nop
   b7e44:	000b7d25 	.word	0x000b7d25
   b7e48:	2003f400 	.word	0x2003f400
   b7e4c:	9a271c1e 	.word	0x9a271c1e
   b7e50:	2003e720 	.word	0x2003e720
   b7e54:	00000000 	.word	0x00000000
   b7e58:	000b7dc1 	.word	0x000b7dc1

000b7e5c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7e5c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7e5e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7e60:	d902      	bls.n	b7e68 <pinAvailable+0xc>
    return false;
   b7e62:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7e64:	b002      	add	sp, #8
   b7e66:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7e68:	f1a0 030b 	sub.w	r3, r0, #11
   b7e6c:	2b02      	cmp	r3, #2
   b7e6e:	d81a      	bhi.n	b7ea6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7e70:	4c17      	ldr	r4, [pc, #92]	; (b7ed0 <pinAvailable+0x74>)
   b7e72:	7821      	ldrb	r1, [r4, #0]
   b7e74:	f3bf 8f5b 	dmb	ish
   b7e78:	f011 0101 	ands.w	r1, r1, #1
   b7e7c:	d10b      	bne.n	b7e96 <pinAvailable+0x3a>
   b7e7e:	4620      	mov	r0, r4
   b7e80:	9101      	str	r1, [sp, #4]
   b7e82:	f7fc f91b 	bl	b40bc <__cxa_guard_acquire>
   b7e86:	9901      	ldr	r1, [sp, #4]
   b7e88:	b128      	cbz	r0, b7e96 <pinAvailable+0x3a>
   b7e8a:	4812      	ldr	r0, [pc, #72]	; (b7ed4 <pinAvailable+0x78>)
   b7e8c:	f7ff f92a 	bl	b70e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7e90:	4620      	mov	r0, r4
   b7e92:	f7fc f918 	bl	b40c6 <__cxa_guard_release>
   b7e96:	4b0f      	ldr	r3, [pc, #60]	; (b7ed4 <pinAvailable+0x78>)
   b7e98:	7818      	ldrb	r0, [r3, #0]
   b7e9a:	f7fe fc73 	bl	b6784 <hal_spi_is_enabled>
   b7e9e:	2800      	cmp	r0, #0
   b7ea0:	d1df      	bne.n	b7e62 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7ea2:	2001      	movs	r0, #1
   b7ea4:	e7de      	b.n	b7e64 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7ea6:	2801      	cmp	r0, #1
   b7ea8:	d809      	bhi.n	b7ebe <pinAvailable+0x62>
   b7eaa:	f000 f8a7 	bl	b7ffc <_Z19__fetch_global_Wirev>
   b7eae:	2100      	movs	r1, #0
   b7eb0:	7c00      	ldrb	r0, [r0, #16]
   b7eb2:	f7fe fbbf 	bl	b6634 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7eb6:	f080 0001 	eor.w	r0, r0, #1
   b7eba:	b2c0      	uxtb	r0, r0
   b7ebc:	e7d2      	b.n	b7e64 <pinAvailable+0x8>
   b7ebe:	3809      	subs	r0, #9
   b7ec0:	2801      	cmp	r0, #1
   b7ec2:	d8ee      	bhi.n	b7ea2 <pinAvailable+0x46>
   b7ec4:	f000 f8da 	bl	b807c <_Z22__fetch_global_Serial1v>
   b7ec8:	7c00      	ldrb	r0, [r0, #16]
   b7eca:	f7fe fca3 	bl	b6814 <hal_usart_is_enabled>
   b7ece:	e7f2      	b.n	b7eb6 <pinAvailable+0x5a>
   b7ed0:	2003e624 	.word	0x2003e624
   b7ed4:	2003e628 	.word	0x2003e628

000b7ed8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ed8:	2823      	cmp	r0, #35	; 0x23
{
   b7eda:	b538      	push	{r3, r4, r5, lr}
   b7edc:	4604      	mov	r4, r0
   b7ede:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ee0:	d80a      	bhi.n	b7ef8 <pinMode+0x20>
   b7ee2:	29ff      	cmp	r1, #255	; 0xff
   b7ee4:	d008      	beq.n	b7ef8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7ee6:	f7ff ffb9 	bl	b7e5c <pinAvailable>
   b7eea:	b128      	cbz	r0, b7ef8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7eec:	4629      	mov	r1, r5
   b7eee:	4620      	mov	r0, r4
}
   b7ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7ef4:	f7fe bb16 	b.w	b6524 <HAL_Pin_Mode>
}
   b7ef8:	bd38      	pop	{r3, r4, r5, pc}

000b7efa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7efa:	b538      	push	{r3, r4, r5, lr}
   b7efc:	4604      	mov	r4, r0
   b7efe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7f00:	f7fe fb18 	bl	b6534 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7f04:	28ff      	cmp	r0, #255	; 0xff
   b7f06:	d010      	beq.n	b7f2a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7f08:	2806      	cmp	r0, #6
   b7f0a:	d804      	bhi.n	b7f16 <digitalWrite+0x1c>
   b7f0c:	234d      	movs	r3, #77	; 0x4d
   b7f0e:	fa23 f000 	lsr.w	r0, r3, r0
   b7f12:	07c3      	lsls	r3, r0, #31
   b7f14:	d409      	bmi.n	b7f2a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7f16:	4620      	mov	r0, r4
   b7f18:	f7ff ffa0 	bl	b7e5c <pinAvailable>
   b7f1c:	b128      	cbz	r0, b7f2a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7f1e:	4629      	mov	r1, r5
   b7f20:	4620      	mov	r0, r4
}
   b7f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7f26:	f7fe bb0d 	b.w	b6544 <HAL_GPIO_Write>
}
   b7f2a:	bd38      	pop	{r3, r4, r5, pc}

000b7f2c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7f2c:	b510      	push	{r4, lr}
   b7f2e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7f30:	f7fe fb00 	bl	b6534 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7f34:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7f36:	b2db      	uxtb	r3, r3
   b7f38:	2b01      	cmp	r3, #1
   b7f3a:	d908      	bls.n	b7f4e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7f3c:	4620      	mov	r0, r4
   b7f3e:	f7ff ff8d 	bl	b7e5c <pinAvailable>
   b7f42:	b120      	cbz	r0, b7f4e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7f44:	4620      	mov	r0, r4
}
   b7f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7f4a:	f7fe bb03 	b.w	b6554 <HAL_GPIO_Read>
}
   b7f4e:	2000      	movs	r0, #0
   b7f50:	bd10      	pop	{r4, pc}

000b7f52 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7f52:	280d      	cmp	r0, #13
{
   b7f54:	b510      	push	{r4, lr}
   b7f56:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7f58:	bf9c      	itt	ls
   b7f5a:	340e      	addls	r4, #14
   b7f5c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7f5e:	4620      	mov	r0, r4
   b7f60:	f7ff ff7c 	bl	b7e5c <pinAvailable>
   b7f64:	b150      	cbz	r0, b7f7c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7f66:	2103      	movs	r1, #3
   b7f68:	4620      	mov	r0, r4
   b7f6a:	f7fe fad3 	bl	b6514 <HAL_Validate_Pin_Function>
   b7f6e:	2803      	cmp	r0, #3
   b7f70:	d104      	bne.n	b7f7c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7f72:	4620      	mov	r0, r4
}
   b7f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7f78:	f7fe bb14 	b.w	b65a4 <hal_adc_read>
}
   b7f7c:	2000      	movs	r0, #0
   b7f7e:	bd10      	pop	{r4, pc}

000b7f80 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f84:	4690      	mov	r8, r2
   b7f86:	461f      	mov	r7, r3
   b7f88:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7f8a:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7f8c:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7f8e:	f1c4 0107 	rsb	r1, r4, #7
   b7f92:	f1b8 0f00 	cmp.w	r8, #0
   b7f96:	d112      	bne.n	b7fbe <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7f98:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7f9c:	f001 0101 	and.w	r1, r1, #1
   b7fa0:	4630      	mov	r0, r6
   b7fa2:	f7ff ffaa 	bl	b7efa <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7fa6:	2101      	movs	r1, #1
   b7fa8:	4628      	mov	r0, r5
   b7faa:	f7ff ffa6 	bl	b7efa <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7fae:	2100      	movs	r1, #0
   b7fb0:	4628      	mov	r0, r5
   b7fb2:	f7ff ffa2 	bl	b7efa <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7fb6:	3c01      	subs	r4, #1
   b7fb8:	d2e9      	bcs.n	b7f8e <shiftOut+0xe>
  }
}
   b7fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7fbe:	fa47 f104 	asr.w	r1, r7, r4
   b7fc2:	e7eb      	b.n	b7f9c <shiftOut+0x1c>

000b7fc4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fc4:	4770      	bx	lr
	...

000b7fc8 <_Z17acquireWireBufferv>:
{
   b7fc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7fca:	4b0a      	ldr	r3, [pc, #40]	; (b7ff4 <_Z17acquireWireBufferv+0x2c>)
   b7fcc:	6003      	str	r3, [r0, #0]
   b7fce:	2301      	movs	r3, #1
{
   b7fd0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7fd2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fd4:	4908      	ldr	r1, [pc, #32]	; (b7ff8 <_Z17acquireWireBufferv+0x30>)
   b7fd6:	2020      	movs	r0, #32
   b7fd8:	f000 f874 	bl	b80c4 <_ZnajRKSt9nothrow_t>
	};
   b7fdc:	2520      	movs	r5, #32
   b7fde:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fe0:	4905      	ldr	r1, [pc, #20]	; (b7ff8 <_Z17acquireWireBufferv+0x30>)
	};
   b7fe2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fe4:	4628      	mov	r0, r5
   b7fe6:	f000 f86d 	bl	b80c4 <_ZnajRKSt9nothrow_t>
	};
   b7fea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7fee:	4620      	mov	r0, r4
   b7ff0:	bd38      	pop	{r3, r4, r5, pc}
   b7ff2:	bf00      	nop
   b7ff4:	00010018 	.word	0x00010018
   b7ff8:	000b9b0c 	.word	0x000b9b0c

000b7ffc <_Z19__fetch_global_Wirev>:
{
   b7ffc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ffe:	4d0e      	ldr	r5, [pc, #56]	; (b8038 <_Z19__fetch_global_Wirev+0x3c>)
   b8000:	7829      	ldrb	r1, [r5, #0]
   b8002:	f3bf 8f5b 	dmb	ish
   b8006:	f011 0401 	ands.w	r4, r1, #1
{
   b800a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b800c:	d111      	bne.n	b8032 <_Z19__fetch_global_Wirev+0x36>
   b800e:	4628      	mov	r0, r5
   b8010:	f7fc f854 	bl	b40bc <__cxa_guard_acquire>
   b8014:	b168      	cbz	r0, b8032 <_Z19__fetch_global_Wirev+0x36>
   b8016:	4668      	mov	r0, sp
   b8018:	f7ff ffd6 	bl	b7fc8 <_Z17acquireWireBufferv>
   b801c:	466a      	mov	r2, sp
   b801e:	4621      	mov	r1, r4
   b8020:	4806      	ldr	r0, [pc, #24]	; (b803c <_Z19__fetch_global_Wirev+0x40>)
   b8022:	f7fe fdb5 	bl	b6b90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8026:	4628      	mov	r0, r5
   b8028:	f7fc f84d 	bl	b40c6 <__cxa_guard_release>
   b802c:	4804      	ldr	r0, [pc, #16]	; (b8040 <_Z19__fetch_global_Wirev+0x44>)
   b802e:	f000 fd57 	bl	b8ae0 <atexit>
	return wire;
}
   b8032:	4802      	ldr	r0, [pc, #8]	; (b803c <_Z19__fetch_global_Wirev+0x40>)
   b8034:	b007      	add	sp, #28
   b8036:	bd30      	pop	{r4, r5, pc}
   b8038:	2003e72c 	.word	0x2003e72c
   b803c:	2003e730 	.word	0x2003e730
   b8040:	000b7fc5 	.word	0x000b7fc5

000b8044 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8044:	4770      	bx	lr
	...

000b8048 <_Z20acquireSerial1Bufferv>:
{
   b8048:	b538      	push	{r3, r4, r5, lr}
   b804a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b804c:	2514      	movs	r5, #20
   b804e:	462a      	mov	r2, r5
   b8050:	2100      	movs	r1, #0
   b8052:	f000 fd59 	bl	b8b08 <memset>
   b8056:	8025      	strh	r5, [r4, #0]
   b8058:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b805a:	4907      	ldr	r1, [pc, #28]	; (b8078 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b805c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b805e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8060:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8062:	f000 f82f 	bl	b80c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8066:	4904      	ldr	r1, [pc, #16]	; (b8078 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8068:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b806a:	4628      	mov	r0, r5
   b806c:	f000 f82a 	bl	b80c4 <_ZnajRKSt9nothrow_t>
    };
   b8070:	60e0      	str	r0, [r4, #12]
}
   b8072:	4620      	mov	r0, r4
   b8074:	bd38      	pop	{r3, r4, r5, pc}
   b8076:	bf00      	nop
   b8078:	000b9b0c 	.word	0x000b9b0c

000b807c <_Z22__fetch_global_Serial1v>:
{
   b807c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b807e:	4d0e      	ldr	r5, [pc, #56]	; (b80b8 <_Z22__fetch_global_Serial1v+0x3c>)
   b8080:	7829      	ldrb	r1, [r5, #0]
   b8082:	f3bf 8f5b 	dmb	ish
   b8086:	f011 0401 	ands.w	r4, r1, #1
{
   b808a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b808c:	d111      	bne.n	b80b2 <_Z22__fetch_global_Serial1v+0x36>
   b808e:	4628      	mov	r0, r5
   b8090:	f7fc f814 	bl	b40bc <__cxa_guard_acquire>
   b8094:	b168      	cbz	r0, b80b2 <_Z22__fetch_global_Serial1v+0x36>
   b8096:	a801      	add	r0, sp, #4
   b8098:	f7ff ffd6 	bl	b8048 <_Z20acquireSerial1Bufferv>
   b809c:	aa01      	add	r2, sp, #4
   b809e:	4621      	mov	r1, r4
   b80a0:	4806      	ldr	r0, [pc, #24]	; (b80bc <_Z22__fetch_global_Serial1v+0x40>)
   b80a2:	f7ff fd1d 	bl	b7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b80a6:	4628      	mov	r0, r5
   b80a8:	f7fc f80d 	bl	b40c6 <__cxa_guard_release>
   b80ac:	4804      	ldr	r0, [pc, #16]	; (b80c0 <_Z22__fetch_global_Serial1v+0x44>)
   b80ae:	f000 fd17 	bl	b8ae0 <atexit>
    return serial1;
}
   b80b2:	4802      	ldr	r0, [pc, #8]	; (b80bc <_Z22__fetch_global_Serial1v+0x40>)
   b80b4:	b007      	add	sp, #28
   b80b6:	bd30      	pop	{r4, r5, pc}
   b80b8:	2003e744 	.word	0x2003e744
   b80bc:	2003e748 	.word	0x2003e748
   b80c0:	000b8045 	.word	0x000b8045

000b80c4 <_ZnajRKSt9nothrow_t>:
   b80c4:	f7fb bfe9 	b.w	b409a <_Znaj>

000b80c8 <_ZSt25__throw_bad_function_callv>:
   b80c8:	b508      	push	{r3, lr}
   b80ca:	f7fe fcb7 	bl	b6a3c <abort>
	...

000b80d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b80d0:	4901      	ldr	r1, [pc, #4]	; (b80d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b80d2:	f000 b8f9 	b.w	b82c8 <_ZNKSt9type_infoeqERKS_>
   b80d6:	bf00      	nop
   b80d8:	000b9b28 	.word	0x000b9b28

000b80dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b80dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b80de:	2400      	movs	r4, #0
   b80e0:	2310      	movs	r3, #16
   b80e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b80e6:	6803      	ldr	r3, [r0, #0]
   b80e8:	4615      	mov	r5, r2
   b80ea:	699e      	ldr	r6, [r3, #24]
   b80ec:	6812      	ldr	r2, [r2, #0]
   b80ee:	466b      	mov	r3, sp
   b80f0:	e9cd 4400 	strd	r4, r4, [sp]
   b80f4:	47b0      	blx	r6
   b80f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b80fa:	f003 0306 	and.w	r3, r3, #6
   b80fe:	2b06      	cmp	r3, #6
   b8100:	bf03      	ittte	eq
   b8102:	9b00      	ldreq	r3, [sp, #0]
   b8104:	602b      	streq	r3, [r5, #0]
   b8106:	2001      	moveq	r0, #1
   b8108:	4620      	movne	r0, r4
   b810a:	b004      	add	sp, #16
   b810c:	bd70      	pop	{r4, r5, r6, pc}

000b810e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b810e:	9800      	ldr	r0, [sp, #0]
   b8110:	4290      	cmp	r0, r2
   b8112:	bf14      	ite	ne
   b8114:	2001      	movne	r0, #1
   b8116:	2006      	moveq	r0, #6
   b8118:	4770      	bx	lr
	...

000b811c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b811c:	b510      	push	{r4, lr}
   b811e:	4b03      	ldr	r3, [pc, #12]	; (b812c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8120:	6003      	str	r3, [r0, #0]
   b8122:	4604      	mov	r4, r0
   b8124:	f000 f8cd 	bl	b82c2 <_ZNSt9type_infoD1Ev>
   b8128:	4620      	mov	r0, r4
   b812a:	bd10      	pop	{r4, pc}
   b812c:	000b9b68 	.word	0x000b9b68

000b8130 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8130:	b510      	push	{r4, lr}
   b8132:	4604      	mov	r4, r0
   b8134:	f7ff fff2 	bl	b811c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8138:	4620      	mov	r0, r4
   b813a:	2108      	movs	r1, #8
   b813c:	f7fb ffaf 	bl	b409e <_ZdlPvj>
   b8140:	4620      	mov	r0, r4
   b8142:	bd10      	pop	{r4, pc}

000b8144 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8148:	461f      	mov	r7, r3
   b814a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b814e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8152:	4598      	cmp	r8, r3
   b8154:	4606      	mov	r6, r0
   b8156:	4615      	mov	r5, r2
   b8158:	d107      	bne.n	b816a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b815a:	9907      	ldr	r1, [sp, #28]
   b815c:	f000 f8b4 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b8160:	b118      	cbz	r0, b816a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8162:	7165      	strb	r5, [r4, #5]
   b8164:	2000      	movs	r0, #0
   b8166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b816a:	4639      	mov	r1, r7
   b816c:	4630      	mov	r0, r6
   b816e:	f000 f8ab 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b8172:	2800      	cmp	r0, #0
   b8174:	d0f6      	beq.n	b8164 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8176:	2301      	movs	r3, #1
   b8178:	f8c4 8000 	str.w	r8, [r4]
   b817c:	7125      	strb	r5, [r4, #4]
   b817e:	71a3      	strb	r3, [r4, #6]
   b8180:	e7f0      	b.n	b8164 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8182 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8182:	b538      	push	{r3, r4, r5, lr}
   b8184:	4615      	mov	r5, r2
   b8186:	461c      	mov	r4, r3
   b8188:	f000 f89e 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b818c:	b120      	cbz	r0, b8198 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b818e:	2308      	movs	r3, #8
   b8190:	60e3      	str	r3, [r4, #12]
   b8192:	2306      	movs	r3, #6
   b8194:	6025      	str	r5, [r4, #0]
   b8196:	7123      	strb	r3, [r4, #4]
   b8198:	bd38      	pop	{r3, r4, r5, pc}

000b819a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b819a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b819c:	4605      	mov	r5, r0
   b819e:	460c      	mov	r4, r1
   b81a0:	9201      	str	r2, [sp, #4]
   b81a2:	461e      	mov	r6, r3
   b81a4:	f000 f890 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b81a8:	b950      	cbnz	r0, b81c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b81aa:	2e03      	cmp	r6, #3
   b81ac:	d808      	bhi.n	b81c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b81ae:	6823      	ldr	r3, [r4, #0]
   b81b0:	9a01      	ldr	r2, [sp, #4]
   b81b2:	695b      	ldr	r3, [r3, #20]
   b81b4:	4629      	mov	r1, r5
   b81b6:	4620      	mov	r0, r4
   b81b8:	b002      	add	sp, #8
   b81ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b81be:	4718      	bx	r3
   b81c0:	b002      	add	sp, #8
   b81c2:	bd70      	pop	{r4, r5, r6, pc}

000b81c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b81c4:	b510      	push	{r4, lr}
   b81c6:	4b03      	ldr	r3, [pc, #12]	; (b81d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b81c8:	6003      	str	r3, [r0, #0]
   b81ca:	4604      	mov	r4, r0
   b81cc:	f7ff ffa6 	bl	b811c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b81d0:	4620      	mov	r0, r4
   b81d2:	bd10      	pop	{r4, pc}
   b81d4:	000b9bc8 	.word	0x000b9bc8

000b81d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b81d8:	b510      	push	{r4, lr}
   b81da:	4604      	mov	r4, r0
   b81dc:	f7ff fff2 	bl	b81c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b81e0:	4620      	mov	r0, r4
   b81e2:	210c      	movs	r1, #12
   b81e4:	f7fb ff5b 	bl	b409e <_ZdlPvj>
   b81e8:	4620      	mov	r0, r4
   b81ea:	bd10      	pop	{r4, pc}

000b81ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b81ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b81ee:	9f08      	ldr	r7, [sp, #32]
   b81f0:	4297      	cmp	r7, r2
   b81f2:	4605      	mov	r5, r0
   b81f4:	460e      	mov	r6, r1
   b81f6:	4614      	mov	r4, r2
   b81f8:	d00a      	beq.n	b8210 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b81fa:	68a8      	ldr	r0, [r5, #8]
   b81fc:	6802      	ldr	r2, [r0, #0]
   b81fe:	9708      	str	r7, [sp, #32]
   b8200:	6a15      	ldr	r5, [r2, #32]
   b8202:	4631      	mov	r1, r6
   b8204:	4622      	mov	r2, r4
   b8206:	46ac      	mov	ip, r5
   b8208:	b003      	add	sp, #12
   b820a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b820e:	4760      	bx	ip
   b8210:	4619      	mov	r1, r3
   b8212:	9301      	str	r3, [sp, #4]
   b8214:	f000 f858 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b8218:	9b01      	ldr	r3, [sp, #4]
   b821a:	2800      	cmp	r0, #0
   b821c:	d0ed      	beq.n	b81fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b821e:	2006      	movs	r0, #6
   b8220:	b003      	add	sp, #12
   b8222:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8224 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8224:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8228:	460d      	mov	r5, r1
   b822a:	4619      	mov	r1, r3
   b822c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8230:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8234:	4681      	mov	r9, r0
   b8236:	4617      	mov	r7, r2
   b8238:	4698      	mov	r8, r3
   b823a:	f000 f845 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b823e:	b190      	cbz	r0, b8266 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8240:	2d00      	cmp	r5, #0
   b8242:	6034      	str	r4, [r6, #0]
   b8244:	7137      	strb	r7, [r6, #4]
   b8246:	db09      	blt.n	b825c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8248:	1961      	adds	r1, r4, r5
   b824a:	458a      	cmp	sl, r1
   b824c:	bf0c      	ite	eq
   b824e:	2106      	moveq	r1, #6
   b8250:	2101      	movne	r1, #1
   b8252:	71b1      	strb	r1, [r6, #6]
   b8254:	2000      	movs	r0, #0
   b8256:	b001      	add	sp, #4
   b8258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b825c:	3502      	adds	r5, #2
   b825e:	d1f9      	bne.n	b8254 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8260:	2301      	movs	r3, #1
   b8262:	71b3      	strb	r3, [r6, #6]
   b8264:	e7f6      	b.n	b8254 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8266:	4554      	cmp	r4, sl
   b8268:	d106      	bne.n	b8278 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b826a:	4659      	mov	r1, fp
   b826c:	4648      	mov	r0, r9
   b826e:	f000 f82b 	bl	b82c8 <_ZNKSt9type_infoeqERKS_>
   b8272:	b108      	cbz	r0, b8278 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8274:	7177      	strb	r7, [r6, #5]
   b8276:	e7ed      	b.n	b8254 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8278:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b827c:	6803      	ldr	r3, [r0, #0]
   b827e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8282:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8286:	69dc      	ldr	r4, [r3, #28]
   b8288:	463a      	mov	r2, r7
   b828a:	4643      	mov	r3, r8
   b828c:	4629      	mov	r1, r5
   b828e:	46a4      	mov	ip, r4
   b8290:	b001      	add	sp, #4
   b8292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8296:	4760      	bx	ip

000b8298 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b829c:	4607      	mov	r7, r0
   b829e:	460c      	mov	r4, r1
   b82a0:	4615      	mov	r5, r2
   b82a2:	461e      	mov	r6, r3
   b82a4:	f7ff ff6d 	bl	b8182 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b82a8:	b948      	cbnz	r0, b82be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b82aa:	68b8      	ldr	r0, [r7, #8]
   b82ac:	6803      	ldr	r3, [r0, #0]
   b82ae:	699f      	ldr	r7, [r3, #24]
   b82b0:	462a      	mov	r2, r5
   b82b2:	4633      	mov	r3, r6
   b82b4:	4621      	mov	r1, r4
   b82b6:	46bc      	mov	ip, r7
   b82b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b82bc:	4760      	bx	ip
   b82be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b82c2 <_ZNSt9type_infoD1Ev>:
   b82c2:	4770      	bx	lr

000b82c4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b82c4:	2000      	movs	r0, #0
   b82c6:	4770      	bx	lr

000b82c8 <_ZNKSt9type_infoeqERKS_>:
   b82c8:	4281      	cmp	r1, r0
   b82ca:	b508      	push	{r3, lr}
   b82cc:	d00e      	beq.n	b82ec <_ZNKSt9type_infoeqERKS_+0x24>
   b82ce:	6840      	ldr	r0, [r0, #4]
   b82d0:	7803      	ldrb	r3, [r0, #0]
   b82d2:	2b2a      	cmp	r3, #42	; 0x2a
   b82d4:	d00c      	beq.n	b82f0 <_ZNKSt9type_infoeqERKS_+0x28>
   b82d6:	6849      	ldr	r1, [r1, #4]
   b82d8:	780b      	ldrb	r3, [r1, #0]
   b82da:	2b2a      	cmp	r3, #42	; 0x2a
   b82dc:	bf08      	it	eq
   b82de:	3101      	addeq	r1, #1
   b82e0:	f000 fc48 	bl	b8b74 <strcmp>
   b82e4:	fab0 f080 	clz	r0, r0
   b82e8:	0940      	lsrs	r0, r0, #5
   b82ea:	bd08      	pop	{r3, pc}
   b82ec:	2001      	movs	r0, #1
   b82ee:	e7fc      	b.n	b82ea <_ZNKSt9type_infoeqERKS_+0x22>
   b82f0:	2000      	movs	r0, #0
   b82f2:	e7fa      	b.n	b82ea <_ZNKSt9type_infoeqERKS_+0x22>

000b82f4 <__aeabi_drsub>:
   b82f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b82f8:	e002      	b.n	b8300 <__adddf3>
   b82fa:	bf00      	nop

000b82fc <__aeabi_dsub>:
   b82fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8300 <__adddf3>:
   b8300:	b530      	push	{r4, r5, lr}
   b8302:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8306:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b830a:	ea94 0f05 	teq	r4, r5
   b830e:	bf08      	it	eq
   b8310:	ea90 0f02 	teqeq	r0, r2
   b8314:	bf1f      	itttt	ne
   b8316:	ea54 0c00 	orrsne.w	ip, r4, r0
   b831a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b831e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8326:	f000 80e2 	beq.w	b84ee <__adddf3+0x1ee>
   b832a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b832e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8332:	bfb8      	it	lt
   b8334:	426d      	neglt	r5, r5
   b8336:	dd0c      	ble.n	b8352 <__adddf3+0x52>
   b8338:	442c      	add	r4, r5
   b833a:	ea80 0202 	eor.w	r2, r0, r2
   b833e:	ea81 0303 	eor.w	r3, r1, r3
   b8342:	ea82 0000 	eor.w	r0, r2, r0
   b8346:	ea83 0101 	eor.w	r1, r3, r1
   b834a:	ea80 0202 	eor.w	r2, r0, r2
   b834e:	ea81 0303 	eor.w	r3, r1, r3
   b8352:	2d36      	cmp	r5, #54	; 0x36
   b8354:	bf88      	it	hi
   b8356:	bd30      	pophi	{r4, r5, pc}
   b8358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b835c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8368:	d002      	beq.n	b8370 <__adddf3+0x70>
   b836a:	4240      	negs	r0, r0
   b836c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8374:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b837c:	d002      	beq.n	b8384 <__adddf3+0x84>
   b837e:	4252      	negs	r2, r2
   b8380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8384:	ea94 0f05 	teq	r4, r5
   b8388:	f000 80a7 	beq.w	b84da <__adddf3+0x1da>
   b838c:	f1a4 0401 	sub.w	r4, r4, #1
   b8390:	f1d5 0e20 	rsbs	lr, r5, #32
   b8394:	db0d      	blt.n	b83b2 <__adddf3+0xb2>
   b8396:	fa02 fc0e 	lsl.w	ip, r2, lr
   b839a:	fa22 f205 	lsr.w	r2, r2, r5
   b839e:	1880      	adds	r0, r0, r2
   b83a0:	f141 0100 	adc.w	r1, r1, #0
   b83a4:	fa03 f20e 	lsl.w	r2, r3, lr
   b83a8:	1880      	adds	r0, r0, r2
   b83aa:	fa43 f305 	asr.w	r3, r3, r5
   b83ae:	4159      	adcs	r1, r3
   b83b0:	e00e      	b.n	b83d0 <__adddf3+0xd0>
   b83b2:	f1a5 0520 	sub.w	r5, r5, #32
   b83b6:	f10e 0e20 	add.w	lr, lr, #32
   b83ba:	2a01      	cmp	r2, #1
   b83bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b83c0:	bf28      	it	cs
   b83c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b83c6:	fa43 f305 	asr.w	r3, r3, r5
   b83ca:	18c0      	adds	r0, r0, r3
   b83cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b83d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b83d4:	d507      	bpl.n	b83e6 <__adddf3+0xe6>
   b83d6:	f04f 0e00 	mov.w	lr, #0
   b83da:	f1dc 0c00 	rsbs	ip, ip, #0
   b83de:	eb7e 0000 	sbcs.w	r0, lr, r0
   b83e2:	eb6e 0101 	sbc.w	r1, lr, r1
   b83e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b83ea:	d31b      	bcc.n	b8424 <__adddf3+0x124>
   b83ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b83f0:	d30c      	bcc.n	b840c <__adddf3+0x10c>
   b83f2:	0849      	lsrs	r1, r1, #1
   b83f4:	ea5f 0030 	movs.w	r0, r0, rrx
   b83f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b83fc:	f104 0401 	add.w	r4, r4, #1
   b8400:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8408:	f080 809a 	bcs.w	b8540 <__adddf3+0x240>
   b840c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8410:	bf08      	it	eq
   b8412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8416:	f150 0000 	adcs.w	r0, r0, #0
   b841a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b841e:	ea41 0105 	orr.w	r1, r1, r5
   b8422:	bd30      	pop	{r4, r5, pc}
   b8424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8428:	4140      	adcs	r0, r0
   b842a:	eb41 0101 	adc.w	r1, r1, r1
   b842e:	3c01      	subs	r4, #1
   b8430:	bf28      	it	cs
   b8432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8436:	d2e9      	bcs.n	b840c <__adddf3+0x10c>
   b8438:	f091 0f00 	teq	r1, #0
   b843c:	bf04      	itt	eq
   b843e:	4601      	moveq	r1, r0
   b8440:	2000      	moveq	r0, #0
   b8442:	fab1 f381 	clz	r3, r1
   b8446:	bf08      	it	eq
   b8448:	3320      	addeq	r3, #32
   b844a:	f1a3 030b 	sub.w	r3, r3, #11
   b844e:	f1b3 0220 	subs.w	r2, r3, #32
   b8452:	da0c      	bge.n	b846e <__adddf3+0x16e>
   b8454:	320c      	adds	r2, #12
   b8456:	dd08      	ble.n	b846a <__adddf3+0x16a>
   b8458:	f102 0c14 	add.w	ip, r2, #20
   b845c:	f1c2 020c 	rsb	r2, r2, #12
   b8460:	fa01 f00c 	lsl.w	r0, r1, ip
   b8464:	fa21 f102 	lsr.w	r1, r1, r2
   b8468:	e00c      	b.n	b8484 <__adddf3+0x184>
   b846a:	f102 0214 	add.w	r2, r2, #20
   b846e:	bfd8      	it	le
   b8470:	f1c2 0c20 	rsble	ip, r2, #32
   b8474:	fa01 f102 	lsl.w	r1, r1, r2
   b8478:	fa20 fc0c 	lsr.w	ip, r0, ip
   b847c:	bfdc      	itt	le
   b847e:	ea41 010c 	orrle.w	r1, r1, ip
   b8482:	4090      	lslle	r0, r2
   b8484:	1ae4      	subs	r4, r4, r3
   b8486:	bfa2      	ittt	ge
   b8488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b848c:	4329      	orrge	r1, r5
   b848e:	bd30      	popge	{r4, r5, pc}
   b8490:	ea6f 0404 	mvn.w	r4, r4
   b8494:	3c1f      	subs	r4, #31
   b8496:	da1c      	bge.n	b84d2 <__adddf3+0x1d2>
   b8498:	340c      	adds	r4, #12
   b849a:	dc0e      	bgt.n	b84ba <__adddf3+0x1ba>
   b849c:	f104 0414 	add.w	r4, r4, #20
   b84a0:	f1c4 0220 	rsb	r2, r4, #32
   b84a4:	fa20 f004 	lsr.w	r0, r0, r4
   b84a8:	fa01 f302 	lsl.w	r3, r1, r2
   b84ac:	ea40 0003 	orr.w	r0, r0, r3
   b84b0:	fa21 f304 	lsr.w	r3, r1, r4
   b84b4:	ea45 0103 	orr.w	r1, r5, r3
   b84b8:	bd30      	pop	{r4, r5, pc}
   b84ba:	f1c4 040c 	rsb	r4, r4, #12
   b84be:	f1c4 0220 	rsb	r2, r4, #32
   b84c2:	fa20 f002 	lsr.w	r0, r0, r2
   b84c6:	fa01 f304 	lsl.w	r3, r1, r4
   b84ca:	ea40 0003 	orr.w	r0, r0, r3
   b84ce:	4629      	mov	r1, r5
   b84d0:	bd30      	pop	{r4, r5, pc}
   b84d2:	fa21 f004 	lsr.w	r0, r1, r4
   b84d6:	4629      	mov	r1, r5
   b84d8:	bd30      	pop	{r4, r5, pc}
   b84da:	f094 0f00 	teq	r4, #0
   b84de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b84e2:	bf06      	itte	eq
   b84e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b84e8:	3401      	addeq	r4, #1
   b84ea:	3d01      	subne	r5, #1
   b84ec:	e74e      	b.n	b838c <__adddf3+0x8c>
   b84ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b84f2:	bf18      	it	ne
   b84f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b84f8:	d029      	beq.n	b854e <__adddf3+0x24e>
   b84fa:	ea94 0f05 	teq	r4, r5
   b84fe:	bf08      	it	eq
   b8500:	ea90 0f02 	teqeq	r0, r2
   b8504:	d005      	beq.n	b8512 <__adddf3+0x212>
   b8506:	ea54 0c00 	orrs.w	ip, r4, r0
   b850a:	bf04      	itt	eq
   b850c:	4619      	moveq	r1, r3
   b850e:	4610      	moveq	r0, r2
   b8510:	bd30      	pop	{r4, r5, pc}
   b8512:	ea91 0f03 	teq	r1, r3
   b8516:	bf1e      	ittt	ne
   b8518:	2100      	movne	r1, #0
   b851a:	2000      	movne	r0, #0
   b851c:	bd30      	popne	{r4, r5, pc}
   b851e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8522:	d105      	bne.n	b8530 <__adddf3+0x230>
   b8524:	0040      	lsls	r0, r0, #1
   b8526:	4149      	adcs	r1, r1
   b8528:	bf28      	it	cs
   b852a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b852e:	bd30      	pop	{r4, r5, pc}
   b8530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8534:	bf3c      	itt	cc
   b8536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b853a:	bd30      	popcc	{r4, r5, pc}
   b853c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8548:	f04f 0000 	mov.w	r0, #0
   b854c:	bd30      	pop	{r4, r5, pc}
   b854e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8552:	bf1a      	itte	ne
   b8554:	4619      	movne	r1, r3
   b8556:	4610      	movne	r0, r2
   b8558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b855c:	bf1c      	itt	ne
   b855e:	460b      	movne	r3, r1
   b8560:	4602      	movne	r2, r0
   b8562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8566:	bf06      	itte	eq
   b8568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b856c:	ea91 0f03 	teqeq	r1, r3
   b8570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8574:	bd30      	pop	{r4, r5, pc}
   b8576:	bf00      	nop

000b8578 <__aeabi_ui2d>:
   b8578:	f090 0f00 	teq	r0, #0
   b857c:	bf04      	itt	eq
   b857e:	2100      	moveq	r1, #0
   b8580:	4770      	bxeq	lr
   b8582:	b530      	push	{r4, r5, lr}
   b8584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b858c:	f04f 0500 	mov.w	r5, #0
   b8590:	f04f 0100 	mov.w	r1, #0
   b8594:	e750      	b.n	b8438 <__adddf3+0x138>
   b8596:	bf00      	nop

000b8598 <__aeabi_i2d>:
   b8598:	f090 0f00 	teq	r0, #0
   b859c:	bf04      	itt	eq
   b859e:	2100      	moveq	r1, #0
   b85a0:	4770      	bxeq	lr
   b85a2:	b530      	push	{r4, r5, lr}
   b85a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b85a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b85ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b85b0:	bf48      	it	mi
   b85b2:	4240      	negmi	r0, r0
   b85b4:	f04f 0100 	mov.w	r1, #0
   b85b8:	e73e      	b.n	b8438 <__adddf3+0x138>
   b85ba:	bf00      	nop

000b85bc <__aeabi_f2d>:
   b85bc:	0042      	lsls	r2, r0, #1
   b85be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b85c2:	ea4f 0131 	mov.w	r1, r1, rrx
   b85c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b85ca:	bf1f      	itttt	ne
   b85cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b85d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b85d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b85d8:	4770      	bxne	lr
   b85da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b85de:	bf08      	it	eq
   b85e0:	4770      	bxeq	lr
   b85e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b85e6:	bf04      	itt	eq
   b85e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b85ec:	4770      	bxeq	lr
   b85ee:	b530      	push	{r4, r5, lr}
   b85f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b85f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b85f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b85fc:	e71c      	b.n	b8438 <__adddf3+0x138>
   b85fe:	bf00      	nop

000b8600 <__aeabi_ul2d>:
   b8600:	ea50 0201 	orrs.w	r2, r0, r1
   b8604:	bf08      	it	eq
   b8606:	4770      	bxeq	lr
   b8608:	b530      	push	{r4, r5, lr}
   b860a:	f04f 0500 	mov.w	r5, #0
   b860e:	e00a      	b.n	b8626 <__aeabi_l2d+0x16>

000b8610 <__aeabi_l2d>:
   b8610:	ea50 0201 	orrs.w	r2, r0, r1
   b8614:	bf08      	it	eq
   b8616:	4770      	bxeq	lr
   b8618:	b530      	push	{r4, r5, lr}
   b861a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b861e:	d502      	bpl.n	b8626 <__aeabi_l2d+0x16>
   b8620:	4240      	negs	r0, r0
   b8622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8626:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b862a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b862e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8632:	f43f aed8 	beq.w	b83e6 <__adddf3+0xe6>
   b8636:	f04f 0203 	mov.w	r2, #3
   b863a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b863e:	bf18      	it	ne
   b8640:	3203      	addne	r2, #3
   b8642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8646:	bf18      	it	ne
   b8648:	3203      	addne	r2, #3
   b864a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b864e:	f1c2 0320 	rsb	r3, r2, #32
   b8652:	fa00 fc03 	lsl.w	ip, r0, r3
   b8656:	fa20 f002 	lsr.w	r0, r0, r2
   b865a:	fa01 fe03 	lsl.w	lr, r1, r3
   b865e:	ea40 000e 	orr.w	r0, r0, lr
   b8662:	fa21 f102 	lsr.w	r1, r1, r2
   b8666:	4414      	add	r4, r2
   b8668:	e6bd      	b.n	b83e6 <__adddf3+0xe6>
   b866a:	bf00      	nop

000b866c <__aeabi_dmul>:
   b866c:	b570      	push	{r4, r5, r6, lr}
   b866e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b867a:	bf1d      	ittte	ne
   b867c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8680:	ea94 0f0c 	teqne	r4, ip
   b8684:	ea95 0f0c 	teqne	r5, ip
   b8688:	f000 f8de 	bleq	b8848 <__aeabi_dmul+0x1dc>
   b868c:	442c      	add	r4, r5
   b868e:	ea81 0603 	eor.w	r6, r1, r3
   b8692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b869a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b869e:	bf18      	it	ne
   b86a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b86a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b86a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b86ac:	d038      	beq.n	b8720 <__aeabi_dmul+0xb4>
   b86ae:	fba0 ce02 	umull	ip, lr, r0, r2
   b86b2:	f04f 0500 	mov.w	r5, #0
   b86b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b86ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b86be:	fbe0 e503 	umlal	lr, r5, r0, r3
   b86c2:	f04f 0600 	mov.w	r6, #0
   b86c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b86ca:	f09c 0f00 	teq	ip, #0
   b86ce:	bf18      	it	ne
   b86d0:	f04e 0e01 	orrne.w	lr, lr, #1
   b86d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b86d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b86dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b86e0:	d204      	bcs.n	b86ec <__aeabi_dmul+0x80>
   b86e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b86e6:	416d      	adcs	r5, r5
   b86e8:	eb46 0606 	adc.w	r6, r6, r6
   b86ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b86f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b86f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b86f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b86fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8704:	bf88      	it	hi
   b8706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b870a:	d81e      	bhi.n	b874a <__aeabi_dmul+0xde>
   b870c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8710:	bf08      	it	eq
   b8712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8716:	f150 0000 	adcs.w	r0, r0, #0
   b871a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b871e:	bd70      	pop	{r4, r5, r6, pc}
   b8720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8724:	ea46 0101 	orr.w	r1, r6, r1
   b8728:	ea40 0002 	orr.w	r0, r0, r2
   b872c:	ea81 0103 	eor.w	r1, r1, r3
   b8730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8734:	bfc2      	ittt	gt
   b8736:	ebd4 050c 	rsbsgt	r5, r4, ip
   b873a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b873e:	bd70      	popgt	{r4, r5, r6, pc}
   b8740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8744:	f04f 0e00 	mov.w	lr, #0
   b8748:	3c01      	subs	r4, #1
   b874a:	f300 80ab 	bgt.w	b88a4 <__aeabi_dmul+0x238>
   b874e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8752:	bfde      	ittt	le
   b8754:	2000      	movle	r0, #0
   b8756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b875a:	bd70      	pople	{r4, r5, r6, pc}
   b875c:	f1c4 0400 	rsb	r4, r4, #0
   b8760:	3c20      	subs	r4, #32
   b8762:	da35      	bge.n	b87d0 <__aeabi_dmul+0x164>
   b8764:	340c      	adds	r4, #12
   b8766:	dc1b      	bgt.n	b87a0 <__aeabi_dmul+0x134>
   b8768:	f104 0414 	add.w	r4, r4, #20
   b876c:	f1c4 0520 	rsb	r5, r4, #32
   b8770:	fa00 f305 	lsl.w	r3, r0, r5
   b8774:	fa20 f004 	lsr.w	r0, r0, r4
   b8778:	fa01 f205 	lsl.w	r2, r1, r5
   b877c:	ea40 0002 	orr.w	r0, r0, r2
   b8780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b878c:	fa21 f604 	lsr.w	r6, r1, r4
   b8790:	eb42 0106 	adc.w	r1, r2, r6
   b8794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8798:	bf08      	it	eq
   b879a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b879e:	bd70      	pop	{r4, r5, r6, pc}
   b87a0:	f1c4 040c 	rsb	r4, r4, #12
   b87a4:	f1c4 0520 	rsb	r5, r4, #32
   b87a8:	fa00 f304 	lsl.w	r3, r0, r4
   b87ac:	fa20 f005 	lsr.w	r0, r0, r5
   b87b0:	fa01 f204 	lsl.w	r2, r1, r4
   b87b4:	ea40 0002 	orr.w	r0, r0, r2
   b87b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b87bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b87c0:	f141 0100 	adc.w	r1, r1, #0
   b87c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b87c8:	bf08      	it	eq
   b87ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b87ce:	bd70      	pop	{r4, r5, r6, pc}
   b87d0:	f1c4 0520 	rsb	r5, r4, #32
   b87d4:	fa00 f205 	lsl.w	r2, r0, r5
   b87d8:	ea4e 0e02 	orr.w	lr, lr, r2
   b87dc:	fa20 f304 	lsr.w	r3, r0, r4
   b87e0:	fa01 f205 	lsl.w	r2, r1, r5
   b87e4:	ea43 0302 	orr.w	r3, r3, r2
   b87e8:	fa21 f004 	lsr.w	r0, r1, r4
   b87ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b87f0:	fa21 f204 	lsr.w	r2, r1, r4
   b87f4:	ea20 0002 	bic.w	r0, r0, r2
   b87f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b87fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8800:	bf08      	it	eq
   b8802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8806:	bd70      	pop	{r4, r5, r6, pc}
   b8808:	f094 0f00 	teq	r4, #0
   b880c:	d10f      	bne.n	b882e <__aeabi_dmul+0x1c2>
   b880e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8812:	0040      	lsls	r0, r0, #1
   b8814:	eb41 0101 	adc.w	r1, r1, r1
   b8818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b881c:	bf08      	it	eq
   b881e:	3c01      	subeq	r4, #1
   b8820:	d0f7      	beq.n	b8812 <__aeabi_dmul+0x1a6>
   b8822:	ea41 0106 	orr.w	r1, r1, r6
   b8826:	f095 0f00 	teq	r5, #0
   b882a:	bf18      	it	ne
   b882c:	4770      	bxne	lr
   b882e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8832:	0052      	lsls	r2, r2, #1
   b8834:	eb43 0303 	adc.w	r3, r3, r3
   b8838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b883c:	bf08      	it	eq
   b883e:	3d01      	subeq	r5, #1
   b8840:	d0f7      	beq.n	b8832 <__aeabi_dmul+0x1c6>
   b8842:	ea43 0306 	orr.w	r3, r3, r6
   b8846:	4770      	bx	lr
   b8848:	ea94 0f0c 	teq	r4, ip
   b884c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8850:	bf18      	it	ne
   b8852:	ea95 0f0c 	teqne	r5, ip
   b8856:	d00c      	beq.n	b8872 <__aeabi_dmul+0x206>
   b8858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b885c:	bf18      	it	ne
   b885e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8862:	d1d1      	bne.n	b8808 <__aeabi_dmul+0x19c>
   b8864:	ea81 0103 	eor.w	r1, r1, r3
   b8868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b886c:	f04f 0000 	mov.w	r0, #0
   b8870:	bd70      	pop	{r4, r5, r6, pc}
   b8872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8876:	bf06      	itte	eq
   b8878:	4610      	moveq	r0, r2
   b887a:	4619      	moveq	r1, r3
   b887c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8880:	d019      	beq.n	b88b6 <__aeabi_dmul+0x24a>
   b8882:	ea94 0f0c 	teq	r4, ip
   b8886:	d102      	bne.n	b888e <__aeabi_dmul+0x222>
   b8888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b888c:	d113      	bne.n	b88b6 <__aeabi_dmul+0x24a>
   b888e:	ea95 0f0c 	teq	r5, ip
   b8892:	d105      	bne.n	b88a0 <__aeabi_dmul+0x234>
   b8894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8898:	bf1c      	itt	ne
   b889a:	4610      	movne	r0, r2
   b889c:	4619      	movne	r1, r3
   b889e:	d10a      	bne.n	b88b6 <__aeabi_dmul+0x24a>
   b88a0:	ea81 0103 	eor.w	r1, r1, r3
   b88a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b88a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b88ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b88b0:	f04f 0000 	mov.w	r0, #0
   b88b4:	bd70      	pop	{r4, r5, r6, pc}
   b88b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b88ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b88be:	bd70      	pop	{r4, r5, r6, pc}

000b88c0 <__aeabi_ddiv>:
   b88c0:	b570      	push	{r4, r5, r6, lr}
   b88c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b88c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b88ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b88ce:	bf1d      	ittte	ne
   b88d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b88d4:	ea94 0f0c 	teqne	r4, ip
   b88d8:	ea95 0f0c 	teqne	r5, ip
   b88dc:	f000 f8a7 	bleq	b8a2e <__aeabi_ddiv+0x16e>
   b88e0:	eba4 0405 	sub.w	r4, r4, r5
   b88e4:	ea81 0e03 	eor.w	lr, r1, r3
   b88e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b88ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b88f0:	f000 8088 	beq.w	b8a04 <__aeabi_ddiv+0x144>
   b88f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b88f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b88fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8904:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b890c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8910:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8918:	429d      	cmp	r5, r3
   b891a:	bf08      	it	eq
   b891c:	4296      	cmpeq	r6, r2
   b891e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8922:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8926:	d202      	bcs.n	b892e <__aeabi_ddiv+0x6e>
   b8928:	085b      	lsrs	r3, r3, #1
   b892a:	ea4f 0232 	mov.w	r2, r2, rrx
   b892e:	1ab6      	subs	r6, r6, r2
   b8930:	eb65 0503 	sbc.w	r5, r5, r3
   b8934:	085b      	lsrs	r3, r3, #1
   b8936:	ea4f 0232 	mov.w	r2, r2, rrx
   b893a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b893e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8942:	ebb6 0e02 	subs.w	lr, r6, r2
   b8946:	eb75 0e03 	sbcs.w	lr, r5, r3
   b894a:	bf22      	ittt	cs
   b894c:	1ab6      	subcs	r6, r6, r2
   b894e:	4675      	movcs	r5, lr
   b8950:	ea40 000c 	orrcs.w	r0, r0, ip
   b8954:	085b      	lsrs	r3, r3, #1
   b8956:	ea4f 0232 	mov.w	r2, r2, rrx
   b895a:	ebb6 0e02 	subs.w	lr, r6, r2
   b895e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8962:	bf22      	ittt	cs
   b8964:	1ab6      	subcs	r6, r6, r2
   b8966:	4675      	movcs	r5, lr
   b8968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b896c:	085b      	lsrs	r3, r3, #1
   b896e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8972:	ebb6 0e02 	subs.w	lr, r6, r2
   b8976:	eb75 0e03 	sbcs.w	lr, r5, r3
   b897a:	bf22      	ittt	cs
   b897c:	1ab6      	subcs	r6, r6, r2
   b897e:	4675      	movcs	r5, lr
   b8980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8984:	085b      	lsrs	r3, r3, #1
   b8986:	ea4f 0232 	mov.w	r2, r2, rrx
   b898a:	ebb6 0e02 	subs.w	lr, r6, r2
   b898e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8992:	bf22      	ittt	cs
   b8994:	1ab6      	subcs	r6, r6, r2
   b8996:	4675      	movcs	r5, lr
   b8998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b899c:	ea55 0e06 	orrs.w	lr, r5, r6
   b89a0:	d018      	beq.n	b89d4 <__aeabi_ddiv+0x114>
   b89a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b89a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b89aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b89ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b89b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b89b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b89ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b89be:	d1c0      	bne.n	b8942 <__aeabi_ddiv+0x82>
   b89c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b89c4:	d10b      	bne.n	b89de <__aeabi_ddiv+0x11e>
   b89c6:	ea41 0100 	orr.w	r1, r1, r0
   b89ca:	f04f 0000 	mov.w	r0, #0
   b89ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b89d2:	e7b6      	b.n	b8942 <__aeabi_ddiv+0x82>
   b89d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b89d8:	bf04      	itt	eq
   b89da:	4301      	orreq	r1, r0
   b89dc:	2000      	moveq	r0, #0
   b89de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b89e2:	bf88      	it	hi
   b89e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b89e8:	f63f aeaf 	bhi.w	b874a <__aeabi_dmul+0xde>
   b89ec:	ebb5 0c03 	subs.w	ip, r5, r3
   b89f0:	bf04      	itt	eq
   b89f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b89f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b89fa:	f150 0000 	adcs.w	r0, r0, #0
   b89fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8a02:	bd70      	pop	{r4, r5, r6, pc}
   b8a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8a10:	bfc2      	ittt	gt
   b8a12:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8a1a:	bd70      	popgt	{r4, r5, r6, pc}
   b8a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8a20:	f04f 0e00 	mov.w	lr, #0
   b8a24:	3c01      	subs	r4, #1
   b8a26:	e690      	b.n	b874a <__aeabi_dmul+0xde>
   b8a28:	ea45 0e06 	orr.w	lr, r5, r6
   b8a2c:	e68d      	b.n	b874a <__aeabi_dmul+0xde>
   b8a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8a32:	ea94 0f0c 	teq	r4, ip
   b8a36:	bf08      	it	eq
   b8a38:	ea95 0f0c 	teqeq	r5, ip
   b8a3c:	f43f af3b 	beq.w	b88b6 <__aeabi_dmul+0x24a>
   b8a40:	ea94 0f0c 	teq	r4, ip
   b8a44:	d10a      	bne.n	b8a5c <__aeabi_ddiv+0x19c>
   b8a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8a4a:	f47f af34 	bne.w	b88b6 <__aeabi_dmul+0x24a>
   b8a4e:	ea95 0f0c 	teq	r5, ip
   b8a52:	f47f af25 	bne.w	b88a0 <__aeabi_dmul+0x234>
   b8a56:	4610      	mov	r0, r2
   b8a58:	4619      	mov	r1, r3
   b8a5a:	e72c      	b.n	b88b6 <__aeabi_dmul+0x24a>
   b8a5c:	ea95 0f0c 	teq	r5, ip
   b8a60:	d106      	bne.n	b8a70 <__aeabi_ddiv+0x1b0>
   b8a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8a66:	f43f aefd 	beq.w	b8864 <__aeabi_dmul+0x1f8>
   b8a6a:	4610      	mov	r0, r2
   b8a6c:	4619      	mov	r1, r3
   b8a6e:	e722      	b.n	b88b6 <__aeabi_dmul+0x24a>
   b8a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8a74:	bf18      	it	ne
   b8a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8a7a:	f47f aec5 	bne.w	b8808 <__aeabi_dmul+0x19c>
   b8a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8a82:	f47f af0d 	bne.w	b88a0 <__aeabi_dmul+0x234>
   b8a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8a8a:	f47f aeeb 	bne.w	b8864 <__aeabi_dmul+0x1f8>
   b8a8e:	e712      	b.n	b88b6 <__aeabi_dmul+0x24a>

000b8a90 <__aeabi_d2iz>:
   b8a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8a98:	d215      	bcs.n	b8ac6 <__aeabi_d2iz+0x36>
   b8a9a:	d511      	bpl.n	b8ac0 <__aeabi_d2iz+0x30>
   b8a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8aa4:	d912      	bls.n	b8acc <__aeabi_d2iz+0x3c>
   b8aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8ab6:	fa23 f002 	lsr.w	r0, r3, r2
   b8aba:	bf18      	it	ne
   b8abc:	4240      	negne	r0, r0
   b8abe:	4770      	bx	lr
   b8ac0:	f04f 0000 	mov.w	r0, #0
   b8ac4:	4770      	bx	lr
   b8ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8aca:	d105      	bne.n	b8ad8 <__aeabi_d2iz+0x48>
   b8acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8ad0:	bf08      	it	eq
   b8ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8ad6:	4770      	bx	lr
   b8ad8:	f04f 0000 	mov.w	r0, #0
   b8adc:	4770      	bx	lr
   b8ade:	bf00      	nop

000b8ae0 <atexit>:
   b8ae0:	2300      	movs	r3, #0
   b8ae2:	4601      	mov	r1, r0
   b8ae4:	461a      	mov	r2, r3
   b8ae6:	4618      	mov	r0, r3
   b8ae8:	f000 b85e 	b.w	b8ba8 <__register_exitproc>

000b8aec <memcpy>:
   b8aec:	440a      	add	r2, r1
   b8aee:	4291      	cmp	r1, r2
   b8af0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8af4:	d100      	bne.n	b8af8 <memcpy+0xc>
   b8af6:	4770      	bx	lr
   b8af8:	b510      	push	{r4, lr}
   b8afa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8afe:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8b02:	4291      	cmp	r1, r2
   b8b04:	d1f9      	bne.n	b8afa <memcpy+0xe>
   b8b06:	bd10      	pop	{r4, pc}

000b8b08 <memset>:
   b8b08:	4402      	add	r2, r0
   b8b0a:	4603      	mov	r3, r0
   b8b0c:	4293      	cmp	r3, r2
   b8b0e:	d100      	bne.n	b8b12 <memset+0xa>
   b8b10:	4770      	bx	lr
   b8b12:	f803 1b01 	strb.w	r1, [r3], #1
   b8b16:	e7f9      	b.n	b8b0c <memset+0x4>

000b8b18 <srand>:
   b8b18:	b538      	push	{r3, r4, r5, lr}
   b8b1a:	4b10      	ldr	r3, [pc, #64]	; (b8b5c <srand+0x44>)
   b8b1c:	681d      	ldr	r5, [r3, #0]
   b8b1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b20:	4604      	mov	r4, r0
   b8b22:	b9b3      	cbnz	r3, b8b52 <srand+0x3a>
   b8b24:	2018      	movs	r0, #24
   b8b26:	f7fd ff69 	bl	b69fc <malloc>
   b8b2a:	4602      	mov	r2, r0
   b8b2c:	63a8      	str	r0, [r5, #56]	; 0x38
   b8b2e:	b920      	cbnz	r0, b8b3a <srand+0x22>
   b8b30:	4b0b      	ldr	r3, [pc, #44]	; (b8b60 <srand+0x48>)
   b8b32:	480c      	ldr	r0, [pc, #48]	; (b8b64 <srand+0x4c>)
   b8b34:	2142      	movs	r1, #66	; 0x42
   b8b36:	f7fd ff91 	bl	b6a5c <__assert_func>
   b8b3a:	490b      	ldr	r1, [pc, #44]	; (b8b68 <srand+0x50>)
   b8b3c:	4b0b      	ldr	r3, [pc, #44]	; (b8b6c <srand+0x54>)
   b8b3e:	e9c0 1300 	strd	r1, r3, [r0]
   b8b42:	4b0b      	ldr	r3, [pc, #44]	; (b8b70 <srand+0x58>)
   b8b44:	6083      	str	r3, [r0, #8]
   b8b46:	230b      	movs	r3, #11
   b8b48:	8183      	strh	r3, [r0, #12]
   b8b4a:	2100      	movs	r1, #0
   b8b4c:	2001      	movs	r0, #1
   b8b4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8b52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b54:	2200      	movs	r2, #0
   b8b56:	611c      	str	r4, [r3, #16]
   b8b58:	615a      	str	r2, [r3, #20]
   b8b5a:	bd38      	pop	{r3, r4, r5, pc}
   b8b5c:	2003e468 	.word	0x2003e468
   b8b60:	000b9c01 	.word	0x000b9c01
   b8b64:	000b9c18 	.word	0x000b9c18
   b8b68:	abcd330e 	.word	0xabcd330e
   b8b6c:	e66d1234 	.word	0xe66d1234
   b8b70:	0005deec 	.word	0x0005deec

000b8b74 <strcmp>:
   b8b74:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8b78:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8b7c:	2a01      	cmp	r2, #1
   b8b7e:	bf28      	it	cs
   b8b80:	429a      	cmpcs	r2, r3
   b8b82:	d0f7      	beq.n	b8b74 <strcmp>
   b8b84:	1ad0      	subs	r0, r2, r3
   b8b86:	4770      	bx	lr

000b8b88 <strcpy>:
   b8b88:	4603      	mov	r3, r0
   b8b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8b8e:	f803 2b01 	strb.w	r2, [r3], #1
   b8b92:	2a00      	cmp	r2, #0
   b8b94:	d1f9      	bne.n	b8b8a <strcpy+0x2>
   b8b96:	4770      	bx	lr

000b8b98 <strlen>:
   b8b98:	4603      	mov	r3, r0
   b8b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8b9e:	2a00      	cmp	r2, #0
   b8ba0:	d1fb      	bne.n	b8b9a <strlen+0x2>
   b8ba2:	1a18      	subs	r0, r3, r0
   b8ba4:	3801      	subs	r0, #1
   b8ba6:	4770      	bx	lr

000b8ba8 <__register_exitproc>:
   b8ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8bac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8c68 <__register_exitproc+0xc0>
   b8bb0:	4606      	mov	r6, r0
   b8bb2:	f8d8 0000 	ldr.w	r0, [r8]
   b8bb6:	461f      	mov	r7, r3
   b8bb8:	460d      	mov	r5, r1
   b8bba:	4691      	mov	r9, r2
   b8bbc:	f000 f856 	bl	b8c6c <__retarget_lock_acquire_recursive>
   b8bc0:	4b25      	ldr	r3, [pc, #148]	; (b8c58 <__register_exitproc+0xb0>)
   b8bc2:	681c      	ldr	r4, [r3, #0]
   b8bc4:	b934      	cbnz	r4, b8bd4 <__register_exitproc+0x2c>
   b8bc6:	4c25      	ldr	r4, [pc, #148]	; (b8c5c <__register_exitproc+0xb4>)
   b8bc8:	601c      	str	r4, [r3, #0]
   b8bca:	4b25      	ldr	r3, [pc, #148]	; (b8c60 <__register_exitproc+0xb8>)
   b8bcc:	b113      	cbz	r3, b8bd4 <__register_exitproc+0x2c>
   b8bce:	681b      	ldr	r3, [r3, #0]
   b8bd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8bd4:	6863      	ldr	r3, [r4, #4]
   b8bd6:	2b1f      	cmp	r3, #31
   b8bd8:	dd07      	ble.n	b8bea <__register_exitproc+0x42>
   b8bda:	f8d8 0000 	ldr.w	r0, [r8]
   b8bde:	f000 f847 	bl	b8c70 <__retarget_lock_release_recursive>
   b8be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8bea:	b34e      	cbz	r6, b8c40 <__register_exitproc+0x98>
   b8bec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8bf0:	b988      	cbnz	r0, b8c16 <__register_exitproc+0x6e>
   b8bf2:	4b1c      	ldr	r3, [pc, #112]	; (b8c64 <__register_exitproc+0xbc>)
   b8bf4:	b923      	cbnz	r3, b8c00 <__register_exitproc+0x58>
   b8bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b8bfa:	f000 f838 	bl	b8c6e <__retarget_lock_release>
   b8bfe:	e7f0      	b.n	b8be2 <__register_exitproc+0x3a>
   b8c00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8c04:	f7fd fefa 	bl	b69fc <malloc>
   b8c08:	2800      	cmp	r0, #0
   b8c0a:	d0f4      	beq.n	b8bf6 <__register_exitproc+0x4e>
   b8c0c:	2300      	movs	r3, #0
   b8c0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8c12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8c16:	6863      	ldr	r3, [r4, #4]
   b8c18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8c1c:	2201      	movs	r2, #1
   b8c1e:	409a      	lsls	r2, r3
   b8c20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8c24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8c28:	4313      	orrs	r3, r2
   b8c2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8c2e:	2e02      	cmp	r6, #2
   b8c30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8c34:	bf02      	ittt	eq
   b8c36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8c3a:	4313      	orreq	r3, r2
   b8c3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8c40:	6863      	ldr	r3, [r4, #4]
   b8c42:	f8d8 0000 	ldr.w	r0, [r8]
   b8c46:	1c5a      	adds	r2, r3, #1
   b8c48:	3302      	adds	r3, #2
   b8c4a:	6062      	str	r2, [r4, #4]
   b8c4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8c50:	f000 f80e 	bl	b8c70 <__retarget_lock_release_recursive>
   b8c54:	2000      	movs	r0, #0
   b8c56:	e7c6      	b.n	b8be6 <__register_exitproc+0x3e>
   b8c58:	2003e7e8 	.word	0x2003e7e8
   b8c5c:	2003e75c 	.word	0x2003e75c
   b8c60:	00000000 	.word	0x00000000
   b8c64:	000b69fd 	.word	0x000b69fd
   b8c68:	2003e4cc 	.word	0x2003e4cc

000b8c6c <__retarget_lock_acquire_recursive>:
   b8c6c:	4770      	bx	lr

000b8c6e <__retarget_lock_release>:
   b8c6e:	4770      	bx	lr

000b8c70 <__retarget_lock_release_recursive>:
   b8c70:	4770      	bx	lr

000b8c72 <link_code_end>:
	...

000b8c74 <dynalib_user>:
   b8c74:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8c84:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8c94:	7620 7269 7574 6c61 4100 7373 7265 6974      virtual.Asserti
   b8ca4:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b8cb4:	3c20 2820 3233 2b20 3120 2936 4e00 206f      < (32 + 16).No 
   b8cc4:	6843 6e61 6567 2d20 4320 6e61 6563 6c6c     Change - Cancell
   b8cd4:	6e69 2067 4d43 0a44 7b00 6f22 226e 743a     ing CMD..{"on":t
   b8ce4:	7572 2c65 7322 7461 3a22 2c00 6222 6972     rue,"sat":.,"bri
   b8cf4:	3a22 2c00 6822 6575 3a22 7b00 6f22 226e     ":.,"hue":.{"on"
   b8d04:	663a 6c61 6573 007d 6553 646e 6e69 2067     :false}.Sending 
   b8d14:	6f43 6d6d 6e61 2064 6f74 4820 6575 5000     Command to Hue.P
   b8d24:	5455 2f20 7061 2f69 2f00 696c 6867 7374     UT /api/./lights
   b8d34:	002f 732f 6174 6574 4820 5454 2f50 2e31     /./state HTTP/1.
   b8d44:	0031 6f48 7473 203a 4300 6e6f 6574 746e     1.Host: .Content
   b8d54:	4c2d 6e65 7467 3a68 0020 6f43 746e 6e65     -Length: .Conten
   b8d64:	2d74 7954 6570 203a 6574 7478 702f 616c     t-Type: text/pla
   b8d74:	6e69 633b 6168 7372 7465 553d 4654 382d     in;charset=UTF-8
   b8d84:	4600 6f72 206d 7548 0065 7753 7469 6863     .From Hue.Switch
   b8d94:	4e4f 2520 2069 000a 3f3c 6d78 206c 6576     ON %i ..<?xml ve
   b8da4:	7372 6f69 3d6e 3122 302e 2022 6e65 6f63     rsion="1.0" enco
   b8db4:	6964 676e 223d 7475 2d66 2238 3e3f 733c     ding="utf-8"?><s
   b8dc4:	453a 766e 6c65 706f 2065 6d78 6e6c 3a73     :Envelope xmlns:
   b8dd4:	3d73 6822 7474 3a70 2f2f 6373 6568 616d     s="http://schema
   b8de4:	2e73 6d78 736c 616f 2e70 726f 2f67 6f73     s.xmlsoap.org/so
   b8df4:	7061 652f 766e 6c65 706f 2f65 2022 3a73     ap/envelope/" s:
   b8e04:	6e65 6f63 6964 676e 7453 6c79 3d65 6822     encodingStyle="h
   b8e14:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b8e24:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b8e34:	636e 646f 6e69 2f67 3e22 733c 423a 646f     ncoding/"><s:Bod
   b8e44:	3e79 753c 533a 7465 6942 616e 7972 7453     y><u:SetBinarySt
   b8e54:	7461 2065 6d78 6e6c 3a73 3d75 7522 6e72     ate xmlns:u="urn
   b8e64:	423a 6c65 696b 3a6e 6573 7672 6369 3a65     :Belkin:service:
   b8e74:	6162 6973 6563 6576 746e 313a 3e22 423c     basicevent:1"><B
   b8e84:	6e69 7261 5379 6174 6574 313e 2f3c 6942     inaryState>1</Bi
   b8e94:	616e 7972 7453 7461 3e65 2f3c 3a75 6553     naryState></u:Se
   b8ea4:	4274 6e69 7261 5379 6174 6574 3c3e 732f     tBinaryState></s
   b8eb4:	423a 646f 3e79 2f3c 3a73 6e45 6576 6f6c     :Body></s:Envelo
   b8ec4:	6570 003e 4f50 5453 2f20 7075 706e 632f     pe>.POST /upnp/c
   b8ed4:	6e6f 7274 6c6f 622f 7361 6369 7665 6e65     ontrol/basiceven
   b8ee4:	3174 4820 5454 2f50 2e31 0031 6f43 746e     t1 HTTP/1.1.Cont
   b8ef4:	6e65 2d74 7954 6570 203a 6574 7478 782f     ent-Type: text/x
   b8f04:	6c6d 203b 6863 7261 6573 3d74 7475 2d66     ml; charset=utf-
   b8f14:	0038 4f53 5041 4341 4954 4e4f 203a 7522     8.SOAPACTION: "u
   b8f24:	6e72 423a 6c65 696b 3a6e 6573 7672 6369     rn:Belkin:servic
   b8f34:	3a65 6162 6973 6563 6576 746e 313a 5323     e:basicevent:1#S
   b8f44:	7465 6942 616e 7972 7453 7461 2265 4300     etBinaryState".C
   b8f54:	6e6f 656e 7463 6f69 3a6e 6b20 6565 2d70     onnection: keep-
   b8f64:	6c61 7669 0065 7773 7469 6863 464f 2046     alive.switchOFF 
   b8f74:	6925 0a20 3c00 783f 6c6d 7620 7265 6973     %i ..<?xml versi
   b8f84:	6e6f 223d 2e31 2230 6520 636e 646f 6e69     on="1.0" encodin
   b8f94:	3d67 7522 6674 382d 3f22 3c3e 3a73 6e45     g="utf-8"?><s:En
   b8fa4:	6576 6f6c 6570 7820 6c6d 736e 733a 223d     velope xmlns:s="
   b8fb4:	7468 7074 2f3a 732f 6863 6d65 7361 782e     http://schemas.x
   b8fc4:	6c6d 6f73 7061 6f2e 6772 732f 616f 2f70     mlsoap.org/soap/
   b8fd4:	6e65 6576 6f6c 6570 222f 7320 653a 636e     envelope/" s:enc
   b8fe4:	646f 6e69 5367 7974 656c 223d 7468 7074     odingStyle="http
   b8ff4:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b9004:	7061 6f2e 6772 732f 616f 2f70 6e65 6f63     ap.org/soap/enco
   b9014:	6964 676e 222f 3c3e 3a73 6f42 7964 3c3e     ding/"><s:Body><
   b9024:	3a75 6553 4274 6e69 7261 5379 6174 6574     u:SetBinaryState
   b9034:	7820 6c6d 736e 753a 223d 7275 3a6e 6542      xmlns:u="urn:Be
   b9044:	6b6c 6e69 733a 7265 6976 6563 623a 7361     lkin:service:bas
   b9054:	6369 7665 6e65 3a74 2231 3c3e 6942 616e     icevent:1"><Bina
   b9064:	7972 7453 7461 3e65 3c30 422f 6e69 7261     ryState>0</Binar
   b9074:	5379 6174 6574 3c3e 752f 533a 7465 6942     yState></u:SetBi
   b9084:	616e 7972 7453 7461 3e65 2f3c 3a73 6f42     naryState></s:Bo
   b9094:	7964 3c3e 732f 453a 766e 6c65 706f 3e65     dy></s:Envelope>
   b90a4:	4900 546f 654e 7774 726f 006b 7325 000a     .IoTNetwork.%s..
   b90b4:	7325 5400 203a 2528 2569 2963 5400 4d45     %s.T: (%i%c).TEM
   b90c4:	2050 5244 504f 4420 5445 4345 4554 0a44     P DROP DETECTED.
   b90d4:	2500 0a69 3100 3239 312e 3836 312e 332e     .%i..192.168.1.3
   b90e4:	0030 3931 2e32 3631 2e38 2e31 3133 3100     0.192.168.1.31.1
   b90f4:	3239 312e 3836 312e 332e 0032 3931 2e32     92.168.1.32.192.
   b9104:	3631 2e38 2e31 3333 3100 3239 312e 3836     168.1.33.192.168
   b9114:	312e 332e 0034                              .1.34.

000b911a <_ZL11hueUsername>:
   b911a:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b912a:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b913a:	7438 334d 4637 5433                          8tM37F3T.

000b9143 <_ZL8hueHubIP>:
   b9143:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b914f <_ZL9ghost_bmp>:
	...
   b9167:	0000 0700 00c0 0000 0000 0f00 00f0 0800     ................
   b9177:	0000 3f00 00f8 3000 0000 7f00 00fc 7000     ...?...0.......p
   b9187:	0000 ff00 00fe 7000 0000 ff00 00ff 7000     .......p.......p
   b9197:	0010 f301 00cf f000 0010 f301 80cf f000     ................
   b91a7:	0018 f301 80cf f001 000c f301 80cf e003     ................
   b91b7:	000f ff01 80ff c01f f80f ff00 80ff c03f     ..............?.
   b91c7:	fc07 fe01 807f c03f fe07 fe01 807f c03f     ......?.......?.
   b91d7:	ff07 fe01 807f c07f ff03 fe03 c17f 80ff     ................
   b91e7:	ff01 ffcf ff7f 80ff ff00 ffff ffff 00ff     ................
   b91f7:	3f00 ffff ffff 00f8 3f00 ffff ffff 00f0     .?.......?......
   b9207:	1f00 ffff ffff 00e0 0f00 ffff ffff 00e0     ................
   b9217:	0700 ffff ffff 00e0 0100 ffff ffff 00e0     ................
   b9227:	0000 ffff ffff 00e0 0000 ffff ffff 00e0     ................
   b9237:	0000 ff7f ffff 00c0 0000 ff7f ffff 00c0     ................
   b9247:	0000 ff3f ffff 0080 0000 ff1f feff 0000     ..?.............
   b9257:	0000 ff1f fcff 0000 0000 ff0f fcff 0000     ................
   b9267:	0000 ff0f fcff 0000 0000 ff0f fcff 0000     ................
   b9277:	0000 ff07 fcff 0000 0000 ff03 fcff 0000     ................
   b9287:	0000 ff00 f8ff 0000 0000 3f00 f8ff 0000     ...........?....
   b9297:	0000 1f00 f8ff 0000 0000 0f00 f0ff 0000     ................
   b92a7:	0000 0f00 f0ff 0000 0000 0f00 e0ff 0000     ................
   b92b7:	0000 0700 c0ff 0000 0000 0300 80ff 0000     ................
   b92c7:	0000 0100 00ff 0000 0000 0100 00ff 0000     ................
   b92d7:	0000 0000 00fe 0000 0000 0000 00fe 0000     ................
   b92e7:	0000 0000 007e 0000 0000 0000 007c 0000     ....~.......|...
   b92f7:	0000 0000 007c 0000 0000 0000 0078 0000     ....|.......x...
   b9307:	0000 0000 0070 0000 0000 0000 0060 0000     ....p.......`...
   b9317:	0000 0000 0040 0000 0000 0000 0040 0000     ....@.......@...
   b9327:	0000 0000 0080 0000 0000 0000 0000 0000     ................
	...
   b934f:	6f53 7466 6177 6572 5320 4950 4200 6765     Software SPI.Beg
   b935f:	6e69 4920 4332 4200 6765 6e69 6820 7261     in I2C.Begin har
   b936f:	7764 7261 2065 5053 0049 6542 6967 206e     dware SPI.Begin 
   b937f:	6f73 7466 6177 6572 5320 4950                software SPI.

000b938c <_ZL4font>:
   b938c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b939c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b93ac:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b93bc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b93cc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b93dc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b93ec:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b93fc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b940c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b941c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b942c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b943c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b944c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b945c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b946c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b947c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b948c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b949c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b94ac:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b94bc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b94cc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b94dc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b94ec:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b94fc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b950c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b951c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b952c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b953c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b954c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b955c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b956c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b957c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b958c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b959c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b95ac:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b95bc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b95cc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b95dc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b95ec:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b95fc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b960c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b961c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b962c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b963c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b964c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b965c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b966c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b967c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b968c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b969c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b96ac:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b96bc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b96cc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b96dc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b96ec:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b96fc:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b970c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b971c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b972c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b973c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b974c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b975c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b976c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b977c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b978c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b979c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b97ac:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b97bc:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b97cc:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b97dc:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b97ec:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b97fc:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b980c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b981c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b982c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b983c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b984c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b985c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b986c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b987c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b9888 <_ZTV12Adafruit_GFX>:
	...
   b9898:	5821 000b 6fa5 000b 40a5 000b 54a5 000b     !X...o...@...T..
   b98a8:	55cb 000b 55e7 000b 5563 000b 5601 000b     .U...U..cU...V..
   b98b8:	5637 000b 5653 000b                         7V..SV..

000b98c0 <_ZTV16Adafruit_SSD1306>:
	...
   b98c8:	5bad 000b 5c3d 000b 5821 000b 6fa5 000b     .[..=\..!X...o..
   b98d8:	5bb1 000b 54a5 000b 5a39 000b 58c9 000b     .[...T..9Z...X..
   b98e8:	5563 000b 5601 000b 5637 000b 5653 000b     cU...V..7V..SV..

000b98f8 <CSWTCH.88>:
   b98f8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b9908:	0050 0000                                   P...

000b990c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9914 <_ZTVN5spark13EthernetClassE>:
	...
   b991c:	6b1b 000b 6b11 000b 6b07 000b 6afd 000b     .k...k...k...j..
   b992c:	6af1 000b 6ae5 000b 6e81 000b 6e89 000b     .j...j...n...n..
   b993c:	6ad9 000b 6ad1 000b 6ac7 000b 6abd 000b     .j...j...j...j..
   b994c:	6eb9 000b                                   .n..

000b9950 <_ZTV7TwoWire>:
	...
   b9958:	6b39 000b 6b83 000b 6b5b 000b 6b3b 000b     9k...k..[k..;k..
   b9968:	6b63 000b 6b6b 000b 6b73 000b 6b7b 000b     ck..kk..sk..{k..

000b9978 <_ZTV9IPAddress>:
	...
   b9980:	6d25 000b 6d15 000b 6d17 000b 7061 0070     %m...m...m..app.

000b9990 <_ZTVN5spark12NetworkClassE>:
	...
   b9998:	6e41 000b 6e4b 000b 6e55 000b 6e5f 000b     An..Kn..Un.._n..
   b99a8:	6e69 000b 6e75 000b 6e81 000b 6e89 000b     in..un...n...n..
   b99b8:	6e91 000b 6e9d 000b 6ea5 000b 6eaf 000b     .n...n...n...n..
   b99c8:	6eb9 000b                                   .n..

000b99cc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b99cc:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b99dc:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b99ec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b99f4:	753d 000b 7561 000b 7a4b 000b 756f 000b     =u..au..Kz..ou..
   b9a04:	7541 000b                                   Au..

000b9a08 <_ZTV9TCPClient>:
	...
   b9a10:	434d 000b 4381 000b 74b9 000b 74d3 000b     MC...C...t...t..
   b9a20:	78e1 000b 74fd 000b 7757 000b 7531 000b     .x...t..Ww..1u..
   b9a30:	77e9 000b 7629 000b 7785 000b 7995 000b     .w..)v...w...y..
   b9a40:	7725 000b 7533 000b 74e5 000b 7575 000b     %w..3u...t..uu..
   b9a50:	7609 000b 5925 252d 2d6d 6425 2554 3a48     .v..%Y-%m-%dT%H:
   b9a60:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9a70 <_ZTV11USARTSerial>:
	...
   b9a78:	7a65 000b 7ad1 000b 7aa9 000b 6fa5 000b     ez...z...z...o..
   b9a88:	7a79 000b 7a95 000b 7a87 000b 7aa3 000b     yz...z...z...z..
   b9a98:	7a67 000b 7a6b 000b                         gz..kz..

000b9aa0 <_ZTV9USBSerial>:
	...
   b9aa8:	7b0f 000b 7b77 000b 7b4d 000b 6fa5 000b     .{..w{..M{...o..
   b9ab8:	7b3f 000b 7b11 000b 7b21 000b 7b71 000b     ?{...{..!{..q{..
   b9ac8:	7b31 000b 7b09 000b                         1{...{..

000b9ad0 <_ZTVN5spark9WiFiClassE>:
	...
   b9ad8:	7c6f 000b 7c65 000b 7c5b 000b 7c11 000b     o|..e|..[|...|..
   b9ae8:	7c4f 000b 7c43 000b 6e81 000b 6e89 000b     O|..C|...n...n..
   b9af8:	7c37 000b 7c2f 000b 7c25 000b 7c1b 000b     7|../|..%|...|..
   b9b08:	6eb9 000b                                   .n..

000b9b0c <_ZSt7nothrow>:
	...

000b9b0d <_ZTSSt19_Sp_make_shared_tag>:
   b9b0d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9b1d:	6572 5f64 6174 0067 0000                     red_tag....

000b9b28 <_ZTISt19_Sp_make_shared_tag>:
   b9b28:	9b68 000b 9b0d 000b                         h.......

000b9b30 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9b30:	9bc8 000b 9b3c 000b 9bec 000b               ....<.......

000b9b3c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9b3c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9b4c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9b5c:	0045 0000                                   E...

000b9b60 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9b60:	0000 0000 9b30 000b 811d 000b 8131 000b     ....0.......1...
   b9b70:	82c5 000b 82c5 000b 819b 000b 80dd 000b     ................
   b9b80:	8183 000b 8145 000b 810f 000b               ....E.......

000b9b8c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9b8c:	9bc8 000b 9b98 000b 9b30 000b               ........0...

000b9b98 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9b98:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9ba8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9bb8:	666e 456f 0000 0000                         nfoE....

000b9bc0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9bc0:	0000 0000 9b8c 000b 81c5 000b 81d9 000b     ................
   b9bd0:	82c5 000b 82c5 000b 819b 000b 80dd 000b     ................
   b9be0:	8299 000b 8225 000b 81ed 000b               ....%.......

000b9bec <_ZTISt9type_info>:
   b9bec:	9b68 000b 9bf4 000b                         h.......

000b9bf4 <_ZTSSt9type_info>:
   b9bf4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9c04:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9c14:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b9c24:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b9c34:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b9c44:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b9c54:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b9c64:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b9c71 <link_const_variable_data_end>:
   b9c71:	00          	.byte	0x00
	...

000b9c74 <link_constructors_location>:
   b9c74:	000b5015 	.word	0x000b5015
   b9c78:	000b64a5 	.word	0x000b64a5
   b9c7c:	000b6aad 	.word	0x000b6aad
   b9c80:	000b6b25 	.word	0x000b6b25
   b9c84:	000b6e31 	.word	0x000b6e31
   b9c88:	000b6f91 	.word	0x000b6f91
   b9c8c:	000b70cd 	.word	0x000b70cd
   b9c90:	000b7495 	.word	0x000b7495
   b9c94:	000b7a51 	.word	0x000b7a51
   b9c98:	000b7c79 	.word	0x000b7c79

000b9c9c <link_constructors_end>:
   b9c9c:	00000000 	.word	0x00000000
